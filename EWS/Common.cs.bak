using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.InteropServices;
using System.ComponentModel;
using System.Data.SQLite;
using EWS.DCSTables;


namespace EWS
{
   

    public static class Common
    {
        public static int UnitSize = 10;
        public static int BaseSize = 3;
        public static int MAX_STRING_SIZE = 32;
        public static ushort LEORDER = 0x12AB;
        public static ushort BEORDER = 0xAB12;
        public static StreamWriter errorlogfile;
        public static string ConnectionString = "";
        public static bool AutoLoad;

        public static string ProjectPath = "";
        public static bool Blinking = false;
        public static string DatabaseFullName
        {
            get
            {
                return ProjectPath + "\\\\" + DatabaseName+".Sqlite";
            }
        }
        public static string DatabaseName = "";
        public static uint __bswap_32(uint __x)
        {
            return ((uint)((((uint)(__x) & (uint)0x000000ffUL) << 24) | (((uint)(__x) & (uint)0x0000ff00UL) << 8) | (((uint)(__x) & (uint)0x00ff0000UL) >> 8) | (((uint)(__x) & (uint)0xff000000UL) >> 24)));
        }
        public static bool IsSimpleType(int _type)
        {
            switch ((VarType)_type)
            {
                case VarType.UNKNOWN:
                case VarType.BOOL:
                case VarType.BYTE:
                case VarType.WORD:
                case VarType.DWORD:
                case VarType.LWORD:
                case VarType.SINT:
                case VarType.INT:
                case VarType.DINT:
                case VarType.LINT:
                case VarType.USINT:
                case VarType.UINT:
                case VarType.UDINT:
                case VarType.ULINT:
                case VarType.REAL:
                case VarType.LREAL:
                case VarType.DATE:
                case VarType.TOD:
                case VarType.DT:
                case VarType.STRING:
                case VarType.WSTRING:
                case VarType.TIME:
                    return true;
            }
            return false;

        }

        public static bool IsStandardFBType(VarType _type)
        {
            switch (_type)
            {
                case VarType.CTD:
                case VarType.CTU:
                case VarType.CTUD:
                case VarType.DERIVATIVE:
                case VarType.F_TRIG:
                case VarType.HYSTERESIS:
                case VarType.INTEGRAL:
                case VarType.PID:
                case VarType.R_TRIG:
                case VarType.RS:
                case VarType.RTC:
                case VarType.SEMA:
                case VarType.SR:
                case VarType.TOFF:
                case VarType.TON:
                case VarType.TP:
                case VarType.RAMP:
                case VarType.AVERAGE:
                case VarType.BLINK:
                case VarType.CMP:
                case VarType.LIM_ALR:
                case VarType.STACKIN:
                case VarType.PIDCAS://Homay-02/03/2014
                case VarType.PIDOVR://Homay-02/03/2014
                case VarType.SPLIT://Homay-02/03/2014
                case VarType.TOTALIZER://Homay-02/03/2014
                    return true;
            }
            return false;

        }
        public static bool IsUserdefinedFBType(VarType _type)
        {
            if ((int)_type > (int)VarType.USERDEFUNED)
            {
                return true;
            }
            else
            {
                return false;
            }

        }
        public static string SelectedFunctionCategory = "All";
        public static string SelectedFunctionBlockCategory = "All";
        public static SQLiteConnection Conn = null;

         public static bool IsSingleType(int _vartype)
        {

            switch ((VarType)_vartype)
            {
                case VarType.BOOL:
                case VarType.BYTE:
                case VarType.WORD:
                case VarType.DWORD:
                case VarType.LWORD:
                case VarType.SINT:
                case VarType.INT:
                case VarType.DINT:
                case VarType.LINT:
                case VarType.USINT:
                case VarType.UINT:
                case VarType.UDINT:
                case VarType.ULINT:
                case VarType.REAL:
                case VarType.LREAL:
                case VarType.DATE:
                case VarType.TOD:
                case VarType.DT:
                case VarType.STRING:
                case VarType.WSTRING:
                case VarType.TIME:
                    return true;
            }
            return false;
        }

        public static int IsSamePatern(int v1, int v2,int patern)
        {
            if ( (v1 & v2 & patern) != 0)
            {
                if (v1 == v2)
                {
                    return  v1;

                }
                else
                {
                    if (Common.IsSimpleType( v1))
                    {
                        return  v1;

                    }
                    else
                    {
                        return v2;

                    }
                }
            }
            return 0;

        }
        
    }

    //------------------------------
    //**********************************
    //------------------------------------

    public class TemporayVariable
    {
        public tblVariable tblvariable;
        public tblFormalParameter tblformalparameter;
        public TemporayVariable()
        {
            tblvariable = new tblVariable();
            tblformalparameter = new tblFormalParameter();

        }
        //public long domainid;
        //public long controllerid;
        //public long pouid;
        //public long varid;
        //public int vartype;
        //public int varclass;
        //public string name;
        //public string description;
        //public string PropertyName;
        //public int PropertyType;
        //public int PropertyNo;
        public long id;
    }

    public enum Token_Type //: char
    {
        Token_Unknown = 1,
        
        Token_Number,
        Token_Operator,
        Token_Variable,
        Token_Constant,
        //Token_Value,
        Token_String,
        Token_TempValue,
        Token_Comma,
        Token_LeftParenthisis,
        Token_RightParenthisis,
        Token_TempString,
        Token_Function,
        Token_FunctionEX,
        Token_FunctionInstance,
        Token_FunctionEXInstance,
        Token_FunctionBlockInstance,
        Token_Semicolumn,
        Token_UserDefinedFunction,
    }

    public enum FunctionGroup : int
    {
        TYPE_CONVERSION = 0,
        NUMERICAL,
        ARITHMETIC,
        BITWISE,
        CHARACTER_STRING,
        TIME,
        BIT_SHIFT,
        COMPARISON,
        SELECTION,
        ADDITIONAL,
        FLIP_FLOP,
        EDGE_DETECTION,
        COUNTER,
        TIMER,
        USER_DEFINED,
        KTC_DEFINED,
        BASIC_TYPES,
    }


    
    public enum VarType : uint//: unsigned int
    {

        UNKNOWN         = 0, // Not defined
        BOOL            = 0x00000001,//Boolean 
        BYTE            = 0x00000002,//Bit string of length 8 
        WORD            = 0x00000004,//Bit string of length 16 
        DWORD           = 0x00000008,//Bit string of length 32 
        LWORD           = 0x00000010,//Bit string of length 64 
        SINT            = 0x00000020,//Short integer 
        INT             = 0x00000040,//Integer 
        DINT            = 0x00000080,//Double integer 
        LINT            = 0x00000100,//Long integer 
        USINT           = 0x00000200,//Unsigned short integer 
        UINT            = 0x00000400,//Unsigned integer 
        UDINT           = 0x00000800,//Unsigned double integer 
        ULINT           = 0x00001000,//Unsigned long integer 
        REAL            = 0x00002000,//Real numbers 
        LREAL           = 0x00004000,//Long real numbers 
        DATE            = 0x00008000,// calendar date 
        TOD             = 0x00010000,//clock time
        DT              = 0x00020000,//time and date
        STRING          = 0x00040000,//Variable-length character string 
        WSTRING         = 0x00080000,//Variable-length character string 
        TIME            = 0x00100000,//Duration 
        ANY             = 0x7FFFFFFF,//ANY_ELEMENTARY,ANY_DERIVED
        ANY_ELEMENTARY  = 0x001BFFFF,//ANY_MAGNITUDE,ANY_BIT,ANY_DATE
        ANY_MAGNITUDE   = 0x00107FE0,//ANY_NUM - TIME
        ANY_BIT         = 0x0000001F,//LWORD, DWORD, WORD, BYTE, BOOL
        ANY_NUM         = 0x00007FE0,//ANY_INT,ANY_REAL
        ANY_DATE        = 0x00038000,//DATE, TOD, DT
        ANY_INT         = 0x00001FE0,//LINT, DINT, INT, SINT, ULINT, UDINT, UINT, USINT
        ANY_REAL        = 0x00006000,// LREAL, REAL
        ANY_FUNCTION    = 0x00200000,// Functions
        ANY_USERFUN     = 0x00300000,// User Defined Functions
        ANY_DERIVED     = 0x7FE00000,//
        CTD             = 0x7FE00000 + 1,
        CTU             = 0x7FE00000 + 2,
        CTUD            = 0x7FE00000 + 3,
        DERIVATIVE      = 0x7FE00000 + 4,
        F_TRIG          = 0x7FE00000 + 5,
        HYSTERESIS      = 0x7FE00000 + 6,
        INTEGRAL        = 0x7FE00000 + 7,
        PID             = 0x7FE00000 + 8,
        R_TRIG          = 0x7FE00000 + 9,
        RS              = 0x7FE00000 + 10,
        RTC             = 0x7FE00000 + 11,
        SEMA            = 0x7FE00000 + 12,
        SR              = 0x7FE00000 + 13,
        TOFF            = 0x7FE00000 + 14,
        TON             = 0x7FE00000 + 15,
        TP              = 0x7FE00000 + 16,
        RAMP            = 0x7FE00000 + 17,
        AVERAGE         = 0x7FE00000 + 18,
        BLINK           = 0x7FE00000 + 19,
        LIM_ALR         = 0x7FE00000 + 21,
        PIDCAS          = 0x7FE00000 + 29,
        PIDOVR          = 0x7FE00000 + 30,
        SPLIT           = 0x7FE00000 + 31,
        ALARMANC        = 0x7FE00000 + 32,
        CMP             = 0x7FE00000 + 33,
        LAG             = 0x7FE00000 + 34,
        SELPRI          = 0x7FE00000 + 35,
        SELREAD         = 0x7FE00000 + 36,
        SETPRI          = 0x7FE00000 + 37,
        SIG_GEN         = 0x7FE00000 + 38,
        STACKIN         = 0x7FE00000 + 39,
        SWDOUT          = 0x7FE00000 + 40,
        SWSOUT          = 0x7FE00000 + 41,
        TPLS            = 0x7FE00000 + 42,
        TSTP            = 0x7FE00000 + 43,
        WKHOUR          = 0x7FE00000 + 44,
        TOTALIZER       = 0x7FE00000 + 45,
        USERDEFUNED     = 0x7FE00000 + 90,

    }

    public enum VarClass //: unsigned char
    {
        Input = 0,	//Input Variable
        Output,	    //Output Variable
        InOut,	    //Reference Variable
        External,	    //External Variable 
        Local,	    //Local Variable not accessable outside of Function or Function block
        Global,	    //Global Variable
        Access,     // Access Variable
        Internal,	    //Internal Variable which are same as input,output or inout pins but does not show in FBD diagram
        Child,	    //All variables related to Instance of Function or Functionblock
        Count
    }

    public enum StationType //: unsigned char
    {
        OWS = 2,    // OWS Station
        LCU = 4,	// LCU Station
    }

    public enum ShowVariableMode
    {
        Normal ,
        Compact,
        WideLeft ,
        WideRight,
    }

    public enum VarOption
    {
        _NonRetain = 0,	//Non Retain Variable
        _Retain,	    //Retain Variable
    }

    [StructLayout(LayoutKind.Explicit, Size = 6)]
    struct VALUE
    {
        [FieldOffset(0)]
        public bool BOOL;

        [FieldOffset(0)]
        public sbyte SINT;

        [FieldOffset(0)]
        public short INT;

        [FieldOffset(0)]
        public int DINT;

        [FieldOffset(0)]
        public byte USINT;

        [FieldOffset(0)]
        public ushort UINT;

        [FieldOffset(0)]
        public uint UDINT;

        [FieldOffset(0)]
        public float REAL;

        [FieldOffset(0)]
        public uint TIME;

        [FieldOffset(0)]
        public byte BYTE;

        [FieldOffset(0)]
        public ushort WORD;

        [FieldOffset(0)]
        public uint DWORD;

        [FieldOffset(4)]
        public uint Type;

    }
    //typedef	struct _VALUE
    //{
    //	union{
    //		struct{
    //			uint8_t res01;
    //			uint8_t res02;
    //			uint8_t res03;
    //			bool BOOL ;			 //Boolean //DIG
    //		};
    //
    //		struct{
    //
    //			uint8_t res04;
    //			uint8_t res05;
    //			uint8_t res06;
    //			unsigned char	BYTE;//Bit string of length 8
    //		};
    //
    //		struct{
    //			uint8_t res10;
    //			uint8_t res11;
    //			uint8_t res12;
    //			unsigned char	USINT;
    //		};
    //		struct{
    //			uint8_t res13;
    //			uint8_t res14;
    //			unsigned short	WORD;
    //
    //		};
    //		struct{
    //			uint8_t res15;
    //			uint8_t res16;
    //			unsigned short	UINT;
    //		};
    //		struct{
    //			uint8_t res17;
    //			uint8_t res18;
    //			short	SINT;
    //		};
    //		struct{
    //			uint8_t res19;
    //			uint8_t res20;
    //			short	INT;
    //		};
    //		unsigned int	DWORD;//Bit string of length 32  //LNG
    //		unsigned int	UDINT;
    //		unsigned int	Index;//Index of variable
    //		int				TIME;
    //		int				DINT;
    //		float			REAL; // ANA
    //
    //	};
    //
    //}VALUE;
    /*
typedef	union _VALUE 
{
    bool BOOL ;//Boolean 
    unsigned char	BYTE;//Bit string of length 8 
    unsigned short	WORD;//Bit string of length 16 
    unsigned int	DWORD;//Bit string of length 32 
    unsigned char	USINT; 
    unsigned short	UINT;
    unsigned int	UDINT;
    char			SINT;
    short			INT;
    int				DINT;
    float			REAL;
    int				TIME;
    //unsigned int	Index;//Index of variable
} VALUE;
*/
   

    struct ValueObj
    {
        public VALUE Val ;
        public int ValueType;
        public void Reorder(ref ValueObj valueobj)
        {
            //valueobj.Val.UDINT			= __bswap_32(Val.UDINT);
            valueobj.Val.UDINT = Common.__bswap_32(Val.UDINT);
            //  valueobj.ValueType = (VarType)Enum.Parse(typeof(VarType), Common.__bswap_32((int)ValueType);
            valueobj.ValueType = (int)Enum.ToObject(typeof(VarType), Common.__bswap_32((uint)ValueType));
        }
    }

    public class STRINGOBJ
    {
        public byte[] Val = new byte[Common.MAX_STRING_SIZE];

        public int Len;

    }

    public struct OPERAND
    {
       public long Index;//Index of variable
       public  Token_Type Token;
       public byte PropertyNo;
       public byte Res1;
       public byte Res2;
       public byte Res3;

       public  uint Nodeno;// controller node no
       public   int type;  // Constant type

       //public   void Reorder(OPERAND operand)
       // {
       //     operand.Index = Convert.ToUInt32(Index);
       //     operand.Token = (Token_Type)Convert.ToUInt32((int)Token);
       //     operand.Nodeno = Convert.ToUInt32(Nodeno);
       //     operand.PropertyNo = PropertyNo;
       //     operand.Res1 = Res1;
       //     operand.Res2 = Res2;
       //     operand.Res3 = Res3;
       // }
    }


    public enum OPCODES : int
    {
        UNKNOWN_ = 0,
        BOOL_MOVE_BOOL_____,
        BYTE_MOVE_BYTE_____,
        WORD_MOVE_WORD_____,
        DWORD_MOVE_DWORD_____,
        LWORD_MOVE_LWORD_____,
        SINT_MOVE_SINT_____,
        INT_MOVE_INT_____,
        DINT_MOVE_DINT_____,
        LINT_MOVE_LINT_____,
        USINT_MOVE_USINT_____,
        UINT_MOVE_UINT_____,
        UDINT_MOVE_UDINT_____,
        ULINT_MOVE_ULINT_____,
        REAL_MOVE_REAL_____,
        LREAL_MOVE_LREAL_____,
        TOD_MOVE_TOD_____,
        DT_MOVE_DT_____,
        TIME_MOVE_TIME_____,
        DATE_MOVE_DATE_____,
   

     
        BOOL_AND_BOOL_BOOL____,
        BYTE_AND_BYTE_BYTE____,
        WORD_AND_WORD_WORD____,
        DWORD_AND_DWORD_DWORD____,
        LWORD_AND_LWORD_LWORD____,
        
        BOOL_OR_BOOL_BOOL____,
        BYTE_OR_BYTE_BYTE____,
        WORD_OR_WORD_WORD____,
        DWORD_OR_DWORD_DWORD____,
        LWORD_OR_LWORD_LWORD____,
        
        BOOL_XOR_BOOL_BOOL____,
        BYTE_XOR_BYTE_BYTE____,
        WORD_XOR_WORD_WORD____,
        DWORD_XOR_DWORD_DWORD____,
        LWORD_XOR_LWORD_LWORD____,
        
        BOOL_NOT_BOOL_____,
        BYTE_NOT_BYTE_____,
        WORD_NOT_WORD_____,
        DWORD_NOT_DWORD_____,
        LWORD_NOT_LWORD_____,
        END_NOT_OPCODE_,


        BEGIN_ADD_OPCODE_,
        SINT_ADD_SINT_SINT____,
        INT_ADD_INT_INT____,
        DINT_ADD_DINT_DINT____,
        LINT_ADD_LINT_LINT____,
        USINT_ADD_USINT_USINT____,
        UINT_ADD_UINT_UINT____,
        UDINT_ADD_UDINT_UDINT____,
        ULINT_ADD_ULINT_ULINT____,
        REAL_ADD_REAL_REAL____,
        LREAL_ADD_LREAL_LREAL____,
        TIME_ADD_TIME_TIME____,
        TOD_ADD_TOD_TIME____,
        DT_ADD_DT_TIME____,
        
        SINT_SUB_SINT_SINT____,
        INT_SUB_INT_INT____,
        DINT_SUB_DINT_DINT____,
        LINT_SUB_LINT_LINT____,
        USINT_SUB_USINT_USINT____,
        UINT_SUB_UINT_UINT____,
        UDINT_SUB_UDINT_UDINT____,
        ULINT_SUB_ULINT_ULINT____,
        TIME_SUB_TIME_TIME____,
        TIME_SUB_DATE_DATE____,
        TOD_SUB_TOD_TIME____,
        TIME_SUB_TOD_TOD____,
        DT_SUB_DT_TIME____,
        TIME_SUB_DT_DT____,
        REAL_SUB_REAL_REAL____,
        LREAL_SUB_LREAL_LREAL____,
        
        SINT_MOD_SINT_SINT____,
        INT_MOD_INT_INT____,
        DINT_MOD_DINT_DINT____,
        LINT_MOD_LINT_LINT____,
        USINT_MOD_USINT_USINT____,
        UINT_MOD_UINT_UINT____,
        UDINT_MOD_UDINT_UDINT____,
        ULINT_MOD_ULINT_ULINT____,
        REAL_MOD_REAL_REAL____,
        LREAL_MOD_LREAL_LREAL____,
        
        SINT_EXPT_SINT_SINT____,
        INT_EXPT_INT_INT____,
        DINT_EXPT_DINT_DINT____,
        LINT_EXPT_LINT_LINT____,
        USINT_EXPT_USINT_USINT____,
        UINT_EXPT_UINT_UINT____,
        UDINT_EXPT_UDINT_UDINT____,
        ULINT_EXPT_ULINT_ULINT____,
        REAL_EXPT_REAL_REAL____,
        LREAL_EXPT_LREAL_LREAL____,
        
        BYTE_SHL_BYTE_UINT____,
        WORD_SHL_WORD_UINT____,
        DWORD_SHL_DWORD_UINT____,
        LWORD_SHL_LWORD_UINT____,
        
        BYTE_SHR_BYTE_UINT____,
        WORD_SHR_WORD_UINT____,
        DWORD_SHR_DWORD_UINT____,
        LWORD_SHR_LWORD_UINT____,
        END_SHR_OPCODE_,


        BEGIN_ROR_OPCODE_,
        BYTE_ROR_BYTE_UINT____,
        WORD_ROR_WORD_UINT____,
        DWORD_ROR_DWORD_UINT____,
        LWORD_ROR_LWORD_UINT____,
        
        BYTE_ROL_BYTE_UINT____,
        WORD_ROL_WORD_UINT____,
        DWORD_ROL_DWORD_UINT____,
        LWORD_ROL_LWORD_UINT____,
        
        BOOL_MAX_BOOL_BOOL____,
        BYTE_MAX_BYTE_BYTE____,
        WORD_MAX_WORD_WORD____,
        DWORD_MAX_DWORD_DWORD____,
        LWORD_MAX_LWORD_LWORD____,
        SINT_MAX_SINT_SINT____,
        INT_MAX_INT_INT____,
        DINT_MAX_DINT_DINT____,
        LINT_MAX_LINT_LINT____,
        USINT_MAX_USINT_USINT____,
        UINT_MAX_UINT_UINT____,
        UDINT_MAX_UDINT_UDINT____,
        ULINT_MAX_ULINT_ULINT____,
        REAL_MAX_REAL_REAL____,
        LREAL_MAX_LREAL_LREAL____,
        
        BOOL_MIN_BOOL_BOOL____,
        BYTE_MIN_BYTE_BYTE____,
        WORD_MIN_WORD_WORD____,
        DWORD_MIN_DWORD_DWORD____,
        LWORD_MIN_LWORD_LWORD____,
        SINT_MIN_SINT_SINT____,
        INT_MIN_INT_INT____,
        DINT_MIN_DINT_DINT____,
        LINT_MIN_LINT_LINT____,
        USINT_MIN_USINT_USINT____,
        UINT_MIN_UINT_UINT____,
        UDINT_MIN_UDINT_UDINT____,
        ULINT_MIN_ULINT_ULINT____,
        REAL_MIN_REAL_REAL____,
        LREAL_MIN_LREAL_LREAL____,
        
        BOOL_LIMIT_BOOL_BOOL_BOOL___,
        BYTE_LIMIT_BYTE_BYTE_BYTE___,
        WORD_LIMIT_WORD_WORD_WORD___,
        DWORD_LIMIT_DWORD_DWORD_DWORD___,
        LWORD_LIMIT_LWORD_LWORD_LWORD___,
        SINT_LIMIT_SINT_SINT_SINT___,
        INT_LIMIT_INT_INT_INT___,
        DINT_LIMIT_DINT_DINT_DINT___,
        LINT_LIMIT_LINT_LINT_LINT___,
        USINT_LIMIT_USINT_USINT_USINT___,
        UINT_LIMIT_UINT_UINT_UINT___,
        UDINT_LIMIT_UDINT_UDINT_UDINT___,
        ULINT_LIMIT_ULINT_ULINT_ULINT___,
        REAL_LIMIT_REAL_REAL_REAL___,
        LREAL_LIMIT_LREAL_LREAL_LREAL___,
        TIME_LIMIT_TIME_TIME_TIME___,
        END_LIMIT_OPCODE_,


        #region _COMPARISON_OPCODES_
        BEGIN_COMPARISON_OPCODES_,
        #region _GT_OPCODE_
        BEGIN_GT_OPCODE_,
        BOOL_GT_BOOL_BOOL____,
        BOOL_GT_BYTE_BYTE____,
        BOOL_GT_WORD_WORD____,
        BOOL_GT_DWORD_DWORD____,
        BOOL_GT_LWORD_LWORD____,
        BOOL_GT_SINT_SINT____,
        BOOL_GT_INT_INT____,
        BOOL_GT_DINT_DINT____,
        BOOL_GT_LINT_LINT____,
        BOOL_GT_USINT_USINT____,
        BOOL_GT_UINT_UINT____,
        BOOL_GT_UDINT_UDINT____,
        BOOL_GT_ULINT_ULINT____,
        BOOL_GT_REAL_REAL____,
        BOOL_GT_LREAL_LREAL____,
        BOOL_GT_TIME_TIME____,
        BOOL_GT_DATE_DATE____,
        BOOL_GT_TOD_TOD____,
        BOOL_GT_DT_DT____,
        END_GT_OPCODE_,
        # endregion

        # region _GE_OPCODE_
        BEGIN_GE_OPCODE_,
        BOOL_GE_BOOL_BOOL____,
        BOOL_GE_BYTE_BYTE____,
        BOOL_GE_WORD_WORD____,
        BOOL_GE_DWORD_DWORD____,
        BOOL_GE_LWORD_LWORD____,
        BOOL_GE_SINT_SINT____,
        BOOL_GE_INT_INT____,
        BOOL_GE_DINT_DINT____,
        BOOL_GE_LINT_LINT____,
        BOOL_GE_USINT_USINT____,
        BOOL_GE_UINT_UINT____,
        BOOL_GE_UDINT_UDINT____,
        BOOL_GE_ULINT_ULINT____,
        BOOL_GE_REAL_REAL____,
        BOOL_GE_LREAL_LREAL____,
        BOOL_GE_TIME_TIME____,
        BOOL_GE_DATE_DATE____,
        BOOL_GE_TOD_TOD____,
        BOOL_GE_DT_DT____,
        END_GE_OPCODE_,
        # endregion

        # region _LT_OPCODE_
        BEGIN_LT_OPCODE_,
        BOOL_LT_BOOL_BOOL____,
        BOOL_LT_BYTE_BYTE____,
        BOOL_LT_WORD_WORD____,
        BOOL_LT_DWORD_DWORD____,
        BOOL_LT_LWORD_LWORD____,
        BOOL_LT_SINT_SINT____,
        BOOL_LT_INT_INT____,
        BOOL_LT_DINT_DINT____,
        BOOL_LT_LINT_LINT____,
        BOOL_LT_USINT_USINT____,
        BOOL_LT_UINT_UINT____,
        BOOL_LT_UDINT_UDINT____,
        BOOL_LT_ULINT_ULINT____,
        BOOL_LT_REAL_REAL____,
        BOOL_LT_LREAL_LREAL____,
        BOOL_LT_TIME_TIME____,
        BOOL_LT_DATE_DATE____,
        BOOL_LT_TOD_TOD____,
        BOOL_LT_DT_DT____,
        END_LT_OPCODE_,
        # endregion

        # region _LE_OPCODE_
        BEGIN_LE_OPCODE_,
        BOOL_LE_BOOL_BOOL____,
        BOOL_LE_BYTE_BYTE____,
        BOOL_LE_WORD_WORD____,
        BOOL_LE_DWORD_DWORD____,
        BOOL_LE_LWORD_LWORD____,
        BOOL_LE_SINT_SINT____,
        BOOL_LE_INT_INT____,
        BOOL_LE_DINT_DINT____,
        BOOL_LE_LINT_LINT____,
        BOOL_LE_USINT_USINT____,
        BOOL_LE_UINT_UINT____,
        BOOL_LE_UDINT_UDINT____,
        BOOL_LE_ULINT_ULINT____,
        BOOL_LE_REAL_REAL____,
        BOOL_LE_LREAL_LREAL____,
        BOOL_LE_TIME_TIME____,
        BOOL_LE_DATE_DATE____,
        BOOL_LE_TOD_TOD____,
        BOOL_LE_DT_DT____,
        END_LE_OPCODE_,
        # endregion

        # region _EQ_OPCODE_
        BEGIN_EQ_OPCODE_,
        BOOL_EQ_BOOL_BOOL____,
        BOOL_EQ_BYTE_BYTE____,
        BOOL_EQ_WORD_WORD____,
        BOOL_EQ_DWORD_DWORD____,
        BOOL_EQ_LWORD_LWORD____,
        BOOL_EQ_SINT_SINT____,
        BOOL_EQ_INT_INT____,
        BOOL_EQ_DINT_DINT____,
        BOOL_EQ_LINT_LINT____,
        BOOL_EQ_USINT_USINT____,
        BOOL_EQ_UINT_UINT____,
        BOOL_EQ_UDINT_UDINT____,
        BOOL_EQ_ULINT_ULINT____,
        BOOL_EQ_REAL_REAL____,
        BOOL_EQ_LREAL_LREAL____,
        BOOL_EQ_TIME_TIME____,
        BOOL_EQ_DATE_DATE____,
        BOOL_EQ_TOD_TOD____,
        BOOL_EQ_DT_DT____,
        END_EQ_OPCODE_,
        # endregion

        # region _NE_OPCODE_
        BEGIN_NE_OPCODE_,
        BOOL_NE_BOOL_BOOL____,
        BOOL_NE_BYTE_BYTE____,
        BOOL_NE_WORD_WORD____,
        BOOL_NE_DWORD_DWORD____,
        BOOL_NE_LWORD_LWORD____,
        BOOL_NE_SINT_SINT____,
        BOOL_NE_INT_INT____,
        BOOL_NE_DINT_DINT____,
        BOOL_NE_LINT_LINT____,
        BOOL_NE_USINT_USINT____,
        BOOL_NE_UINT_UINT____,
        BOOL_NE_UDINT_UDINT____,
        BOOL_NE_ULINT_ULINT____,
        BOOL_NE_REAL_REAL____,
        BOOL_NE_LREAL_LREAL____,
        BOOL_NE_TIME_TIME____,
        BOOL_NE_DATE_DATE____,
        BOOL_NE_TOD_TOD____,
        BOOL_NE_DT_DT____,
        END_NE_OPCODE_,
        # endregion
        END_COMPARISON_OPCODES_,
        # endregion


        BEGIN_DIV_OPCODE_,
        TIME_DIV_TIME_SINT____,
        TIME_DIV_TIME_INT____,
        TIME_DIV_TIME_DINT____,
        TIME_DIV_TIME_LINT____,
        TIME_DIV_TIME_USINT____,
        TIME_DIV_TIME_UINT____,
        TIME_DIV_TIME_UDINT____,
        TIME_DIV_TIME_ULINT____,
        TIME_DIV_TIME_REAL____,
        TIME_DIV_TIME_LREAL____,
        SINT_DIV_SINT_SINT____,
        INT_DIV_INT_INT____,
        DINT_DIV_DINT_DINT____,
        LINT_DIV_LINT_LINT____,
        USINT_DIV_USINT_USINT____,
        UINT_DIV_UINT_UINT____,
        UDINT_DIV_UDINT_UDINT____,
        ULINT_DIV_ULINT_ULINT____,
        REAL_DIV_REAL_REAL____,
        LREAL_DIV_LREAL_LREAL____,
        END_DIV_OPCODE_,


        BEGIN_MUL_OPCODE_,
        TIME_MUL_TIME_SINT____,
        TIME_MUL_TIME_INT____,
        TIME_MUL_TIME_DINT____,
        TIME_MUL_TIME_LINT____,
        TIME_MUL_TIME_USINT____,
        TIME_MUL_TIME_UINT____,
        TIME_MUL_TIME_UDINT____,
        TIME_MUL_TIME_ULINT____,
        TIME_MUL_TIME_REAL____,
        TIME_MUL_TIME_LREAL____,
        SINT_MUL_SINT_SINT____,
        INT_MUL_INT_INT____,
        DINT_MUL_DINT_DINT____,
        LINT_MUL_LINT_LINT____,
        USINT_MUL_USINT_USINT____,
        UINT_MUL_UINT_UINT____,
        UDINT_MUL_UDINT_UDINT____,
        ULINT_MUL_ULINT_ULINT____,
        REAL_MUL_REAL_REAL____,
        LREAL_MUL_LREAL_LREAL____,
        END_MUL_OPCODE_,


        BEGIN_MUX_USINT_OPCODE_,
        TIME_MUX_USINT_TIME_TIME___,
        DATE_MUX_USINT_DATE_DATE___,
        TOD_MUX_USINT_TOD_TOD___,
        DT_MUX_USINT_DT_DT___,
        BOOL_MUX_USINT_BOOL_BOOL___,
        BYTE_MUX_USINT_BYTE_BYTE___,
        WORD_MUX_USINT_WORD_WORD___,
        DWORD_MUX_USINT_DWORD_DWORD___,
        LWORD_MUX_USINT_LWORD_LWORD___,
        SINT_MUX_USINT_SINT_SINT___,
        INT_MUX_USINT_INT_INT___,
        DINT_MUX_USINT_DINT_DINT___,
        LINT_MUX_USINT_LINT_LINT___,
        USINT_MUX_USINT_USINT_USINT___,
        UINT_MUX_USINT_UINT_UINT___,
        UDINT_MUX_USINT_UDINT_UDINT___,
        ULINT_MUX_USINT_ULINT_ULINT___,
        REAL_MUX_USINT_REAL_REAL___,
        LREAL_MUX_USINT_LREAL_LREAL___,
        END_MUX_USINT_OPCODE_,


        BEGIN_IF_BOOL_OPCODE_,
        BOOL_IF_BOOL_BOOL_____,
        BYTE_IF_BOOL_BYTE_____,
        WORD_IF_BOOL_WORD_____,
        DWORD_IF_BOOL_DWORD_____,
        LWORD_IF_BOOL_LWORD_____,
        SINT_IF_BOOL_SINT_____,
        INT_IF_BOOL_INT_____,
        DINT_IF_BOOL_DINT_____,
        LINT_IF_BOOL_LINT_____,
        USINT_IF_BOOL_USINT_____,
        UINT_IF_BOOL_UINT_____,
        UDINT_IF_BOOL_UDINT_____,
        ULINT_IF_BOOL_ULINT_____,
        REAL_IF_BOOL_REAL_____,
        LREAL_IF_BOOL_LREAL_____,
        TIME_IF_BOOL_TIME_____,
        DATE_IF_BOOL_DATE_____,
        TOD_IF_BOOL_TOD_____,
        DT_IF_BOOL_DT_____,
        STRING_IF_BOOL_STRING_____,
        
        BOOL_IFE_BOOL_BOOL_BOOL___,
        BYTE_IFE_BOOL_BYTE_BYTE___,
        WORD_IFE_BOOL_WORD_WORD___,
        DWORD_IFE_BOOL_DWORD_DWORD___,
        LWORD_IFE_BOOL_LWORD_LWORD___,
        SINT_IFE_BOOL_SINT_SINT___,
        INT_IFE_BOOL_INT_INT___,
        DINT_IFE_BOOL_DINT_DINT___,
        LINT_IFE_BOOL_LINT_LINT___,
        USINT_IFE_BOOL_USINT_USINT___,
        UINT_IFE_BOOL_UINT_UINT___,
        UDINT_IFE_BOOL_UDINT_UDINT___,
        ULINT_IFE_BOOL_ULINT_ULINT___,
        REAL_IFE_BOOL_REAL_REAL___,
        LREAL_IFE_BOOL_LREAL_LREAL___,
        TIME_IFE_BOOL_TIME_TIME___,
        DATE_IFE_BOOL_DATE_DATE___,
        TOD_IFE_BOOL_TOD_TOD___,
        DT_IFE_BOOL_DT_DT___,
        STRING_IFE_BOOL_STRING_STRING___,
        DATE_SEL_BOOL_DATE_DATE___,
        TOD_SEL_BOOL_TOD_TOD___,
        DT_SEL_BOOL_DT_DT___,
        BOOL_SEL_BOOL_BOOL_BOOL___,
        BYTE_SEL_BOOL_BYTE_BYTE___,
        WORD_SEL_BOOL_WORD_WORD___,
        DWORD_SEL_BOOL_DWORD_DWORD___,
        LWORD_SEL_BOOL_LWORD_LWORD___,
        SINT_SEL_BOOL_SINT_SINT___,
        INT_SEL_BOOL_INT_INT___,
        DINT_SEL_BOOL_DINT_DINT___,
        LINT_SEL_BOOL_LINT_LINT___,
        USINT_SEL_BOOL_USINT_USINT___,
        UINT_SEL_BOOL_UINT_UINT___,
        UDINT_SEL_BOOL_UDINT_UDINT___,
        ULINT_SEL_BOOL_ULINT_ULINT___,
        REAL_SEL_BOOL_REAL_REAL___,
        LREAL_SEL_BOOL_LREAL_LREAL___,
        TIME_SEL_BOOL_TIME_TIME___,
       
        LREAL_SQRT_LREAL_____,
        REAL_SQRT_REAL_____,
        LREAL_LN_LREAL_____,
        REAL_LN_REAL_____,
        LREAL_LOG_LREAL_____,
        REAL_LOG_REAL_____,
        LREAL_EXP_LREAL_____,
        REAL_EXP_REAL_____,
        LREAL_SIN_LREAL_____,
        REAL_SIN_REAL_____,
        LREAL_COS_LREAL_____,
        REAL_COS_REAL_____,
        LREAL_TAN_LREAL_____,
        REAL_TAN_REAL_____,
        LREAL_ASIN_LREAL_____,
        REAL_ASIN_REAL_____,
        LREAL_ACOS_LREAL_____,
        REAL_ACOS_REAL_____,
        LREAL_ATAN_LREAL_____,
        REAL_ATAN_REAL_____,
        END_GENERAL_MATH_OPCODE_,


        BEGIN_ABS_OPCODE_,
        SINT_ABS_SINT_____,
        INT_ABS_INT_____,
        DINT_ABS_DINT_____,
        LINT_ABS_LINT_____,
        USINT_ABS_USINT_____,
        UINT_ABS_UINT_____,
        UDINT_ABS_UDINT_____,
        ULINT_ABS_ULINT_____,
        REAL_ABS_REAL_____,
        LREAL_ABS_LREAL_____,
        END_ABS_OPCODE_,


        BEGIN_TO_OPCODE_,
        BOOL_TO_BOOL_____,
        BOOL_TO_BYTE_____,
        BOOL_TO_WORD_____,
        BOOL_TO_DWORD_____,
        BOOL_TO_LWORD_____,
        BOOL_TO_SINT_____,
        BOOL_TO_INT_____,
        BOOL_TO_DINT_____,
        BOOL_TO_LINT_____,
        BOOL_TO_USINT_____,
        BOOL_TO_UINT_____,
        BOOL_TO_UDINT_____,
        BOOL_TO_ULINT_____,
        BOOL_TO_REAL_____,
        BOOL_TO_LREAL_____,
        BOOL_TO_TIME_____,
        BOOL_TO_DATE_____,
        BOOL_TO_TOD_____,
        BOOL_TO_DT_____,
        BYTE_TO_BOOL_____,
        BYTE_TO_BYTE_____,
        BYTE_TO_WORD_____,
        BYTE_TO_DWORD_____,
        BYTE_TO_LWORD_____,
        BYTE_TO_SINT_____,
        BYTE_TO_INT_____,
        BYTE_TO_DINT_____,
        BYTE_TO_LINT_____,
        BYTE_TO_USINT_____,
        BYTE_TO_UINT_____,
        BYTE_TO_UDINT_____,
        BYTE_TO_ULINT_____,
        BYTE_TO_REAL_____,
        BYTE_TO_LREAL_____,
        BYTE_TO_TIME_____,
        BYTE_TO_DATE_____,
        BYTE_TO_TOD_____,
        BYTE_TO_DT_____,
        WORD_TO_BOOL_____,
        WORD_TO_BYTE_____,
        WORD_TO_WORD_____,
        WORD_TO_DWORD_____,
        WORD_TO_LWORD_____,
        WORD_TO_SINT_____,
        WORD_TO_INT_____,
        WORD_TO_DINT_____,
        WORD_TO_LINT_____,
        WORD_TO_USINT_____,
        WORD_TO_UINT_____,
        WORD_TO_UDINT_____,
        WORD_TO_ULINT_____,
        WORD_TO_REAL_____,
        WORD_TO_LREAL_____,
        WORD_TO_TIME_____,
        WORD_TO_DATE_____,
        WORD_TO_TOD_____,
        WORD_TO_DT_____,
        DWORD_TO_BOOL_____,
        DWORD_TO_BYTE_____,
        DWORD_TO_WORD_____,
        DWORD_TO_DWORD_____,
        DWORD_TO_LWORD_____,
        DWORD_TO_SINT_____,
        DWORD_TO_INT_____,
        DWORD_TO_DINT_____,
        DWORD_TO_LINT_____,
        DWORD_TO_USINT_____,
        DWORD_TO_UINT_____,
        DWORD_TO_UDINT_____,
        DWORD_TO_ULINT_____,
        DWORD_TO_REAL_____,
        DWORD_TO_LREAL_____,
        DWORD_TO_TIME_____,
        DWORD_TO_DATE_____,
        DWORD_TO_TOD_____,
        DWORD_TO_DT_____,
        LWORD_TO_BOOL_____,
        LWORD_TO_BYTE_____,
        LWORD_TO_WORD_____,
        LWORD_TO_DWORD_____,
        LWORD_TO_LWORD_____,
        LWORD_TO_SINT_____,
        LWORD_TO_INT_____,
        LWORD_TO_DINT_____,
        LWORD_TO_LINT_____,
        LWORD_TO_USINT_____,
        LWORD_TO_UINT_____,
        LWORD_TO_UDINT_____,
        LWORD_TO_ULINT_____,
        LWORD_TO_REAL_____,
        LWORD_TO_LREAL_____,
        LWORD_TO_TIME_____,
        LWORD_TO_DATE_____,
        LWORD_TO_TOD_____,
        LWORD_TO_DT_____,
        SINT_TO_BOOL_____,
        SINT_TO_BYTE_____,
        SINT_TO_WORD_____,
        SINT_TO_DWORD_____,
        SINT_TO_LWORD_____,
        SINT_TO_SINT_____,
        SINT_TO_INT_____,
        SINT_TO_DINT_____,
        SINT_TO_LINT_____,
        SINT_TO_USINT_____,
        SINT_TO_UINT_____,
        SINT_TO_UDINT_____,
        SINT_TO_ULINT_____,
        SINT_TO_REAL_____,
        SINT_TO_LREAL_____,
        SINT_TO_TIME_____,
        SINT_TO_DATE_____,
        SINT_TO_TOD_____,
        SINT_TO_DT_____,
        INT_TO_BOOL_____,
        INT_TO_BYTE_____,
        INT_TO_WORD_____,
        INT_TO_DWORD_____,
        INT_TO_LWORD_____,
        INT_TO_SINT_____,
        INT_TO_INT_____,
        INT_TO_DINT_____,
        INT_TO_LINT_____,
        INT_TO_USINT_____,
        INT_TO_UINT_____,
        INT_TO_UDINT_____,
        INT_TO_ULINT_____,
        INT_TO_REAL_____,
        INT_TO_LREAL_____,
        INT_TO_TIME_____,
        INT_TO_DATE_____,
        INT_TO_TOD_____,
        INT_TO_DT_____,
        DINT_TO_BOOL_____,
        DINT_TO_BYTE_____,
        DINT_TO_WORD_____,
        DINT_TO_DWORD_____,
        DINT_TO_LWORD_____,
        DINT_TO_SINT_____,
        DINT_TO_INT_____,
        DINT_TO_DINT_____,
        DINT_TO_LINT_____,
        DINT_TO_USINT_____,
        DINT_TO_UINT_____,
        DINT_TO_UDINT_____,
        DINT_TO_ULINT_____,
        DINT_TO_REAL_____,
        DINT_TO_LREAL_____,
        DINT_TO_TIME_____,
        DINT_TO_DATE_____,
        DINT_TO_TOD_____,
        DINT_TO_DT_____,
        LINT_TO_BOOL_____,
        LINT_TO_BYTE_____,
        LINT_TO_WORD_____,
        LINT_TO_DWORD_____,
        LINT_TO_LWORD_____,
        LINT_TO_SINT_____,
        LINT_TO_INT_____,
        LINT_TO_DINT_____,
        LINT_TO_LINT_____,
        LINT_TO_USINT_____,
        LINT_TO_UINT_____,
        LINT_TO_UDINT_____,
        LINT_TO_ULINT_____,
        LINT_TO_REAL_____,
        LINT_TO_LREAL_____,
        LINT_TO_TIME_____,
        LINT_TO_DATE_____,
        LINT_TO_TOD_____,
        LINT_TO_DT_____,
        USINT_TO_BOOL_____,
        USINT_TO_BYTE_____,
        USINT_TO_WORD_____,
        USINT_TO_DWORD_____,
        USINT_TO_LWORD_____,
        USINT_TO_SINT_____,
        USINT_TO_INT_____,
        USINT_TO_DINT_____,
        USINT_TO_LINT_____,
        USINT_TO_USINT_____,
        USINT_TO_UINT_____,
        USINT_TO_UDINT_____,
        USINT_TO_ULINT_____,
        USINT_TO_REAL_____,
        USINT_TO_LREAL_____,
        USINT_TO_TIME_____,
        USINT_TO_DATE_____,
        USINT_TO_TOD_____,
        USINT_TO_DT_____,
        UINT_TO_BOOL_____,
        UINT_TO_BYTE_____,
        UINT_TO_WORD_____,
        UINT_TO_DWORD_____,
        UINT_TO_LWORD_____,
        UINT_TO_SINT_____,
        UINT_TO_INT_____,
        UINT_TO_DINT_____,
        UINT_TO_LINT_____,
        UINT_TO_USINT_____,
        UINT_TO_UINT_____,
        UINT_TO_UDINT_____,
        UINT_TO_ULINT_____,
        UINT_TO_REAL_____,
        UINT_TO_LREAL_____,
        UINT_TO_TIME_____,
        UINT_TO_DATE_____,
        UINT_TO_TOD_____,
        UINT_TO_DT_____,
        UDINT_TO_BOOL_____,
        UDINT_TO_BYTE_____,
        UDINT_TO_WORD_____,
        UDINT_TO_DWORD_____,
        UDINT_TO_LWORD_____,
        UDINT_TO_SINT_____,
        UDINT_TO_INT_____,
        UDINT_TO_DINT_____,
        UDINT_TO_LINT_____,
        UDINT_TO_USINT_____,
        UDINT_TO_UINT_____,
        UDINT_TO_UDINT_____,
        UDINT_TO_ULINT_____,
        UDINT_TO_REAL_____,
        UDINT_TO_LREAL_____,
        UDINT_TO_TIME_____,
        UDINT_TO_DATE_____,
        UDINT_TO_TOD_____,
        UDINT_TO_DT_____,
        ULINT_TO_BOOL_____,
        ULINT_TO_BYTE_____,
        ULINT_TO_WORD_____,
        ULINT_TO_DWORD_____,
        ULINT_TO_LWORD_____,
        ULINT_TO_SINT_____,
        ULINT_TO_INT_____,
        ULINT_TO_DINT_____,
        ULINT_TO_LINT_____,
        ULINT_TO_USINT_____,
        ULINT_TO_UINT_____,
        ULINT_TO_UDINT_____,
        ULINT_TO_ULINT_____,
        ULINT_TO_REAL_____,
        ULINT_TO_LREAL_____,
        ULINT_TO_TIME_____,
        ULINT_TO_DATE_____,
        ULINT_TO_TOD_____,
        ULINT_TO_DT_____,
        REAL_TO_BOOL_____,
        REAL_TO_BYTE_____,
        REAL_TO_WORD_____,
        REAL_TO_DWORD_____,
        REAL_TO_LWORD_____,
        REAL_TO_SINT_____,
        REAL_TO_INT_____,
        REAL_TO_DINT_____,
        REAL_TO_LINT_____,
        REAL_TO_USINT_____,
        REAL_TO_UINT_____,
        REAL_TO_UDINT_____,
        REAL_TO_ULINT_____,
        REAL_TO_REAL_____,
        REAL_TO_LREAL_____,
        REAL_TO_TIME_____,
        REAL_TO_DATE_____,
        REAL_TO_TOD_____,
        REAL_TO_DT_____,
        LREAL_TO_BOOL_____,
        LREAL_TO_BYTE_____,
        LREAL_TO_WORD_____,
        LREAL_TO_DWORD_____,
        LREAL_TO_LWORD_____,
        LREAL_TO_SINT_____,
        LREAL_TO_INT_____,
        LREAL_TO_DINT_____,
        LREAL_TO_LINT_____,
        LREAL_TO_USINT_____,
        LREAL_TO_UINT_____,
        LREAL_TO_UDINT_____,
        LREAL_TO_ULINT_____,
        LREAL_TO_REAL_____,
        LREAL_TO_LREAL_____,
        LREAL_TO_TIME_____,
        LREAL_TO_DATE_____,
        LREAL_TO_TOD_____,
        LREAL_TO_DT_____,
        TIME_TO_BOOL_____,
        TIME_TO_BYTE_____,
        TIME_TO_WORD_____,
        TIME_TO_DWORD_____,
        TIME_TO_LWORD_____,
        TIME_TO_SINT_____,
        TIME_TO_INT_____,
        TIME_TO_DINT_____,
        TIME_TO_LINT_____,
        TIME_TO_USINT_____,
        TIME_TO_UINT_____,
        TIME_TO_UDINT_____,
        TIME_TO_ULINT_____,
        TIME_TO_REAL_____,
        TIME_TO_LREAL_____,
        TIME_TO_TIME_____,
        DATE_TO_BOOL_____,
        DATE_TO_BYTE_____,
        DATE_TO_WORD_____,
        DATE_TO_DWORD_____,
        DATE_TO_LWORD_____,
        DATE_TO_SINT_____,
        DATE_TO_INT_____,
        DATE_TO_DINT_____,
        DATE_TO_LINT_____,
        DATE_TO_USINT_____,
        DATE_TO_UINT_____,
        DATE_TO_UDINT_____,
        DATE_TO_ULINT_____,
        DATE_TO_REAL_____,
        DATE_TO_LREAL_____,
        DATE_TO_DATE_____,
        DATE_TO_DT_____,
        TOD_TO_BOOL_____,
        TOD_TO_BYTE_____,
        TOD_TO_WORD_____,
        TOD_TO_DWORD_____,
        TOD_TO_LWORD_____,
        TOD_TO_SINT_____,
        TOD_TO_INT_____,
        TOD_TO_DINT_____,
        TOD_TO_LINT_____,
        TOD_TO_USINT_____,
        TOD_TO_UINT_____,
        TOD_TO_UDINT_____,
        TOD_TO_ULINT_____,
        TOD_TO_REAL_____,
        TOD_TO_LREAL_____,
        TOD_TO_TOD_____,
        TOD_TO_DT_____,
        DT_TO_BOOL_____,
        DT_TO_BYTE_____,
        DT_TO_WORD_____,
        DT_TO_DWORD_____,
        DT_TO_LWORD_____,
        DT_TO_SINT_____,
        DT_TO_INT_____,
        DT_TO_DINT_____,
        DT_TO_LINT_____,
        DT_TO_USINT_____,
        DT_TO_UINT_____,
        DT_TO_UDINT_____,
        DT_TO_ULINT_____,
        DT_TO_REAL_____,
        DT_TO_LREAL_____,
        DT_TO_DT_____,
        END_TO_OPCODE_,


        TIME_MAX_TIME_TIME____,
        DATE_MAX_DATE_DATE____,
        DT_MAX_DT_DT____,
        TOD_MAX_TOD_TOD____,


        TIME_MIN_TIME_TIME____,
        DATE_MIN_DATE_DATE____,
        DT_MIN_DT_DT____,
        TOD_MIN_TOD_TOD____,


        H_M_S_MI_SYSTIME_A__,
        Y_M_D_DW_SYSDATE_A__,


        UDINT_RGB_DINT_DINT_DINT___,
        _RETURN_VALUE_______,
        _RETURN_STRING_______,
        CALLFB_________,
        CALLF_________,
        FORMATED_STRING_REAL_UINT__,
        DINT_GETYEAR_DINT,
        DINT_GETMONTH_DINT,
        DINT_GETDAY_DINT,
        DINT_GETHOUR_DINT,
        DINT_GETMINUTE_DINT,
        DINT_GETSECOND_DINT,
        DINT_GETMILLSECOND_DINT,
        BOOLS_TO_BYTE____,//HOMAY-2/8/2014

    }


    public struct OPERATOR
    {
       public int ReturnType;
       public OPCODES OpCode;
       public byte NoOfArg;
       public byte Res1;
       public byte Res2;
       public byte Res3;
       //public void Reorder(OPERATOR oper)
       // {
       //     oper.ReturnType = (int)Enum.ToObject(typeof(int), Common.__bswap_32((uint)ReturnType));
       //    // Enum.ToObject(typeof(VarType), Common.__bswap_32((uint)Type));
       //     oper.OpCode = (OPCODES)Enum.ToObject(typeof(OPCODES), Common.__bswap_32((uint)OpCode));
       //     oper.NoOfArg = NoOfArg;
       //     oper.Res1 = Res1;
       //     oper.Res2 = Res2;
       //     oper.Res3 = Res3;
       // }

    }

    public enum PROGRAM_LANGUAGE //: unsigned char
    {
        ENUM_PROGRAM_LANGUAGE_UNKNOWN = 0,
        ENUM_PROGRAM_LANGUAGE_IL,
        ENUM_PROGRAM_LANGUAGE_FBD,
        ENUM_PROGRAM_LANGUAGE_LD,
        ENUM_PROGRAM_LANGUAGE_ST,
        ENUM_PROGRAM_LANGUAGE_SFC,
        ENUM_PROGRAM_LANGUAGE_C

    }

    public enum PROGRAM_CYCLETIME_GROUP //: unsigned char
    {
        VERYSLOW = 1,
        SLOW,
        MEDIUM ,
        FAST,
        VERYFAST ,


    }
    public enum POUTYPE //: unsigned char
    {
        PROGRAM = 0,
        FUNCTION,
        FUNCTIONBLOCK,
        HMIEXPRESSION,
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct ApplicationCode
    {
        public uint TagetVersion;		//0
        public int ApplicationVersion;				//1
        public int BufferSize;						//2
        public int NoOfConstants;					//3
        public int NoOfStrings;					//4
        public int NoOfInternalsConstant;			//5
        public int NoOfInternalsString;			//6
        public int NoOfPrograms;					//7
        public int NoOfUserDefinedFunctions;		//8
        public int NoOfUserDefinedFunctionBlocks;	//9
        public int UserDef10;						//10
        public int UserDef11;						//11
        public int UserDef12;						//12
        public int UserDef13;						//13
        public int UserDef14;						//14
        public int UserDef15;						//15
        public void Reorder(out ApplicationCode appcode)
        {
            appcode.TagetVersion = Common.__bswap_32(TagetVersion);
            appcode.ApplicationVersion = (int)Common.__bswap_32((uint)ApplicationVersion);
            appcode.BufferSize = (int)Common.__bswap_32((uint)BufferSize);
            appcode.NoOfConstants = (int)Common.__bswap_32((uint)NoOfConstants);
            appcode.NoOfStrings = (int)Common.__bswap_32((uint)NoOfStrings);
            appcode.NoOfInternalsConstant = (int)Common.__bswap_32((uint)NoOfInternalsConstant);
            appcode.NoOfInternalsString = (int)Common.__bswap_32((uint)NoOfInternalsString);
            appcode.NoOfPrograms = (int)Common.__bswap_32((uint)NoOfPrograms);
            appcode.NoOfUserDefinedFunctions = (int)Common.__bswap_32((uint)NoOfUserDefinedFunctions);
            appcode.NoOfUserDefinedFunctionBlocks = (int)Common.__bswap_32((uint)NoOfUserDefinedFunctionBlocks);
            appcode.UserDef10 = (int)Common.__bswap_32((uint)UserDef10);
            appcode.UserDef11 = (int)Common.__bswap_32((uint)UserDef11);
            appcode.UserDef12 = (int)Common.__bswap_32((uint)UserDef12);
            appcode.UserDef13 = (int)Common.__bswap_32((uint)UserDef13);
            appcode.UserDef14 = (int)Common.__bswap_32((uint)UserDef14);
            appcode.UserDef15 = (int)Common.__bswap_32((uint)UserDef15);
        }

        
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct LogicProgram
    {
        
        public uint Signeture;
        //public byte[] Name;
        public int Index;
        public int Size;
        public VarType Type;
        public POUTYPE ProgramType;	// Function,Function Block,Program , OWS expression
        public PROGRAM_LANGUAGE ProgramLanguage;	// SFC , FBD , ST , IL , LD
        public int CycleTimeGroup;
        
        public void Reorder(LogicProgram logicprg)
        {
            logicprg.Signeture = Common.__bswap_32(Signeture);
            logicprg.Index = (int)Common.__bswap_32((uint)Index);
            logicprg.Size = (int)Common.__bswap_32((uint)Size);
            logicprg.Type = (VarType)Enum.ToObject(typeof(VarType), Common.__bswap_32((uint)Type));
            logicprg.ProgramType = (POUTYPE)Enum.ToObject(typeof(POUTYPE), Common.__bswap_32((uint)ProgramType));
            logicprg.ProgramLanguage = (PROGRAM_LANGUAGE)Enum.ToObject(typeof(PROGRAM_LANGUAGE), Common.__bswap_32((uint)ProgramLanguage));
            logicprg.CycleTimeGroup = (int)Common.__bswap_32((uint)CycleTimeGroup);
        }

        
    }

   




    public class LCUPINDEF
    {
        //fixed int arrayInt[100]; // works properly 
        //byte Name[Common.MAX_STRING_SIZE];
        //fixed byte InitVal[Common.MAX_STRING_SIZE];
        public byte[] Name = new byte[Common.MAX_STRING_SIZE];
        public byte[] InitVal = new byte[Common.MAX_STRING_SIZE];
        public VarType _type;
        public VarClass _class;
        public VarOption _option;
        public char _pinno;
        public char _res1;
        public char _res2;
        public char _res3;
    }

    public class LCUFBDEF
    {
        public byte[] Name = new byte[Common.MAX_STRING_SIZE];

        public VarType _type;
        public LCUPINDEF _pins = new LCUPINDEF();
        public char _noofPins;
        public char _res2;
        public char _res3;
        public char _res4;

    }

   
   public enum STATIC_OBJ_TYPE : short
   {
       ID_BITMAP = 0,
       ID_ELLIPS = 1,
       ID_CHORD = 2,
       ID_PIE = 3,
       ID_POLYGON = 4,
       ID_POLYLINE = 5,
       ID_RECT = 6,
       ID_LINE = 7,
       ID_ARC = 8,
       ID_TEXT = 9,
       ID_BARGRAPH = 10,
       ID_ROUNDRECT = 11,
       ID_ANATEXT = 12,
       ID_EDITBOX = 13,
       ID_CURVE = 14,
       ID_BUTTON = 15,
       ID_DIGTEXT = 16,
   }

   public enum FillTypePatern
   {
       [Description("Transparent")]
       Transparent,
       [Description("Filled")]
       Solid,
       [Description("Filled Hatch")]
       Hatched,
       [Description("Gradient Fill")]
       Gradient
   }

   public enum TextFormat
   {
       [Description("xxx")]
       Zero,
       [Description("xxx.x")]
       One,
       [Description("xxx.xx")]
       Two,
       [Description("xxx.xxx")]
       three,
       [Description("xxx.xxxx")]
       Four,
       [Description("xxx.xxxxx")]
       Five,
       [Description("xxx.xxxxxx")]
       Six,
       [Description("xxx.xxxxxxx")]
       Seven,
       [Description("hh:mm:ss")]
       Hour,
       [Description("dd-mm-yy")]
       Date
   }

   public enum TextOrientation
   {
       [Description("0")]
       D0 = 0,
       [Description("90")]
       D90 = 90,
       [Description("180")]
       D180 = 180,
       [Description("270")]
       D270 = 270
   }

   public enum TextAlignment
   {
       [Description("Left Top")]
       LeftTop,
       [Description("Left Center")]
       LeftCenter,
       [Description("Left Bottom")]
       LeftBottom,
       [Description("Center Top")]
       CenterTop,
       [Description("Center Center")]
       CenterCenter,
       [Description("Center Bottom")]
       CenterBottom,
       [Description("Right Top")]
       RightTop,
       [Description("Right Center")]
       RightCenter,
       [Description("Right Bottom")]
       RightBottom,
   }

   //public enum Token_Type //: char
   //{
   //    Token_Unknown = 1,
   //    Token_Function,
   //    Token_Number,
   //    Token_Operator,
   //    Token_Variable,
   //    Token_Constant,
   //    //Token_Value,
   //    Token_String,
   //    Token_TempValue,
   //    Token_Comma,
   //    Token_LeftParenthisis,
   //    Token_RightParenthisis,
   //    Token_TempString,
   //    Token_FBInstance,
   //    Token_Semicolumn,
   //    Token_UserDefinedFunction,


   //}

   public enum Targets
   {
       Intel, V095, A15x
   }

   public enum PrinterType
   {
       None, Columns_80, Columns_120
   }

   public enum _REPORTFUNCTION : int
   {
       Count = 0,
       Average,
       Intgral,
       Min,
       Max,
       OnTime,
       OffTime,
       GetDate,
       GetRowNumber

   }
   public enum _reportLanguage : int
   {
       _LATIN = 0,
       _PERSIAN
   }

   public enum _PageOrientation
   {
       Portrait,
       Landscape
   }

   public enum _ReportPageSize
   {
       A4,
       A3
   }



   public enum _PROJECT_IMAGELIST : int
   {
       __UNKNOWN = 0,
       __AREA,
       __BLOCK,
       __CONTROLLER,
       __DISPLAY,
       __DOMAIN,
       __IOCARD,
       __IORACK,
       __PCIOCARD,
       __PROGRAM,
       __SOLUTION,
       __PROJECTCONTROL,
       __UNIT,
       __USERGROUP,
       __USER,
       __REPORT,
       __FOLDER,

   }

   public enum _PROGRAM_IMAGELIST : int
   {
       UNKNOWN = 0,
       IL,
       FBD,
       LD,
       ST,
       SFC,
       C

   }

   public enum TREE_NODE_TYPE : int
   {
       ROOT = 0,
       PROJECT,
       DOMAIN,
       CONTROLLER,
       IORACK,
       IOBOARD,
       PROGRAM,
       PROGRAMS,
       REPORT,
       DISPALYGROUP,
       DISPLAY,
       BLOCKGROUP,
       BLOCK,
       USERGROUP,
       USER,
       DATATYPES,
       FUNCTIONS,
       FUNCTIONBLOCKS,
       DATATYPE,
       FUNCTION,
       FUNCTIONBLOCK,
       RESOURCES,
       RESOURCE,
       ST,
       FBD,
       SFC
   }


   public enum _CONTROLLER_TYPE : int
   {
       CPU_TYPE_A15 = 0x0001,
       CPU_TYPE_V095 = 0x0002,
       CPU_TYPE_Intel = 0x0004,
       CPU_TYPE_EPPC405 = 0x0008,
   }

   public enum ValueType
   {
       Digital = 1,
       Analog,
       Color,
       String,
       Point,
       BilinkingType,
       None
   }

   public enum PouLanguageType : int
   {
       Unknown = 0,
       IL,
       FBD,
       LD,
       ST,
       SFC,
       C
   }


   public enum DrawAreaType
   {
       DISPLAY = 0,	//Process Display Page
       BLOCK,	        //Block for Process Display
       FBD,	        //Function Block Language page
       ST,	            //Structured Text Language page
       SFC,	        //Sequential Function Chart Language page
       IL,	            //IL Language page
       LD,	        //LD Chart Language page
       REPORT	        //Report Page
   }
   public enum BOARDTYPES : int
   {
       UNKNOWN = 0,
       TYPE_DI,
       TYPE_DO,
       TYPE_DIO,
       TYPE_AI,
       TYPE_AO,
       TYPE_AIO,
       TYPE_TEMP,
   }

   public enum CHANNELTYPES : int
   {
       UNKNOWN = 0,
       TYPE_DI,
       TYPE_DO,
       TYPE_AI,
       TYPE_AO,
       TYPE_TEMP,
   }

   //public enum VarOption : int
   //{
   //    NonRetain = 0,	//Non Retain Variable
   //    Retain,	    //Retain Variable
   //}

   public enum ProcessDisplaytreeElementType : int
   {
       Domain = 0,
       Display,
       Folder,
   }

   public class NameID
   {
       public string Name { get; private set; }
       public int ID { get; private set; }
       public NameID(string name, int value)
       {
           Name = name;
           ID = value;
       }
   }
}
