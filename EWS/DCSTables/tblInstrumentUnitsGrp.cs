//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;


namespace DCS.DCSTables
{


    public partial class tblInstrumentUnitsGrp : SQLiteTable
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblInstrumentUnitsGrp.</remarks>
		internal static string SQL_Insert = "INSERT INTO [tblInstrumentUnitsGrp] ([SolutionID], [GroupName]) VALUES(@SolutionI" +
			"D, @GroupName) ; select last_insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblInstrumentUnitsGrp, with the WHERE clause.</remarks>
		internal static string SQL_Update = "UPDATE [tblInstrumentUnitsGrp] SET [SolutionID] = @SolutionID, [GroupName] = @Gro" +
			"upName WHERE [ID]=@ID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblInstrumentUnitsGrp, with the WHERE clause.</remarks>
		internal static string SQL_Select = "SELECT [SolutionID], [GroupName] FROM [tblInstrumentUnitsGrp] WHERE [ID]=@ID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblInstrumentUnitsGrp, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblInstrumentUnitsGrp] WHERE [ID]=@ID ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _ID = -1;
		
		[DisplayName("ID")]
		[Category("Primary Key")]
		public long ID
		{
			get
			{
				return _ID;
			}
			set
			{
				_ID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _SolutionID = -1;
		
		[DisplayName("Solution ID")]
		[Category("Foreign Key")]
		public long SolutionID
		{
			get
			{
				return _SolutionID;
			}
			set
			{
				_SolutionID = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _GroupName = "";
		
		[DisplayName("Group Name")]
		[Category("Column")]
		public string GroupName
		{
			get
			{
				return _GroupName;
			}
			set
			{
				_GroupName = value;
			}
		}
		#endregion
		
		#region Related Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblSolution _SolutionID_tblSolution;
		
		[Description("Represents the foreign key object of the type SolutionID")]
		public tblSolution m_SolutionID_tblSolution
		{
			get
			{
				return _SolutionID_tblSolution;
			}
			set
			{
				_SolutionID_tblSolution = value;
			}
		}
		#endregion
		
		#region Collection Objects
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblInstrumentUnitsCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblInstrumentUnitsCollection _tblInstrumentUnitsCollection;
		
		[Description("Represents the foreign key object of the type GroupID")]
		public tblInstrumentUnitsCollection m_tblInstrumentUnitsCollection
		{
			get
			{
              lock(_tblInstrumentUnitsCollectionLock)
              {
				if (_tblInstrumentUnitsCollection == null)
				{
					_tblInstrumentUnitsCollection =  new tblInstrumentUnitsCollection(this);
					_tblInstrumentUnitsCollection.Load();
				}
				return _tblInstrumentUnitsCollection;
              }
			}
			set
			{
				_tblInstrumentUnitsCollection = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblInstrumentUnitsGrp.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblInstrumentUnitsGrp.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblInstrumentUnitsGrp.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				ID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblInstrumentUnitsGrp.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public tblInstrumentUnitsGrp()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@ID", ID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@SolutionID", SolutionID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@GroupName", GroupName, DbType.String));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		public void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the ID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ID")) == false))
				{
					ID = ((long)(Convert.ChangeType(rs["ID"], typeof(long))));
				}
				// if value from the recordset, to the SolutionID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("SolutionID")) == false))
				{
					SolutionID = ((long)(Convert.ChangeType(rs["SolutionID"], typeof(long))));
				}
				// if value from the recordset, to the GroupName _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("GroupName")) == false))
				{
					GroupName = ((string)(Convert.ChangeType(rs["GroupName"], typeof(string))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		
		public override void AddFromString(string[] _strs, string arg1, ref string _log)
		{
			try
			{
				this.PreAddFromString(ref _log);
				int i;
				i = this.ColumnExistInHeader("SolutionID");
				if ((i >= 0))
				{
					SolutionID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("GroupName");
				if ((i >= 0))
				{
					GroupName = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				this.PostAddFromString(ref _log);
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblInstrumentUnitsGrpChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblInstrumentUnitsGrpCollection : SQLiteTableCollection
	{
		
		/// <remarks>SQL Type:tblInstrumentUnitsGrpChangedEventHandler</remarks>
		public event tblInstrumentUnitsGrpChangedEventHandler tblInstrumentUnitsGrpChanged;
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblSolution _SolutionID_tblSolution;
		
		[Description("Represents the foreign key object of the type SolutionID")]
		public tblSolution m_SolutionID_tblSolution
		{
			get
			{
				return _SolutionID_tblSolution;
			}
			set
			{
				_SolutionID_tblSolution = value;
			}
		}
		
		[Description("Constructor")]
		public tblInstrumentUnitsGrpCollection(tblSolution _parent)
		{
			_SolutionID_tblSolution = _parent;
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblInstrumentUnitsGrpChanged(System.EventArgs e)
		{
			if (tblInstrumentUnitsGrpChanged != null)
			{
				this.tblInstrumentUnitsGrpChanged(this, e);
			}
		}
		
		[Description("Gets a  tblInstrumentUnitsGrp from the collection.")]
		public tblInstrumentUnitsGrp this[int index]
		{
			get
			{
				return ((tblInstrumentUnitsGrp)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblInstrumentUnitsGrpChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblInstrumentUnitsGrp from the collection.")]
		public tblInstrumentUnitsGrp Get(int index)
		{
			return ((tblInstrumentUnitsGrp)(List[index]));
		}
		
		[Description("Adds a new tblInstrumentUnitsGrp to the collection.")]
		public void Add(tblInstrumentUnitsGrp item)
		{
			List.Add(item);
			this.OntblInstrumentUnitsGrpChanged(EventArgs.Empty);
		}
		
		[Description("Removes a tblInstrumentUnitsGrp from the collection.")]
		public void Remove(tblInstrumentUnitsGrp item)
		{
			List.Remove(item);
			this.OntblInstrumentUnitsGrpChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblInstrumentUnitsGrp into the collection at the specified index.")]
		public void Insert(int index, tblInstrumentUnitsGrp item)
		{
			List.Insert(index, item);
			this.OntblInstrumentUnitsGrpChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblInstrumentUnitsGrp class in the collection.")]
		public int IndexOf(tblInstrumentUnitsGrp item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblInstrumentUnitsGrp class is present in the collection.")]
		public bool Contains(tblInstrumentUnitsGrp item)
		{
			return List.Contains(item);
		}
	}
}
