//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;
using System.Drawing;


namespace DCS.DCSTables
{


    public partial class tblSymbols : SQLiteTable
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblSymbols.</remarks>
		internal static string SQL_Insert = @"INSERT INTO [tblSymbols] ([SymbolName], [SolutionID], [IsSymbol], [ParentSymbol], [Description], [Width], [Height], [BackColor], [FullPath]) VALUES(@SymbolName, @SolutionID, @IsSymbol, @ParentSymbol, @Description, @Width, @Height, @BackColor, @FullPath) ; select last_insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblSymbols, with the WHERE clause.</remarks>
		internal static string SQL_Update = @"UPDATE [tblSymbols] SET [SymbolName] = @SymbolName, [SolutionID] = @SolutionID, [IsSymbol] = @IsSymbol, [ParentSymbol] = @ParentSymbol, [Description] = @Description, [Width] = @Width, [Height] = @Height, [BackColor] = @BackColor, [FullPath] = @FullPath WHERE [SymbolID]=@SymbolID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblSymbols, with the WHERE clause.</remarks>
		internal static string SQL_Select = "SELECT [SymbolName], [SolutionID], [IsSymbol], [ParentSymbol], [Description], [Wi" +
			"dth], [Height], [BackColor], [FullPath] FROM [tblSymbols] WHERE [SymbolID]=@Symb" +
			"olID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblSymbols, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblSymbols] WHERE [SymbolID]=@SymbolID ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _SymbolID = -1;
		
		[DisplayName("Symbol ID")]
		[Category("Primary Key")]
		public long SymbolID
		{
			get
			{
				return _SymbolID;
			}
			set
			{
				_SymbolID = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _SymbolName = "";
		
		[DisplayName("Symbol Name")]
		[Category("Column")]
		public string SymbolName
		{
			get
			{
				return _SymbolName;
			}
			set
			{
				_SymbolName = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _SolutionID = -1;
		
		[DisplayName("Solution ID")]
		[Category("Foreign Key")]
		public long SolutionID
		{
			get
			{
				return _SolutionID;
			}
			set
			{
				_SolutionID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _IsSymbol;
		
		[DisplayName("Is Symbol")]
		[Category("Column")]
		public bool IsSymbol
		{
			get
			{
				return _IsSymbol;
			}
			set
			{
				_IsSymbol = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _ParentSymbol;
		
		[DisplayName("Parent Symbol")]
		[Category("Column")]
		public int ParentSymbol
		{
			get
			{
				return _ParentSymbol;
			}
			set
			{
				_ParentSymbol = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Description = "";
		
		[DisplayName("Description")]
		[Category("Column")]
		public string Description
		{
			get
			{
				return _Description;
			}
			set
			{
				_Description = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Width;
		
		[DisplayName("Width")]
		[Category("Column")]
		public int Width
		{
			get
			{
				return _Width;
			}
			set
			{
				_Width = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Height;
		
		[DisplayName("Height")]
		[Category("Column")]
		public int Height
		{
			get
			{
				return _Height;
			}
			set
			{
				_Height = value;
			}
		}
		
		/// <remarks>SQL Type:System.Drawing.Color</remarks>
		private System.Drawing.Color _BackColor;
		
		[DisplayName("Back Color")]
		[Category("Column")]
		public System.Drawing.Color BackColor
		{
			get
			{
				return _BackColor;
			}
			set
			{
				_BackColor = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _FullPath = "";
		
		[DisplayName("Full Path")]
		[Category("Column")]
		public string FullPath
		{
			get
			{
				return _FullPath;
			}
			set
			{
				_FullPath = value;
			}
		}
		#endregion
		
		#region Related Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblSolution _SolutionID_tblSolution;
		
		[Description("Represents the foreign key object of the type SolutionID")]
		public tblSolution m_SolutionID_tblSolution
		{
			get
			{
				return _SolutionID_tblSolution;
			}
			set
			{
				_SolutionID_tblSolution = value;
			}
		}
		#endregion
		
		#region Collection Objects
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblSymbolStatusCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblSymbolStatusCollection _tblSymbolStatusCollection;
		
		[Description("Represents the foreign key object of the type SymbolID")]
		public tblSymbolStatusCollection m_tblSymbolStatusCollection
		{
			get
			{
              lock(_tblSymbolStatusCollectionLock)
              {
				if (_tblSymbolStatusCollection == null)
				{
					_tblSymbolStatusCollection =  new tblSymbolStatusCollection(this);
					_tblSymbolStatusCollection.Load();
				}
				return _tblSymbolStatusCollection;
              }
			}
			set
			{
				_tblSymbolStatusCollection = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblSymbols.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblSymbols.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblSymbols.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				SymbolID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblSymbols.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public tblSymbols()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@SymbolID", SymbolID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@SymbolName", SymbolName, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@SolutionID", SolutionID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@IsSymbol", IsSymbol, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@ParentSymbol", ParentSymbol, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Description", Description, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Width", Width, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Height", Height, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@BackColor", BackColor.ToArgb(), DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@FullPath", FullPath, DbType.String));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		public void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the SymbolID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("SymbolID")) == false))
				{
					SymbolID = ((long)(Convert.ChangeType(rs["SymbolID"], typeof(long))));
				}
				// if value from the recordset, to the SymbolName _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("SymbolName")) == false))
				{
					SymbolName = ((string)(Convert.ChangeType(rs["SymbolName"], typeof(string))));
				}
				// if value from the recordset, to the SolutionID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("SolutionID")) == false))
				{
					SolutionID = ((long)(Convert.ChangeType(rs["SolutionID"], typeof(long))));
				}
				// if value from the recordset, to the IsSymbol _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("IsSymbol")) == false))
				{
					IsSymbol = ((bool)(Convert.ChangeType(rs["IsSymbol"], typeof(bool))));
				}
				// if value from the recordset, to the ParentSymbol _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ParentSymbol")) == false))
				{
					ParentSymbol = ((int)(Convert.ChangeType(rs["ParentSymbol"], typeof(int))));
				}
				// if value from the recordset, to the Description _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Description")) == false))
				{
					Description = ((string)(Convert.ChangeType(rs["Description"], typeof(string))));
				}
				// if value from the recordset, to the Width _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Width")) == false))
				{
					Width = ((int)(Convert.ChangeType(rs["Width"], typeof(int))));
				}
				// if value from the recordset, to the Height _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Height")) == false))
				{
					Height = ((int)(Convert.ChangeType(rs["Height"], typeof(int))));
				}
				// if value from the recordset, to the BackColor _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("BackColor")) == false))
				{
					BackColor = Color.FromArgb(((int)(Convert.ChangeType(rs["BackColor"], typeof(int)))));
				}
				// if value from the recordset, to the FullPath _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("FullPath")) == false))
				{
					FullPath = ((string)(Convert.ChangeType(rs["FullPath"], typeof(string))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		
		public override void AddFromString(string[] _strs, string arg1, ref string _log)
		{
			try
			{
				this.PreAddFromString(ref _log);
				int i;
				i = this.ColumnExistInHeader("SymbolName");
				if ((i >= 0))
				{
					SymbolName = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("SolutionID");
				if ((i >= 0))
				{
					SolutionID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("IsSymbol");
				if ((i >= 0))
				{
					IsSymbol = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("ParentSymbol");
				if ((i >= 0))
				{
					ParentSymbol = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Description");
				if ((i >= 0))
				{
					Description = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Width");
				if ((i >= 0))
				{
					Width = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Height");
				if ((i >= 0))
				{
					Height = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("BackColor");
				if ((i >= 0))
				{
					BackColor = Color.FromArgb(((int)(Convert.ChangeType(_strs[i], typeof(int)))));
				}
				i = this.ColumnExistInHeader("FullPath");
				if ((i >= 0))
				{
					FullPath = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				this.PostAddFromString(ref _log);
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblSymbolsChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblSymbolsCollection : SQLiteTableCollection
	{
		
		/// <remarks>SQL Type:tblSymbolsChangedEventHandler</remarks>
		public event tblSymbolsChangedEventHandler tblSymbolsChanged;
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblSolution _SolutionID_tblSolution;
		
		[Description("Represents the foreign key object of the type SolutionID")]
		public tblSolution m_SolutionID_tblSolution
		{
			get
			{
				return _SolutionID_tblSolution;
			}
			set
			{
				_SolutionID_tblSolution = value;
			}
		}
		
		[Description("Constructor")]
		public tblSymbolsCollection(tblSolution _parent)
		{
			_SolutionID_tblSolution = _parent;
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblSymbolsChanged(System.EventArgs e)
		{
			if (tblSymbolsChanged != null)
			{
				this.tblSymbolsChanged(this, e);
			}
		}
		
		[Description("Gets a  tblSymbols from the collection.")]
		public tblSymbols this[int index]
		{
			get
			{
				return ((tblSymbols)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblSymbolsChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblSymbols from the collection.")]
		public tblSymbols Get(int index)
		{
			return ((tblSymbols)(List[index]));
		}
		
		[Description("Adds a new tblSymbols to the collection.")]
		public void Add(tblSymbols item)
		{
			List.Add(item);
			this.OntblSymbolsChanged(EventArgs.Empty);
		}
		
		[Description("Removes a tblSymbols from the collection.")]
		public void Remove(tblSymbols item)
		{
			List.Remove(item);
			this.OntblSymbolsChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblSymbols into the collection at the specified index.")]
		public void Insert(int index, tblSymbols item)
		{
			List.Insert(index, item);
			this.OntblSymbolsChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblSymbols class in the collection.")]
		public int IndexOf(tblSymbols item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblSymbols class is present in the collection.")]
		public bool Contains(tblSymbols item)
		{
			return List.Contains(item);
		}
	}
}
