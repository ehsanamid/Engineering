//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;
using System.Data.SqlClient;
using System.Drawing;
using System.Text;
using System.Windows.Forms;


namespace EWS.DCSTables
{
	
	
	public partial class tblPointsPolyline : Object
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblPointsPolyline.</remarks>
		internal static string SQL_Insert = "INSERT INTO [tblPointsPolyline] ([PolylineID], [oIndex], [PtX], [PtY]) VALUES(@Po" +
			"lylineID, @oIndex, @PtX, @PtY) ; select last_insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblPointsPolyline, with the WHERE clause.</remarks>
		internal static string SQL_Update = "UPDATE [tblPointsPolyline] SET [PolylineID] = @PolylineID, [oIndex] = @oIndex, [P" +
			"tX] = @PtX, [PtY] = @PtY WHERE [PointsPolylineID]=@PointsPolylineID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblPointsPolyline, with the WHERE clause.</remarks>
		internal static string SQL_Select = "SELECT [PolylineID], [oIndex], [PtX], [PtY] FROM [tblPointsPolyline] WHERE [Point" +
			"sPolylineID]=@PointsPolylineID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblPointsPolyline, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblPointsPolyline] WHERE [PointsPolylineID]=@PointsPolylineID ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _PointsPolylineID = -1;
		
		[DisplayName("Points Polyline ID")]
		[Category("Primary Key")]
		public long PointsPolylineID
		{
			get
			{
				return _PointsPolylineID;
			}
			set
			{
				_PointsPolylineID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _PolylineID = -1;
		
		[DisplayName("Polyline ID")]
		[Category("Foreign Key")]
		public long PolylineID
		{
			get
			{
				return _PolylineID;
			}
			set
			{
				_PolylineID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _oIndex;
		
		[DisplayName("o Index")]
		[Category("Column")]
		public int oIndex
		{
			get
			{
				return _oIndex;
			}
			set
			{
				_oIndex = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _PtX;
		
		[DisplayName("Pt X")]
		[Category("Column")]
		public int PtX
		{
			get
			{
				return _PtX;
			}
			set
			{
				_PtX = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _PtY;
		
		[DisplayName("Pt Y")]
		[Category("Column")]
		public int PtY
		{
			get
			{
				return _PtY;
			}
			set
			{
				_PtY = value;
			}
		}
		#endregion
		
		#region Related Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblPolyline _ID_tblPolyline;
		
		[Description("Represents the foreign key object of the type ID")]
		public tblPolyline m_ID_tblPolyline
		{
			get
			{
				return _ID_tblPolyline;
			}
			set
			{
				_ID_tblPolyline = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblPointsPolyline.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblPointsPolyline.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblPointsPolyline.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				PointsPolylineID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblPointsPolyline.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public tblPointsPolyline()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@PointsPolylineID", PointsPolylineID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@PolylineID", PolylineID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@oIndex", oIndex, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@PtX", PtX, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@PtY", PtY, DbType.Int32));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		public void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the PointsPolylineID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("PointsPolylineID")) == false))
				{
					PointsPolylineID = ((long)(Convert.ChangeType(rs["PointsPolylineID"], typeof(long))));
				}
				// if value from the recordset, to the PolylineID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("PolylineID")) == false))
				{
					PolylineID = ((long)(Convert.ChangeType(rs["PolylineID"], typeof(long))));
				}
				// if value from the recordset, to the oIndex _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("oIndex")) == false))
				{
					oIndex = ((int)(Convert.ChangeType(rs["oIndex"], typeof(int))));
				}
				// if value from the recordset, to the PtX _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("PtX")) == false))
				{
					PtX = ((int)(Convert.ChangeType(rs["PtX"], typeof(int))));
				}
				// if value from the recordset, to the PtY _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("PtY")) == false))
				{
					PtY = ((int)(Convert.ChangeType(rs["PtY"], typeof(int))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblPointsPolylineChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblPointsPolylineCollection : System.Collections.CollectionBase
	{
		
		/// <remarks>SQL Type:tblPointsPolylineChangedEventHandler</remarks>
		public event tblPointsPolylineChangedEventHandler tblPointsPolylineChanged;
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblPolyline _ID_tblPolyline;
		
		[Description("Represents the foreign key object of the type ID")]
		public tblPolyline m_ID_tblPolyline
		{
			get
			{
				return _ID_tblPolyline;
			}
			set
			{
				_ID_tblPolyline = value;
			}
		}
		
		[Description("Constructor")]
		public tblPointsPolylineCollection(tblPolyline _parent)
		{
			_ID_tblPolyline = _parent;
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblPointsPolylineChanged(System.EventArgs e)
		{
			if (tblPointsPolylineChanged != null)
			{
				this.tblPointsPolylineChanged(this, e);
			}
		}
		
		[Description("Gets a  tblPointsPolyline from the collection.")]
		public tblPointsPolyline this[int index]
		{
			get
			{
				return ((tblPointsPolyline)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblPointsPolylineChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblPointsPolyline from the collection.")]
		public tblPointsPolyline Get(int index)
		{
			return ((tblPointsPolyline)(List[index]));
		}
		
		[Description("Adds a new tblPointsPolyline to the collection.")]
		public void Add(tblPointsPolyline item)
		{
			List.Add(item);
			this.OntblPointsPolylineChanged(EventArgs.Empty);
		}
		
		[Description("Removes a tblPointsPolyline from the collection.")]
		public void Remove(tblPointsPolyline item)
		{
			List.Remove(item);
			this.OntblPointsPolylineChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblPointsPolyline into the collection at the specified index.")]
		public void Insert(int index, tblPointsPolyline item)
		{
			List.Insert(index, item);
			this.OntblPointsPolylineChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblPointsPolyline class in the collection.")]
		public int IndexOf(tblPointsPolyline item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblPointsPolyline class is present in the collection.")]
		public bool Contains(tblPointsPolyline item)
		{
			return List.Contains(item);
		}
	}
}
