//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;


namespace DCS.DCSTables
{


    public partial class tblModbusServerData : SQLiteTable
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblModbusServerData.</remarks>
		internal static string SQL_Insert = "INSERT INTO [tblModbusServerData] ([ModbusServerID], [StaNo], [ReadFC], [WriteFC]" +
			", [SlaveNo], [Checkback], [ChangeOnly]) VALUES(@ModbusServerID, @StaNo, @ReadFC," +
			" @WriteFC, @SlaveNo, @Checkback, @ChangeOnly) ; select last_insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblModbusServerData, with the WHERE clause.</remarks>
		internal static string SQL_Update = "UPDATE [tblModbusServerData] SET [ModbusServerID] = @ModbusServerID, [StaNo] = @S" +
			"taNo, [ReadFC] = @ReadFC, [WriteFC] = @WriteFC, [SlaveNo] = @SlaveNo, [Checkback" +
			"] = @Checkback, [ChangeOnly] = @ChangeOnly WHERE [ModbusServerDataID]=@ModbusSer" +
			"verDataID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblModbusServerData, with the WHERE clause.</remarks>
		internal static string SQL_Select = "SELECT [ModbusServerID], [StaNo], [ReadFC], [WriteFC], [SlaveNo], [Checkback], [C" +
			"hangeOnly] FROM [tblModbusServerData] WHERE [ModbusServerDataID]=@ModbusServerDa" +
			"taID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblModbusServerData, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblModbusServerData] WHERE [ModbusServerDataID]=@ModbusServerDataID " +
			"";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _ModbusServerDataID = -1;
		
		[DisplayName("Modbus Server Data ID")]
		[Category("Primary Key")]
		public long ModbusServerDataID
		{
			get
			{
				return _ModbusServerDataID;
			}
			set
			{
				_ModbusServerDataID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _ModbusServerID = -1;
		
		[DisplayName("Modbus Server ID")]
		[Category("Foreign Key")]
		public long ModbusServerID
		{
			get
			{
				return _ModbusServerID;
			}
			set
			{
				_ModbusServerID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _StaNo;
		
		[DisplayName("Sta No")]
		[Category("Column")]
		public short StaNo
		{
			get
			{
				return _StaNo;
			}
			set
			{
				_StaNo = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _ReadFC;
		
		[DisplayName("Read FC")]
		[Category("Column")]
		public short ReadFC
		{
			get
			{
				return _ReadFC;
			}
			set
			{
				_ReadFC = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _WriteFC;
		
		[DisplayName("Write FC")]
		[Category("Column")]
		public short WriteFC
		{
			get
			{
				return _WriteFC;
			}
			set
			{
				_WriteFC = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _SlaveNo;
		
		[DisplayName("Slave No")]
		[Category("Column")]
		public short SlaveNo
		{
			get
			{
				return _SlaveNo;
			}
			set
			{
				_SlaveNo = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _Checkback;
		
		[DisplayName("Checkback")]
		[Category("Column")]
		public bool Checkback
		{
			get
			{
				return _Checkback;
			}
			set
			{
				_Checkback = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _ChangeOnly;
		
		[DisplayName("Change Only")]
		[Category("Column")]
		public bool ChangeOnly
		{
			get
			{
				return _ChangeOnly;
			}
			set
			{
				_ChangeOnly = value;
			}
		}
		#endregion
		
		#region Related Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblModbusServer _ModbusServerID_tblModbusServer;
		
		[Description("Represents the foreign key object of the type ModbusServerID")]
		public tblModbusServer m_ModbusServerID_tblModbusServer
		{
			get
			{
				return _ModbusServerID_tblModbusServer;
			}
			set
			{
				_ModbusServerID_tblModbusServer = value;
			}
		}
		#endregion
		
		#region Collection Objects
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblModbusServerDataGroupCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblModbusServerDataGroupCollection _tblModbusServerDataGroupCollection;
		
		[Description("Represents the foreign key object of the type ModbusServerDataID")]
		public tblModbusServerDataGroupCollection m_tblModbusServerDataGroupCollection
		{
			get
			{
              lock(_tblModbusServerDataGroupCollectionLock)
              {
				if (_tblModbusServerDataGroupCollection == null)
				{
					_tblModbusServerDataGroupCollection =  new tblModbusServerDataGroupCollection(this);
					_tblModbusServerDataGroupCollection.Load();
				}
				return _tblModbusServerDataGroupCollection;
              }
			}
			set
			{
				_tblModbusServerDataGroupCollection = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblModbusServerData.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblModbusServerData.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblModbusServerData.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				ModbusServerDataID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblModbusServerData.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public tblModbusServerData()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@ModbusServerDataID", ModbusServerDataID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@ModbusServerID", ModbusServerID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@StaNo", StaNo, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@ReadFC", ReadFC, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@WriteFC", WriteFC, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@SlaveNo", SlaveNo, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Checkback", Checkback, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@ChangeOnly", ChangeOnly, DbType.Boolean));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		public void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the ModbusServerDataID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ModbusServerDataID")) == false))
				{
					ModbusServerDataID = ((long)(Convert.ChangeType(rs["ModbusServerDataID"], typeof(long))));
				}
				// if value from the recordset, to the ModbusServerID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ModbusServerID")) == false))
				{
					ModbusServerID = ((long)(Convert.ChangeType(rs["ModbusServerID"], typeof(long))));
				}
				// if value from the recordset, to the StaNo _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("StaNo")) == false))
				{
					StaNo = ((short)(Convert.ChangeType(rs["StaNo"], typeof(short))));
				}
				// if value from the recordset, to the ReadFC _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ReadFC")) == false))
				{
					ReadFC = ((short)(Convert.ChangeType(rs["ReadFC"], typeof(short))));
				}
				// if value from the recordset, to the WriteFC _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("WriteFC")) == false))
				{
					WriteFC = ((short)(Convert.ChangeType(rs["WriteFC"], typeof(short))));
				}
				// if value from the recordset, to the SlaveNo _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("SlaveNo")) == false))
				{
					SlaveNo = ((short)(Convert.ChangeType(rs["SlaveNo"], typeof(short))));
				}
				// if value from the recordset, to the Checkback _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Checkback")) == false))
				{
					Checkback = ((bool)(Convert.ChangeType(rs["Checkback"], typeof(bool))));
				}
				// if value from the recordset, to the ChangeOnly _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ChangeOnly")) == false))
				{
					ChangeOnly = ((bool)(Convert.ChangeType(rs["ChangeOnly"], typeof(bool))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		
		public override void AddFromString(string[] _strs, string arg1, ref string _log)
		{
			try
			{
				this.PreAddFromString(ref _log);
				int i;
				i = this.ColumnExistInHeader("ModbusServerID");
				if ((i >= 0))
				{
					ModbusServerID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("StaNo");
				if ((i >= 0))
				{
					StaNo = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("ReadFC");
				if ((i >= 0))
				{
					ReadFC = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("WriteFC");
				if ((i >= 0))
				{
					WriteFC = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("SlaveNo");
				if ((i >= 0))
				{
					SlaveNo = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("Checkback");
				if ((i >= 0))
				{
					Checkback = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("ChangeOnly");
				if ((i >= 0))
				{
					ChangeOnly = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				this.PostAddFromString(ref _log);
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblModbusServerDataChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblModbusServerDataCollection : SQLiteTableCollection
	{
		
		/// <remarks>SQL Type:tblModbusServerDataChangedEventHandler</remarks>
		public event tblModbusServerDataChangedEventHandler tblModbusServerDataChanged;
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblModbusServer _ModbusServerID_tblModbusServer;
		
		[Description("Represents the foreign key object of the type ModbusServerID")]
		public tblModbusServer m_ModbusServerID_tblModbusServer
		{
			get
			{
				return _ModbusServerID_tblModbusServer;
			}
			set
			{
				_ModbusServerID_tblModbusServer = value;
			}
		}
		
		[Description("Constructor")]
		public tblModbusServerDataCollection(tblModbusServer _parent)
		{
			_ModbusServerID_tblModbusServer = _parent;
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblModbusServerDataChanged(System.EventArgs e)
		{
			if (tblModbusServerDataChanged != null)
			{
				this.tblModbusServerDataChanged(this, e);
			}
		}
		
		[Description("Gets a  tblModbusServerData from the collection.")]
		public tblModbusServerData this[int index]
		{
			get
			{
				return ((tblModbusServerData)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblModbusServerDataChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblModbusServerData from the collection.")]
		public tblModbusServerData Get(int index)
		{
			return ((tblModbusServerData)(List[index]));
		}
		
		[Description("Adds a new tblModbusServerData to the collection.")]
		public void Add(tblModbusServerData item)
		{
			List.Add(item);
			this.OntblModbusServerDataChanged(EventArgs.Empty);
		}
		
		[Description("Removes a tblModbusServerData from the collection.")]
		public void Remove(tblModbusServerData item)
		{
			List.Remove(item);
			this.OntblModbusServerDataChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblModbusServerData into the collection at the specified index.")]
		public void Insert(int index, tblModbusServerData item)
		{
			List.Insert(index, item);
			this.OntblModbusServerDataChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblModbusServerData class in the collection.")]
		public int IndexOf(tblModbusServerData item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblModbusServerData class is present in the collection.")]
		public bool Contains(tblModbusServerData item)
		{
			return List.Contains(item);
		}
	}
}
