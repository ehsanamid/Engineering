//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;
using System.Data.SqlClient;
using System.Drawing;
using System.Text;
using System.Windows.Forms;


namespace EWS.DCSTables
{
	
	
	public partial class tblFBDBlockPin : Object
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblFBDBlockPin.</remarks>
		internal static string SQL_Insert = "INSERT INTO [tblFBDBlockPin] ([FBDBlockID], [visable], [InitValue], [oIndex]) VAL" +
			"UES(@FBDBlockID, @visable, @InitValue, @oIndex) ; select last_insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblFBDBlockPin, with the WHERE clause.</remarks>
		internal static string SQL_Update = "UPDATE [tblFBDBlockPin] SET [FBDBlockID] = @FBDBlockID, [visable] = @visable, [In" +
			"itValue] = @InitValue, [oIndex] = @oIndex WHERE [FBDBlockPinID]=@FBDBlockPinID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblFBDBlockPin, with the WHERE clause.</remarks>
		internal static string SQL_Select = "SELECT [FBDBlockID], [visable], [InitValue], [oIndex] FROM [tblFBDBlockPin] WHERE" +
			" [FBDBlockPinID]=@FBDBlockPinID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblFBDBlockPin, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblFBDBlockPin] WHERE [FBDBlockPinID]=@FBDBlockPinID ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _FBDBlockPinID;
		
		[DisplayName("FBDBlock Pin ID")]
		[Category("Primary Key")]
		public long FBDBlockPinID
		{
			get
			{
				return _FBDBlockPinID;
			}
			set
			{
				_FBDBlockPinID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _FBDBlockID;
		
		[DisplayName("FBDBlock ID")]
		[Category("Foreign Key")]
		public long FBDBlockID
		{
			get
			{
				return _FBDBlockID;
			}
			set
			{
				_FBDBlockID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _visable;
		
		[DisplayName("visable")]
		[Category("Column")]
		public bool visable
		{
			get
			{
				return _visable;
			}
			set
			{
				_visable = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _InitValue;
		
		[DisplayName("Init Value")]
		[Category("Column")]
		public string InitValue
		{
			get
			{
				return _InitValue;
			}
			set
			{
				_InitValue = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _oIndex;
		
		[DisplayName("o Index")]
		[Category("Column")]
		public int oIndex
		{
			get
			{
				return _oIndex;
			}
			set
			{
				_oIndex = value;
			}
		}
		#endregion
		
		#region Related Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblFBDBlock _FBDBlockID_tblFBDBlock;
		
		[Description("Represents the foreign key object of the type FBDBlockID")]
		public tblFBDBlock m_FBDBlockID_tblFBDBlock
		{
			get
			{
				return _FBDBlockID_tblFBDBlock;
			}
			set
			{
				_FBDBlockID_tblFBDBlock = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblFBDBlockPin.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return rowseffected;
			}
			catch (System.Exception )
			{
				throw;
			}
		}
		
		public void Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblFBDBlockPin.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
			}
			catch (System.Exception )
			{
				throw;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblFBDBlockPin.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				FBDBlockPinID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SqlException ex)
			{
				throw;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblFBDBlockPin.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return rowseffected;
			}
			catch (System.Exception )
			{
				throw;
			}
		}
		
		public tblFBDBlockPin()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@FBDBlockPinID", FBDBlockPinID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@FBDBlockID", FBDBlockID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@visable", visable, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@InitValue", InitValue, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@oIndex", oIndex, DbType.Int32));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		private void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the FBDBlockPinID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("FBDBlockPinID")) == false))
				{
					FBDBlockPinID = ((long)(Convert.ChangeType(rs["FBDBlockPinID"], typeof(long))));
				}
				// if value from the recordset, to the FBDBlockID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("FBDBlockID")) == false))
				{
					FBDBlockID = ((long)(Convert.ChangeType(rs["FBDBlockID"], typeof(long))));
				}
				// if value from the recordset, to the visable _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("visable")) == false))
				{
					visable = ((bool)(Convert.ChangeType(rs["visable"], typeof(bool))));
				}
				// if value from the recordset, to the InitValue _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("InitValue")) == false))
				{
					InitValue = ((string)(Convert.ChangeType(rs["InitValue"], typeof(string))));
				}
				// if value from the recordset, to the oIndex _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("oIndex")) == false))
				{
					oIndex = ((int)(Convert.ChangeType(rs["oIndex"], typeof(int))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblFBDBlockPinChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblFBDBlockPinCollection : System.Collections.CollectionBase
	{
		
		/// <remarks>SQL Type:tblFBDBlockPinChangedEventHandler</remarks>
		public event tblFBDBlockPinChangedEventHandler tblFBDBlockPinChanged;
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblFBDBlock _FBDBlockID_tblFBDBlock;
		
		[Description("Represents the foreign key object of the type FBDBlockID")]
		public tblFBDBlock m_FBDBlockID_tblFBDBlock
		{
			get
			{
				return _FBDBlockID_tblFBDBlock;
			}
			set
			{
				_FBDBlockID_tblFBDBlock = value;
			}
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblFBDBlockPinChanged(System.EventArgs e)
		{
			if (tblFBDBlockPinChanged != null)
			{
				this.tblFBDBlockPinChanged(this, e);
			}
		}
		
		[Description("Gets a  tblFBDBlockPin from the collection.")]
		public tblFBDBlockPin this[int index]
		{
			get
			{
				return ((tblFBDBlockPin)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblFBDBlockPinChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblFBDBlockPin from the collection.")]
		public tblFBDBlockPin Get(int index)
		{
			return ((tblFBDBlockPin)(List[index]));
		}
		
		[Description("Adds a new tblFBDBlockPin to the collection.")]
		public int Add(tblFBDBlockPin item)
		{
			int newindex = List.Add(item);
			this.OntblFBDBlockPinChanged(EventArgs.Empty);
			return newindex;
		}
		
		[Description("Removes a tblFBDBlockPin from the collection.")]
		public void Remove(tblFBDBlockPin item)
		{
			List.Remove(item);
			this.OntblFBDBlockPinChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblFBDBlockPin into the collection at the specified index.")]
		public void Insert(int index, tblFBDBlockPin item)
		{
			List.Insert(index, item);
			this.OntblFBDBlockPinChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblFBDBlockPin class in the collection.")]
		public int IndexOf(tblFBDBlockPin item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblFBDBlockPin class is present in the collection.")]
		public bool Contains(tblFBDBlockPin item)
		{
			return List.Contains(item);
		}
	}
}
