//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;


namespace DCS.DCSTables
{


    public partial class tblSolution : SQLiteTable
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblSolution.</remarks>
		internal static string SQL_Insert = @"INSERT INTO [tblSolution] ([SolutionName], [Net_Redun], [Net1], [Net2], [ProjectPath], [LogEnabled], [ScreenMode], [Description], [VER], [LastUpdated], [BuildVersion], [Height], [Width], [Layer1], [Layer1Desc], [Layer2], [Layer2Desc], [Layer3], [Layer3Desc], [Layer4], [Layer4Desc], [Layer5], [Layer5Desc], [Layer6], [Layer6Desc], [Layer7], [Layer7Desc], [Layer8], [Layer8Desc]) VALUES(@SolutionName, @Net_Redun, @Net1, @Net2, @ProjectPath, @LogEnabled, @ScreenMode, @Description, @VER, @LastUpdated, @BuildVersion, @Height, @Width, @Layer1, @Layer1Desc, @Layer2, @Layer2Desc, @Layer3, @Layer3Desc, @Layer4, @Layer4Desc, @Layer5, @Layer5Desc, @Layer6, @Layer6Desc, @Layer7, @Layer7Desc, @Layer8, @Layer8Desc) ; select last_insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblSolution, with the WHERE clause.</remarks>
		internal static string SQL_Update = @"UPDATE [tblSolution] SET [SolutionName] = @SolutionName, [Net_Redun] = @Net_Redun, [Net1] = @Net1, [Net2] = @Net2, [ProjectPath] = @ProjectPath, [LogEnabled] = @LogEnabled, [ScreenMode] = @ScreenMode, [Description] = @Description, [VER] = @VER, [LastUpdated] = @LastUpdated, [BuildVersion] = @BuildVersion, [Height] = @Height, [Width] = @Width, [Layer1] = @Layer1, [Layer1Desc] = @Layer1Desc, [Layer2] = @Layer2, [Layer2Desc] = @Layer2Desc, [Layer3] = @Layer3, [Layer3Desc] = @Layer3Desc, [Layer4] = @Layer4, [Layer4Desc] = @Layer4Desc, [Layer5] = @Layer5, [Layer5Desc] = @Layer5Desc, [Layer6] = @Layer6, [Layer6Desc] = @Layer6Desc, [Layer7] = @Layer7, [Layer7Desc] = @Layer7Desc, [Layer8] = @Layer8, [Layer8Desc] = @Layer8Desc WHERE [SolutionID]=@SolutionID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblSolution, with the WHERE clause.</remarks>
		internal static string SQL_Select = @"SELECT [SolutionName], [Net_Redun], [Net1], [Net2], [ProjectPath], [LogEnabled], [ScreenMode], [Description], [VER], [LastUpdated], [BuildVersion], [Height], [Width], [Layer1], [Layer1Desc], [Layer2], [Layer2Desc], [Layer3], [Layer3Desc], [Layer4], [Layer4Desc], [Layer5], [Layer5Desc], [Layer6], [Layer6Desc], [Layer7], [Layer7Desc], [Layer8], [Layer8Desc] FROM [tblSolution] WHERE [SolutionID]=@SolutionID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblSolution, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblSolution] WHERE [SolutionID]=@SolutionID ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _SolutionID = -1;
		
		[DisplayName("Solution ID")]
		[Category("Primary Key")]
		public long SolutionID
		{
			get
			{
				return _SolutionID;
			}
			set
			{
				_SolutionID = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _SolutionName = "";
		
		[DisplayName("Solution Name")]
		[Category("Column")]
		public string SolutionName
		{
			get
			{
				return _SolutionName;
			}
			set
			{
				_SolutionName = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _Net_Redun;
		
		[DisplayName("Net_Redun")]
		[Category("Column")]
		public bool Net_Redun
		{
			get
			{
				return _Net_Redun;
			}
			set
			{
				_Net_Redun = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Net1 = "";
		
		[DisplayName("Net 1")]
		[Category("Column")]
		public string Net1
		{
			get
			{
				return _Net1;
			}
			set
			{
				_Net1 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Net2 = "";
		
		[DisplayName("Net 2")]
		[Category("Column")]
		public string Net2
		{
			get
			{
				return _Net2;
			}
			set
			{
				_Net2 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _ProjectPath = "";
		
		[DisplayName("Project Path")]
		[Category("Column")]
		public string ProjectPath
		{
			get
			{
				return _ProjectPath;
			}
			set
			{
				_ProjectPath = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _LogEnabled;
		
		[DisplayName("Log Enabled")]
		[Category("Column")]
		public bool LogEnabled
		{
			get
			{
				return _LogEnabled;
			}
			set
			{
				_LogEnabled = value;
			}
		}
		
		/// <remarks>SQL Type:System.Byte</remarks>
		private byte _ScreenMode;
		
		[DisplayName("Screen Mode")]
		[Category("Column")]
		public byte ScreenMode
		{
			get
			{
				return _ScreenMode;
			}
			set
			{
				_ScreenMode = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Description = "";
		
		[DisplayName("Description")]
		[Category("Column")]
		public string Description
		{
			get
			{
				return _Description;
			}
			set
			{
				_Description = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _VER = "";
		
		[DisplayName("VER")]
		[Category("Column")]
		public string VER
		{
			get
			{
				return _VER;
			}
			set
			{
				_VER = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _LastUpdated = "";
		
		[DisplayName("Last Updated")]
		[Category("Column")]
		public string LastUpdated
		{
			get
			{
				return _LastUpdated;
			}
			set
			{
				_LastUpdated = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _BuildVersion;
		
		[DisplayName("Build Version")]
		[Category("Column")]
		public short BuildVersion
		{
			get
			{
				return _BuildVersion;
			}
			set
			{
				_BuildVersion = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Height;
		
		[DisplayName("Height")]
		[Category("Column")]
		public int Height
		{
			get
			{
				return _Height;
			}
			set
			{
				_Height = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Width;
		
		[DisplayName("Width")]
		[Category("Column")]
		public int Width
		{
			get
			{
				return _Width;
			}
			set
			{
				_Width = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Layer1 = "";
		
		[DisplayName("Layer 1")]
		[Category("Column")]
		public string Layer1
		{
			get
			{
				return _Layer1;
			}
			set
			{
				_Layer1 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Layer1Desc = "";
		
		[DisplayName("Layer 1Desc")]
		[Category("Column")]
		public string Layer1Desc
		{
			get
			{
				return _Layer1Desc;
			}
			set
			{
				_Layer1Desc = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Layer2 = "";
		
		[DisplayName("Layer 2")]
		[Category("Column")]
		public string Layer2
		{
			get
			{
				return _Layer2;
			}
			set
			{
				_Layer2 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Layer2Desc = "";
		
		[DisplayName("Layer 2Desc")]
		[Category("Column")]
		public string Layer2Desc
		{
			get
			{
				return _Layer2Desc;
			}
			set
			{
				_Layer2Desc = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Layer3 = "";
		
		[DisplayName("Layer 3")]
		[Category("Column")]
		public string Layer3
		{
			get
			{
				return _Layer3;
			}
			set
			{
				_Layer3 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Layer3Desc = "";
		
		[DisplayName("Layer 3Desc")]
		[Category("Column")]
		public string Layer3Desc
		{
			get
			{
				return _Layer3Desc;
			}
			set
			{
				_Layer3Desc = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Layer4 = "";
		
		[DisplayName("Layer 4")]
		[Category("Column")]
		public string Layer4
		{
			get
			{
				return _Layer4;
			}
			set
			{
				_Layer4 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Layer4Desc = "";
		
		[DisplayName("Layer 4Desc")]
		[Category("Column")]
		public string Layer4Desc
		{
			get
			{
				return _Layer4Desc;
			}
			set
			{
				_Layer4Desc = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Layer5 = "";
		
		[DisplayName("Layer 5")]
		[Category("Column")]
		public string Layer5
		{
			get
			{
				return _Layer5;
			}
			set
			{
				_Layer5 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Layer5Desc = "";
		
		[DisplayName("Layer 5Desc")]
		[Category("Column")]
		public string Layer5Desc
		{
			get
			{
				return _Layer5Desc;
			}
			set
			{
				_Layer5Desc = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Layer6 = "";
		
		[DisplayName("Layer 6")]
		[Category("Column")]
		public string Layer6
		{
			get
			{
				return _Layer6;
			}
			set
			{
				_Layer6 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Layer6Desc = "";
		
		[DisplayName("Layer 6Desc")]
		[Category("Column")]
		public string Layer6Desc
		{
			get
			{
				return _Layer6Desc;
			}
			set
			{
				_Layer6Desc = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Layer7 = "";
		
		[DisplayName("Layer 7")]
		[Category("Column")]
		public string Layer7
		{
			get
			{
				return _Layer7;
			}
			set
			{
				_Layer7 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Layer7Desc = "";
		
		[DisplayName("Layer 7Desc")]
		[Category("Column")]
		public string Layer7Desc
		{
			get
			{
				return _Layer7Desc;
			}
			set
			{
				_Layer7Desc = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Layer8 = "";
		
		[DisplayName("Layer 8")]
		[Category("Column")]
		public string Layer8
		{
			get
			{
				return _Layer8;
			}
			set
			{
				_Layer8 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Layer8Desc = "";
		
		[DisplayName("Layer 8Desc")]
		[Category("Column")]
		public string Layer8Desc
		{
			get
			{
				return _Layer8Desc;
			}
			set
			{
				_Layer8Desc = value;
			}
		}
		#endregion
		
		#region Collection Objects
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblAlarmGroupCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblAlarmGroupCollection _tblAlarmGroupCollection;
		
		[Description("Represents the foreign key object of the type SolutionID")]
		public tblAlarmGroupCollection m_tblAlarmGroupCollection
		{
			get
			{
              lock(_tblAlarmGroupCollectionLock)
              {
				if (_tblAlarmGroupCollection == null)
				{
					_tblAlarmGroupCollection =  new tblAlarmGroupCollection(this);
					_tblAlarmGroupCollection.Load();
				}
				return _tblAlarmGroupCollection;
              }
			}
			set
			{
				_tblAlarmGroupCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblBlockAlarmStatusTextCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblBlockAlarmStatusTextCollection _tblBlockAlarmStatusTextCollection;
		
		[Description("Represents the foreign key object of the type SolitionID")]
		public tblBlockAlarmStatusTextCollection m_tblBlockAlarmStatusTextCollection
		{
			get
			{
              lock(_tblBlockAlarmStatusTextCollectionLock)
              {
				if (_tblBlockAlarmStatusTextCollection == null)
				{
					_tblBlockAlarmStatusTextCollection =  new tblBlockAlarmStatusTextCollection(this);
					_tblBlockAlarmStatusTextCollection.Load();
				}
				return _tblBlockAlarmStatusTextCollection;
              }
			}
			set
			{
				_tblBlockAlarmStatusTextCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblBlockModeTextCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblBlockModeTextCollection _tblBlockModeTextCollection;
		
		[Description("Represents the foreign key object of the type SolitionID")]
		public tblBlockModeTextCollection m_tblBlockModeTextCollection
		{
			get
			{
              lock(_tblBlockModeTextCollectionLock)
              {
				if (_tblBlockModeTextCollection == null)
				{
					_tblBlockModeTextCollection =  new tblBlockModeTextCollection(this);
					_tblBlockModeTextCollection.Load();
				}
				return _tblBlockModeTextCollection;
              }
			}
			set
			{
				_tblBlockModeTextCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblBlockStateTextCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblBlockStateTextCollection _tblBlockStateTextCollection;
		
		[Description("Represents the foreign key object of the type SolitionID")]
		public tblBlockStateTextCollection m_tblBlockStateTextCollection
		{
			get
			{
              lock(_tblBlockStateTextCollectionLock)
              {
				if (_tblBlockStateTextCollection == null)
				{
					_tblBlockStateTextCollection =  new tblBlockStateTextCollection(this);
					_tblBlockStateTextCollection.Load();
				}
				return _tblBlockStateTextCollection;
              }
			}
			set
			{
				_tblBlockStateTextCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblBoardTypeCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblBoardTypeCollection _tblBoardTypeCollection;
		
		[Description("Represents the foreign key object of the type SolutionID")]
		public tblBoardTypeCollection m_tblBoardTypeCollection
		{
			get
			{
              lock(_tblBoardTypeCollectionLock)
              {
				if (_tblBoardTypeCollection == null)
				{
					_tblBoardTypeCollection =  new tblBoardTypeCollection(this);
					_tblBoardTypeCollection.Load();
				}
				return _tblBoardTypeCollection;
              }
			}
			set
			{
				_tblBoardTypeCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblControllerCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblControllerCollection _tblControllerCollection;
		
		[Description("Represents the foreign key object of the type SolutionID")]
		public tblControllerCollection m_tblControllerCollection
		{
			get
			{
              lock(_tblControllerCollectionLock)
              {
				if (_tblControllerCollection == null)
				{
					_tblControllerCollection =  new tblControllerCollection(this);
					_tblControllerCollection.Load();
				}
				return _tblControllerCollection;
              }
			}
			set
			{
				_tblControllerCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblDisplayCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblDisplayCollection _tblDisplayCollection;
		
		[Description("Represents the foreign key object of the type SolutionID")]
		public tblDisplayCollection m_tblDisplayCollection
		{
			get
			{
              lock(_tblDisplayCollectionLock)
              {
				if (_tblDisplayCollection == null)
				{
					_tblDisplayCollection =  new tblDisplayCollection(this);
					_tblDisplayCollection.Load();
				}
				return _tblDisplayCollection;
              }
			}
			set
			{
				_tblDisplayCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblEWSUserCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblEWSUserCollection _tblEWSUserCollection;
		
		[Description("Represents the foreign key object of the type SolutionID")]
		public tblEWSUserCollection m_tblEWSUserCollection
		{
			get
			{
              lock(_tblEWSUserCollectionLock)
              {
				if (_tblEWSUserCollection == null)
				{
					_tblEWSUserCollection =  new tblEWSUserCollection(this);
					_tblEWSUserCollection.Load();
				}
				return _tblEWSUserCollection;
              }
			}
			set
			{
				_tblEWSUserCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblFP_TypesCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblFP_TypesCollection _tblFP_TypesCollection;
		
		[Description("Represents the foreign key object of the type SolutionID")]
		public tblFP_TypesCollection m_tblFP_TypesCollection
		{
			get
			{
              lock(_tblFP_TypesCollectionLock)
              {
				if (_tblFP_TypesCollection == null)
				{
					_tblFP_TypesCollection =  new tblFP_TypesCollection(this);
					_tblFP_TypesCollection.Load();
				}
				return _tblFP_TypesCollection;
              }
			}
			set
			{
				_tblFP_TypesCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblFunctionCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblFunctionCollection _tblFunctionCollection;
		
		[Description("Represents the foreign key object of the type SolutionID")]
		public tblFunctionCollection m_tblFunctionCollection
		{
			get
			{
              lock(_tblFunctionCollectionLock)
              {
				if (_tblFunctionCollection == null)
				{
					_tblFunctionCollection =  new tblFunctionCollection(this);
					_tblFunctionCollection.Load();
				}
				return _tblFunctionCollection;
              }
			}
			set
			{
				_tblFunctionCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblHMICollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblHMICollection _tblHMICollection;
		
		[Description("Represents the foreign key object of the type SolutionID")]
		public tblHMICollection m_tblHMICollection
		{
			get
			{
              lock(_tblHMICollectionLock)
              {
				if (_tblHMICollection == null)
				{
					_tblHMICollection =  new tblHMICollection(this);
					_tblHMICollection.Load();
				}
				return _tblHMICollection;
              }
			}
			set
			{
				_tblHMICollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblInstrumentUnitsGrpCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblInstrumentUnitsGrpCollection _tblInstrumentUnitsGrpCollection;
		
		[Description("Represents the foreign key object of the type SolutionID")]
		public tblInstrumentUnitsGrpCollection m_tblInstrumentUnitsGrpCollection
		{
			get
			{
              lock(_tblInstrumentUnitsGrpCollectionLock)
              {
				if (_tblInstrumentUnitsGrpCollection == null)
				{
					_tblInstrumentUnitsGrpCollection =  new tblInstrumentUnitsGrpCollection(this);
					_tblInstrumentUnitsGrpCollection.Load();
				}
				return _tblInstrumentUnitsGrpCollection;
              }
			}
			set
			{
				_tblInstrumentUnitsGrpCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblPlantStructureCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblPlantStructureCollection _tblPlantStructureCollection;
		
		[Description("Represents the foreign key object of the type SolutionID")]
		public tblPlantStructureCollection m_tblPlantStructureCollection
		{
			get
			{
              lock(_tblPlantStructureCollectionLock)
              {
				if (_tblPlantStructureCollection == null)
				{
					_tblPlantStructureCollection =  new tblPlantStructureCollection(this);
					_tblPlantStructureCollection.Load();
				}
				return _tblPlantStructureCollection;
              }
			}
			set
			{
				_tblPlantStructureCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblPlantStructureObjectCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblPlantStructureObjectCollection _tblPlantStructureObjectCollection;
		
		[Description("Represents the foreign key object of the type SoultionID")]
		public tblPlantStructureObjectCollection m_tblPlantStructureObjectCollection
		{
			get
			{
              lock(_tblPlantStructureObjectCollectionLock)
              {
				if (_tblPlantStructureObjectCollection == null)
				{
					_tblPlantStructureObjectCollection =  new tblPlantStructureObjectCollection(this);
					_tblPlantStructureObjectCollection.Load();
				}
				return _tblPlantStructureObjectCollection;
              }
			}
			set
			{
				_tblPlantStructureObjectCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblPlantStructurePropertyCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblPlantStructurePropertyCollection _tblPlantStructurePropertyCollection;
		
		[Description("Represents the foreign key object of the type SolutionID")]
		public tblPlantStructurePropertyCollection m_tblPlantStructurePropertyCollection
		{
			get
			{
              lock(_tblPlantStructurePropertyCollectionLock)
              {
				if (_tblPlantStructurePropertyCollection == null)
				{
					_tblPlantStructurePropertyCollection =  new tblPlantStructurePropertyCollection(this);
					_tblPlantStructurePropertyCollection.Load();
				}
				return _tblPlantStructurePropertyCollection;
              }
			}
			set
			{
				_tblPlantStructurePropertyCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblSymbolsCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblSymbolsCollection _tblSymbolsCollection;
		
		[Description("Represents the foreign key object of the type SolutionID")]
		public tblSymbolsCollection m_tblSymbolsCollection
		{
			get
			{
              lock(_tblSymbolsCollectionLock)
              {
				if (_tblSymbolsCollection == null)
				{
					_tblSymbolsCollection =  new tblSymbolsCollection(this);
					_tblSymbolsCollection.Load();
				}
				return _tblSymbolsCollection;
              }
			}
			set
			{
				_tblSymbolsCollection = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblSolution.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblSolution.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblSolution.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				SolutionID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblSolution.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public tblSolution()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@SolutionID", SolutionID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@SolutionName", SolutionName, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Net_Redun", Net_Redun, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Net1", Net1, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Net2", Net2, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@ProjectPath", ProjectPath, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LogEnabled", LogEnabled, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@ScreenMode", ScreenMode, DbType.Byte));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Description", Description, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VER", VER, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LastUpdated", LastUpdated, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@BuildVersion", BuildVersion, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Height", Height, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Width", Width, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer1", Layer1, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer1Desc", Layer1Desc, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer2", Layer2, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer2Desc", Layer2Desc, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer3", Layer3, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer3Desc", Layer3Desc, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer4", Layer4, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer4Desc", Layer4Desc, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer5", Layer5, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer5Desc", Layer5Desc, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer6", Layer6, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer6Desc", Layer6Desc, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer7", Layer7, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer7Desc", Layer7Desc, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer8", Layer8, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer8Desc", Layer8Desc, DbType.String));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		public void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the SolutionID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("SolutionID")) == false))
				{
					SolutionID = ((long)(Convert.ChangeType(rs["SolutionID"], typeof(long))));
				}
				// if value from the recordset, to the SolutionName _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("SolutionName")) == false))
				{
					SolutionName = ((string)(Convert.ChangeType(rs["SolutionName"], typeof(string))));
				}
				// if value from the recordset, to the Net_Redun _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Net_Redun")) == false))
				{
					Net_Redun = ((bool)(Convert.ChangeType(rs["Net_Redun"], typeof(bool))));
				}
				// if value from the recordset, to the Net1 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Net1")) == false))
				{
					Net1 = ((string)(Convert.ChangeType(rs["Net1"], typeof(string))));
				}
				// if value from the recordset, to the Net2 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Net2")) == false))
				{
					Net2 = ((string)(Convert.ChangeType(rs["Net2"], typeof(string))));
				}
				// if value from the recordset, to the ProjectPath _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ProjectPath")) == false))
				{
					ProjectPath = ((string)(Convert.ChangeType(rs["ProjectPath"], typeof(string))));
				}
				// if value from the recordset, to the LogEnabled _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LogEnabled")) == false))
				{
					LogEnabled = ((bool)(Convert.ChangeType(rs["LogEnabled"], typeof(bool))));
				}
				// if value from the recordset, to the ScreenMode _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ScreenMode")) == false))
				{
					ScreenMode = ((byte)(Convert.ChangeType(rs["ScreenMode"], typeof(byte))));
				}
				// if value from the recordset, to the Description _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Description")) == false))
				{
					Description = ((string)(Convert.ChangeType(rs["Description"], typeof(string))));
				}
				// if value from the recordset, to the VER _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VER")) == false))
				{
					VER = ((string)(Convert.ChangeType(rs["VER"], typeof(string))));
				}
				// if value from the recordset, to the LastUpdated _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LastUpdated")) == false))
				{
					LastUpdated = ((string)(Convert.ChangeType(rs["LastUpdated"], typeof(string))));
				}
				// if value from the recordset, to the BuildVersion _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("BuildVersion")) == false))
				{
					BuildVersion = ((short)(Convert.ChangeType(rs["BuildVersion"], typeof(short))));
				}
				// if value from the recordset, to the Height _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Height")) == false))
				{
					Height = ((int)(Convert.ChangeType(rs["Height"], typeof(int))));
				}
				// if value from the recordset, to the Width _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Width")) == false))
				{
					Width = ((int)(Convert.ChangeType(rs["Width"], typeof(int))));
				}
				// if value from the recordset, to the Layer1 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer1")) == false))
				{
					Layer1 = ((string)(Convert.ChangeType(rs["Layer1"], typeof(string))));
				}
				// if value from the recordset, to the Layer1Desc _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer1Desc")) == false))
				{
					Layer1Desc = ((string)(Convert.ChangeType(rs["Layer1Desc"], typeof(string))));
				}
				// if value from the recordset, to the Layer2 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer2")) == false))
				{
					Layer2 = ((string)(Convert.ChangeType(rs["Layer2"], typeof(string))));
				}
				// if value from the recordset, to the Layer2Desc _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer2Desc")) == false))
				{
					Layer2Desc = ((string)(Convert.ChangeType(rs["Layer2Desc"], typeof(string))));
				}
				// if value from the recordset, to the Layer3 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer3")) == false))
				{
					Layer3 = ((string)(Convert.ChangeType(rs["Layer3"], typeof(string))));
				}
				// if value from the recordset, to the Layer3Desc _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer3Desc")) == false))
				{
					Layer3Desc = ((string)(Convert.ChangeType(rs["Layer3Desc"], typeof(string))));
				}
				// if value from the recordset, to the Layer4 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer4")) == false))
				{
					Layer4 = ((string)(Convert.ChangeType(rs["Layer4"], typeof(string))));
				}
				// if value from the recordset, to the Layer4Desc _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer4Desc")) == false))
				{
					Layer4Desc = ((string)(Convert.ChangeType(rs["Layer4Desc"], typeof(string))));
				}
				// if value from the recordset, to the Layer5 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer5")) == false))
				{
					Layer5 = ((string)(Convert.ChangeType(rs["Layer5"], typeof(string))));
				}
				// if value from the recordset, to the Layer5Desc _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer5Desc")) == false))
				{
					Layer5Desc = ((string)(Convert.ChangeType(rs["Layer5Desc"], typeof(string))));
				}
				// if value from the recordset, to the Layer6 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer6")) == false))
				{
					Layer6 = ((string)(Convert.ChangeType(rs["Layer6"], typeof(string))));
				}
				// if value from the recordset, to the Layer6Desc _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer6Desc")) == false))
				{
					Layer6Desc = ((string)(Convert.ChangeType(rs["Layer6Desc"], typeof(string))));
				}
				// if value from the recordset, to the Layer7 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer7")) == false))
				{
					Layer7 = ((string)(Convert.ChangeType(rs["Layer7"], typeof(string))));
				}
				// if value from the recordset, to the Layer7Desc _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer7Desc")) == false))
				{
					Layer7Desc = ((string)(Convert.ChangeType(rs["Layer7Desc"], typeof(string))));
				}
				// if value from the recordset, to the Layer8 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer8")) == false))
				{
					Layer8 = ((string)(Convert.ChangeType(rs["Layer8"], typeof(string))));
				}
				// if value from the recordset, to the Layer8Desc _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer8Desc")) == false))
				{
					Layer8Desc = ((string)(Convert.ChangeType(rs["Layer8Desc"], typeof(string))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		
		public override void AddFromString(string[] _strs, string arg1, ref string _log)
		{
			try
			{
				this.PreAddFromString(ref _log);
				int i;
				i = this.ColumnExistInHeader("SolutionName");
				if ((i >= 0))
				{
					SolutionName = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Net_Redun");
				if ((i >= 0))
				{
					Net_Redun = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("Net1");
				if ((i >= 0))
				{
					Net1 = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Net2");
				if ((i >= 0))
				{
					Net2 = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("ProjectPath");
				if ((i >= 0))
				{
					ProjectPath = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("LogEnabled");
				if ((i >= 0))
				{
					LogEnabled = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("ScreenMode");
				if ((i >= 0))
				{
					ScreenMode = ((byte)(Convert.ChangeType(_strs[i], typeof(byte))));
				}
				i = this.ColumnExistInHeader("Description");
				if ((i >= 0))
				{
					Description = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("VER");
				if ((i >= 0))
				{
					VER = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("LastUpdated");
				if ((i >= 0))
				{
					LastUpdated = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("BuildVersion");
				if ((i >= 0))
				{
					BuildVersion = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("Height");
				if ((i >= 0))
				{
					Height = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Width");
				if ((i >= 0))
				{
					Width = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Layer1");
				if ((i >= 0))
				{
					Layer1 = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Layer1Desc");
				if ((i >= 0))
				{
					Layer1Desc = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Layer2");
				if ((i >= 0))
				{
					Layer2 = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Layer2Desc");
				if ((i >= 0))
				{
					Layer2Desc = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Layer3");
				if ((i >= 0))
				{
					Layer3 = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Layer3Desc");
				if ((i >= 0))
				{
					Layer3Desc = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Layer4");
				if ((i >= 0))
				{
					Layer4 = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Layer4Desc");
				if ((i >= 0))
				{
					Layer4Desc = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Layer5");
				if ((i >= 0))
				{
					Layer5 = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Layer5Desc");
				if ((i >= 0))
				{
					Layer5Desc = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Layer6");
				if ((i >= 0))
				{
					Layer6 = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Layer6Desc");
				if ((i >= 0))
				{
					Layer6Desc = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Layer7");
				if ((i >= 0))
				{
					Layer7 = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Layer7Desc");
				if ((i >= 0))
				{
					Layer7Desc = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Layer8");
				if ((i >= 0))
				{
					Layer8 = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Layer8Desc");
				if ((i >= 0))
				{
					Layer8Desc = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				this.PostAddFromString(ref _log);
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblSolutionChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblSolutionCollection : SQLiteTableCollection
	{
		
		/// <remarks>SQL Type:tblSolutionChangedEventHandler</remarks>
		public event tblSolutionChangedEventHandler tblSolutionChanged;
		
		[Description("Constructor")]
		public tblSolutionCollection()
		{
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblSolutionChanged(System.EventArgs e)
		{
			if (tblSolutionChanged != null)
			{
				this.tblSolutionChanged(this, e);
			}
		}
		
		[Description("Gets a  tblSolution from the collection.")]
		public tblSolution this[int index]
		{
			get
			{
				return ((tblSolution)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblSolutionChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblSolution from the collection.")]
		public tblSolution Get(int index)
		{
			return ((tblSolution)(List[index]));
		}
		
		[Description("Adds a new tblSolution to the collection.")]
		public void Add(tblSolution item)
		{
			List.Add(item);
			this.OntblSolutionChanged(EventArgs.Empty);
		}
		
		[Description("Removes a tblSolution from the collection.")]
		public void Remove(tblSolution item)
		{
			List.Remove(item);
			this.OntblSolutionChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblSolution into the collection at the specified index.")]
		public void Insert(int index, tblSolution item)
		{
			List.Insert(index, item);
			this.OntblSolutionChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblSolution class in the collection.")]
		public int IndexOf(tblSolution item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblSolution class is present in the collection.")]
		public bool Contains(tblSolution item)
		{
			return List.Contains(item);
		}
	}
}
