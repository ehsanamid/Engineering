//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;


namespace DCS.DCSTables
{


    public partial class tblBoardType : SQLiteTable
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblBoardType.</remarks>
		internal static string SQL_Insert = @"INSERT INTO [tblBoardType] ([BoardTypeName], [SolutionID], [Description], [BoardGroup], [NoOfDI], [NoOfDO], [NoOfAI], [NoOfAO], [CPUType]) VALUES(@BoardTypeName, @SolutionID, @Description, @BoardGroup, @NoOfDI, @NoOfDO, @NoOfAI, @NoOfAO, @CPUType) ; select last_insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblBoardType, with the WHERE clause.</remarks>
		internal static string SQL_Update = @"UPDATE [tblBoardType] SET [BoardTypeName] = @BoardTypeName, [SolutionID] = @SolutionID, [Description] = @Description, [BoardGroup] = @BoardGroup, [NoOfDI] = @NoOfDI, [NoOfDO] = @NoOfDO, [NoOfAI] = @NoOfAI, [NoOfAO] = @NoOfAO, [CPUType] = @CPUType WHERE [BoardTypeNameID]=@BoardTypeNameID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblBoardType, with the WHERE clause.</remarks>
		internal static string SQL_Select = "SELECT [BoardTypeName], [SolutionID], [Description], [BoardGroup], [NoOfDI], [NoO" +
			"fDO], [NoOfAI], [NoOfAO], [CPUType] FROM [tblBoardType] WHERE [BoardTypeNameID]=" +
			"@BoardTypeNameID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblBoardType, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblBoardType] WHERE [BoardTypeNameID]=@BoardTypeNameID ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _BoardTypeNameID = -1;
		
		[DisplayName("Board Type Name ID")]
		[Category("Primary Key")]
		public long BoardTypeNameID
		{
			get
			{
				return _BoardTypeNameID;
			}
			set
			{
				_BoardTypeNameID = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _BoardTypeName = "";
		
		[DisplayName("Board Type Name")]
		[Category("Column")]
		public string BoardTypeName
		{
			get
			{
				return _BoardTypeName;
			}
			set
			{
				_BoardTypeName = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _SolutionID = -1;
		
		[DisplayName("Solution ID")]
		[Category("Foreign Key")]
		public long SolutionID
		{
			get
			{
				return _SolutionID;
			}
			set
			{
				_SolutionID = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Description = "";
		
		[DisplayName("Description")]
		[Category("Column")]
		public string Description
		{
			get
			{
				return _Description;
			}
			set
			{
				_Description = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _BoardGroup;
		
		[DisplayName("Board Group")]
		[Category("Column")]
		public int BoardGroup
		{
			get
			{
				return _BoardGroup;
			}
			set
			{
				_BoardGroup = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _NoOfDI;
		
		[DisplayName("No Of DI")]
		[Category("Column")]
		public int NoOfDI
		{
			get
			{
				return _NoOfDI;
			}
			set
			{
				_NoOfDI = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _NoOfDO;
		
		[DisplayName("No Of DO")]
		[Category("Column")]
		public int NoOfDO
		{
			get
			{
				return _NoOfDO;
			}
			set
			{
				_NoOfDO = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _NoOfAI;
		
		[DisplayName("No Of AI")]
		[Category("Column")]
		public int NoOfAI
		{
			get
			{
				return _NoOfAI;
			}
			set
			{
				_NoOfAI = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _NoOfAO;
		
		[DisplayName("No Of AO")]
		[Category("Column")]
		public int NoOfAO
		{
			get
			{
				return _NoOfAO;
			}
			set
			{
				_NoOfAO = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _CPUType;
		
		[DisplayName("CPUType")]
		[Category("Column")]
		public int CPUType
		{
			get
			{
				return _CPUType;
			}
			set
			{
				_CPUType = value;
			}
		}
		#endregion
		
		#region Related Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblSolution _SolutionID_tblSolution;
		
		[Description("Represents the foreign key object of the type SolutionID")]
		public tblSolution m_SolutionID_tblSolution
		{
			get
			{
				return _SolutionID_tblSolution;
			}
			set
			{
				_SolutionID_tblSolution = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblBoardType.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblBoardType.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblBoardType.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				BoardTypeNameID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblBoardType.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public tblBoardType()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@BoardTypeNameID", BoardTypeNameID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@BoardTypeName", BoardTypeName, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@SolutionID", SolutionID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Description", Description, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@BoardGroup", BoardGroup, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@NoOfDI", NoOfDI, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@NoOfDO", NoOfDO, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@NoOfAI", NoOfAI, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@NoOfAO", NoOfAO, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@CPUType", CPUType, DbType.Int32));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		public void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the BoardTypeNameID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("BoardTypeNameID")) == false))
				{
					BoardTypeNameID = ((long)(Convert.ChangeType(rs["BoardTypeNameID"], typeof(long))));
				}
				// if value from the recordset, to the BoardTypeName _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("BoardTypeName")) == false))
				{
					BoardTypeName = ((string)(Convert.ChangeType(rs["BoardTypeName"], typeof(string))));
				}
				// if value from the recordset, to the SolutionID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("SolutionID")) == false))
				{
					SolutionID = ((long)(Convert.ChangeType(rs["SolutionID"], typeof(long))));
				}
				// if value from the recordset, to the Description _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Description")) == false))
				{
					Description = ((string)(Convert.ChangeType(rs["Description"], typeof(string))));
				}
				// if value from the recordset, to the BoardGroup _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("BoardGroup")) == false))
				{
					BoardGroup = ((int)(Convert.ChangeType(rs["BoardGroup"], typeof(int))));
				}
				// if value from the recordset, to the NoOfDI _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("NoOfDI")) == false))
				{
					NoOfDI = ((int)(Convert.ChangeType(rs["NoOfDI"], typeof(int))));
				}
				// if value from the recordset, to the NoOfDO _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("NoOfDO")) == false))
				{
					NoOfDO = ((int)(Convert.ChangeType(rs["NoOfDO"], typeof(int))));
				}
				// if value from the recordset, to the NoOfAI _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("NoOfAI")) == false))
				{
					NoOfAI = ((int)(Convert.ChangeType(rs["NoOfAI"], typeof(int))));
				}
				// if value from the recordset, to the NoOfAO _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("NoOfAO")) == false))
				{
					NoOfAO = ((int)(Convert.ChangeType(rs["NoOfAO"], typeof(int))));
				}
				// if value from the recordset, to the CPUType _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("CPUType")) == false))
				{
					CPUType = ((int)(Convert.ChangeType(rs["CPUType"], typeof(int))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		
		public override void AddFromString(string[] _strs, string arg1, ref string _log)
		{
			try
			{
				this.PreAddFromString(ref _log);
				int i;
				i = this.ColumnExistInHeader("BoardTypeName");
				if ((i >= 0))
				{
					BoardTypeName = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("SolutionID");
				if ((i >= 0))
				{
					SolutionID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("Description");
				if ((i >= 0))
				{
					Description = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("BoardGroup");
				if ((i >= 0))
				{
					BoardGroup = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("NoOfDI");
				if ((i >= 0))
				{
					NoOfDI = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("NoOfDO");
				if ((i >= 0))
				{
					NoOfDO = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("NoOfAI");
				if ((i >= 0))
				{
					NoOfAI = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("NoOfAO");
				if ((i >= 0))
				{
					NoOfAO = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("CPUType");
				if ((i >= 0))
				{
					CPUType = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				this.PostAddFromString(ref _log);
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblBoardTypeChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblBoardTypeCollection : SQLiteTableCollection
	{
		
		/// <remarks>SQL Type:tblBoardTypeChangedEventHandler</remarks>
		public event tblBoardTypeChangedEventHandler tblBoardTypeChanged;
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblSolution _SolutionID_tblSolution;
		
		[Description("Represents the foreign key object of the type SolutionID")]
		public tblSolution m_SolutionID_tblSolution
		{
			get
			{
				return _SolutionID_tblSolution;
			}
			set
			{
				_SolutionID_tblSolution = value;
			}
		}
		
		[Description("Constructor")]
		public tblBoardTypeCollection(tblSolution _parent)
		{
			_SolutionID_tblSolution = _parent;
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblBoardTypeChanged(System.EventArgs e)
		{
			if (tblBoardTypeChanged != null)
			{
				this.tblBoardTypeChanged(this, e);
			}
		}
		
		[Description("Gets a  tblBoardType from the collection.")]
		public tblBoardType this[int index]
		{
			get
			{
				return ((tblBoardType)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblBoardTypeChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblBoardType from the collection.")]
		public tblBoardType Get(int index)
		{
			return ((tblBoardType)(List[index]));
		}
		
		[Description("Adds a new tblBoardType to the collection.")]
		public void Add(tblBoardType item)
		{
			List.Add(item);
			this.OntblBoardTypeChanged(EventArgs.Empty);
		}
		
		[Description("Removes a tblBoardType from the collection.")]
		public void Remove(tblBoardType item)
		{
			List.Remove(item);
			this.OntblBoardTypeChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblBoardType into the collection at the specified index.")]
		public void Insert(int index, tblBoardType item)
		{
			List.Insert(index, item);
			this.OntblBoardTypeChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblBoardType class in the collection.")]
		public int IndexOf(tblBoardType item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblBoardType class is present in the collection.")]
		public bool Contains(tblBoardType item)
		{
			return List.Contains(item);
		}
	}
}
