//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;
using System.Data.SqlClient;
using System.Drawing;
using System.Text;
using System.Windows.Forms;


namespace EWS.DCSTables
{
	
	
	public partial class test : Object
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table test.</remarks>
		internal static string SQL_Insert = "INSERT INTO [test] ([t1]) VALUES(@t1) ; select last_insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table test, without any WHERE clause.</remarks>
		internal static string SQL_Update = "UPDATE [test] SET [t1] = @t1 ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table test, without any WHERE clause.</remarks>
		internal static string SQL_Select = "SELECT [t1] FROM [test] ";
		
		/// <remarks>This _databasename represents the DELETE string for the table test, with WHERE clause if there is any Primary keys on the table.</remarks>
		internal static string SQL_Delete = "DELETE FROM [test] ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.Drawing.Color</remarks>
		private System.Drawing.Color _t1;
		
		[DisplayName("t 1")]
		[Category("Column")]
		public System.Drawing.Color t1
		{
			get
			{
				return _t1;
			}
			set
			{
				_t1 = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = test.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = test.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = test.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = test.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public test()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@t1", t1.ToArgb(), DbType.Int32));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		public void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the t1 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("t1")) == false))
				{
					t1 = Color.FromArgb(((int)(Convert.ChangeType(rs["t1"], typeof(int)))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void testChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class testCollection : System.Collections.CollectionBase
	{
		
		/// <remarks>SQL Type:testChangedEventHandler</remarks>
		public event testChangedEventHandler testChanged;
		
		[Description("Constructor")]
		public testCollection()
		{
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntestChanged(System.EventArgs e)
		{
			if (testChanged != null)
			{
				this.testChanged(this, e);
			}
		}
		
		[Description("Gets a  test from the collection.")]
		public test this[int index]
		{
			get
			{
				return ((test)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntestChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  test from the collection.")]
		public test Get(int index)
		{
			return ((test)(List[index]));
		}
		
		[Description("Adds a new test to the collection.")]
		public void Add(test item)
		{
			List.Add(item);
			this.OntestChanged(EventArgs.Empty);
		}
		
		[Description("Removes a test from the collection.")]
		public void Remove(test item)
		{
			List.Remove(item);
			this.OntestChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an test into the collection at the specified index.")]
		public void Insert(int index, test item)
		{
			List.Insert(index, item);
			this.OntestChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the test class in the collection.")]
		public int IndexOf(test item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the test class is present in the collection.")]
		public bool Contains(test item)
		{
			return List.Contains(item);
		}
	}
}
