//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;


namespace DCS.DCSTables
{


    public partial class tblModbusServerDataGroup : SQLiteTable
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblModbusServerDataGroup.</remarks>
		internal static string SQL_Insert = "INSERT INTO [tblModbusServerDataGroup] ([GroupName], [ModbusServerDataID], [Start" +
			"], [Len], [CycleTime]) VALUES(@GroupName, @ModbusServerDataID, @Start, @Len, @Cy" +
			"cleTime) ; select last_insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblModbusServerDataGroup, with the WHERE clause.</remarks>
		internal static string SQL_Update = "UPDATE [tblModbusServerDataGroup] SET [GroupName] = @GroupName, [ModbusServerData" +
			"ID] = @ModbusServerDataID, [Start] = @Start, [Len] = @Len, [CycleTime] = @CycleT" +
			"ime WHERE [ModbusServerDataGroupID]=@ModbusServerDataGroupID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblModbusServerDataGroup, with the WHERE clause.</remarks>
		internal static string SQL_Select = "SELECT [GroupName], [ModbusServerDataID], [Start], [Len], [CycleTime] FROM [tblMo" +
			"dbusServerDataGroup] WHERE [ModbusServerDataGroupID]=@ModbusServerDataGroupID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblModbusServerDataGroup, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblModbusServerDataGroup] WHERE [ModbusServerDataGroupID]=@ModbusSer" +
			"verDataGroupID ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.String</remarks>
		private string _GroupName = "";
		
		[DisplayName("Group Name")]
		[Category("Column")]
		public string GroupName
		{
			get
			{
				return _GroupName;
			}
			set
			{
				_GroupName = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _ModbusServerDataGroupID = -1;
		
		[DisplayName("Modbus Server Data Group ID")]
		[Category("Primary Key")]
		public long ModbusServerDataGroupID
		{
			get
			{
				return _ModbusServerDataGroupID;
			}
			set
			{
				_ModbusServerDataGroupID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _ModbusServerDataID = -1;
		
		[DisplayName("Modbus Server Data ID")]
		[Category("Foreign Key")]
		public long ModbusServerDataID
		{
			get
			{
				return _ModbusServerDataID;
			}
			set
			{
				_ModbusServerDataID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _Start;
		
		[DisplayName("Start")]
		[Category("Column")]
		public short Start
		{
			get
			{
				return _Start;
			}
			set
			{
				_Start = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _Len;
		
		[DisplayName("Len")]
		[Category("Column")]
		public short Len
		{
			get
			{
				return _Len;
			}
			set
			{
				_Len = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _CycleTime;
		
		[DisplayName("Cycle Time")]
		[Category("Column")]
		public short CycleTime
		{
			get
			{
				return _CycleTime;
			}
			set
			{
				_CycleTime = value;
			}
		}
		#endregion
		
		#region Related Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblModbusServerData _ModbusServerDataID_tblModbusServerData;
		
		[Description("Represents the foreign key object of the type ModbusServerDataID")]
		public tblModbusServerData m_ModbusServerDataID_tblModbusServerData
		{
			get
			{
				return _ModbusServerDataID_tblModbusServerData;
			}
			set
			{
				_ModbusServerDataID_tblModbusServerData = value;
			}
		}
		#endregion
		
		#region Collection Objects
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblModbusServerPointCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblModbusServerPointCollection _tblModbusServerPointCollection;
		
		[Description("Represents the foreign key object of the type ModbusServerDataGroupID")]
		public tblModbusServerPointCollection m_tblModbusServerPointCollection
		{
			get
			{
              lock(_tblModbusServerPointCollectionLock)
              {
				if (_tblModbusServerPointCollection == null)
				{
					_tblModbusServerPointCollection =  new tblModbusServerPointCollection(this);
					_tblModbusServerPointCollection.Load();
				}
				return _tblModbusServerPointCollection;
              }
			}
			set
			{
				_tblModbusServerPointCollection = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblModbusServerDataGroup.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblModbusServerDataGroup.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblModbusServerDataGroup.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				ModbusServerDataGroupID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblModbusServerDataGroup.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public tblModbusServerDataGroup()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@GroupName", GroupName, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@ModbusServerDataGroupID", ModbusServerDataGroupID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@ModbusServerDataID", ModbusServerDataID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Start", Start, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Len", Len, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@CycleTime", CycleTime, DbType.Int16));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		public void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the GroupName _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("GroupName")) == false))
				{
					GroupName = ((string)(Convert.ChangeType(rs["GroupName"], typeof(string))));
				}
				// if value from the recordset, to the ModbusServerDataGroupID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ModbusServerDataGroupID")) == false))
				{
					ModbusServerDataGroupID = ((long)(Convert.ChangeType(rs["ModbusServerDataGroupID"], typeof(long))));
				}
				// if value from the recordset, to the ModbusServerDataID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ModbusServerDataID")) == false))
				{
					ModbusServerDataID = ((long)(Convert.ChangeType(rs["ModbusServerDataID"], typeof(long))));
				}
				// if value from the recordset, to the Start _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Start")) == false))
				{
					Start = ((short)(Convert.ChangeType(rs["Start"], typeof(short))));
				}
				// if value from the recordset, to the Len _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Len")) == false))
				{
					Len = ((short)(Convert.ChangeType(rs["Len"], typeof(short))));
				}
				// if value from the recordset, to the CycleTime _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("CycleTime")) == false))
				{
					CycleTime = ((short)(Convert.ChangeType(rs["CycleTime"], typeof(short))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		
		public override void AddFromString(string[] _strs, string arg1, ref string _log)
		{
			try
			{
				this.PreAddFromString(ref _log);
				int i;
				i = this.ColumnExistInHeader("GroupName");
				if ((i >= 0))
				{
					GroupName = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("ModbusServerDataID");
				if ((i >= 0))
				{
					ModbusServerDataID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("Start");
				if ((i >= 0))
				{
					Start = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("Len");
				if ((i >= 0))
				{
					Len = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("CycleTime");
				if ((i >= 0))
				{
					CycleTime = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				this.PostAddFromString(ref _log);
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblModbusServerDataGroupChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblModbusServerDataGroupCollection : SQLiteTableCollection
	{
		
		/// <remarks>SQL Type:tblModbusServerDataGroupChangedEventHandler</remarks>
		public event tblModbusServerDataGroupChangedEventHandler tblModbusServerDataGroupChanged;
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblModbusServerData _ModbusServerDataID_tblModbusServerData;
		
		[Description("Represents the foreign key object of the type ModbusServerDataID")]
		public tblModbusServerData m_ModbusServerDataID_tblModbusServerData
		{
			get
			{
				return _ModbusServerDataID_tblModbusServerData;
			}
			set
			{
				_ModbusServerDataID_tblModbusServerData = value;
			}
		}
		
		[Description("Constructor")]
		public tblModbusServerDataGroupCollection(tblModbusServerData _parent)
		{
			_ModbusServerDataID_tblModbusServerData = _parent;
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblModbusServerDataGroupChanged(System.EventArgs e)
		{
			if (tblModbusServerDataGroupChanged != null)
			{
				this.tblModbusServerDataGroupChanged(this, e);
			}
		}
		
		[Description("Gets a  tblModbusServerDataGroup from the collection.")]
		public tblModbusServerDataGroup this[int index]
		{
			get
			{
				return ((tblModbusServerDataGroup)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblModbusServerDataGroupChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblModbusServerDataGroup from the collection.")]
		public tblModbusServerDataGroup Get(int index)
		{
			return ((tblModbusServerDataGroup)(List[index]));
		}
		
		[Description("Adds a new tblModbusServerDataGroup to the collection.")]
		public void Add(tblModbusServerDataGroup item)
		{
			List.Add(item);
			this.OntblModbusServerDataGroupChanged(EventArgs.Empty);
		}
		
		[Description("Removes a tblModbusServerDataGroup from the collection.")]
		public void Remove(tblModbusServerDataGroup item)
		{
			List.Remove(item);
			this.OntblModbusServerDataGroupChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblModbusServerDataGroup into the collection at the specified index.")]
		public void Insert(int index, tblModbusServerDataGroup item)
		{
			List.Insert(index, item);
			this.OntblModbusServerDataGroupChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblModbusServerDataGroup class in the collection.")]
		public int IndexOf(tblModbusServerDataGroup item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblModbusServerDataGroup class is present in the collection.")]
		public bool Contains(tblModbusServerDataGroup item)
		{
			return List.Contains(item);
		}
	}
}
