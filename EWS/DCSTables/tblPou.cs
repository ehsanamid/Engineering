//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;


namespace DCS.DCSTables
{


    public partial class tblPou : SQLiteTable
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblPou.</remarks>
		internal static string SQL_Insert = @"INSERT INTO [tblPou] ([pouName], [ControllerID], [Description], [Type], [Language], [oIndex], [executiontype], [triggerSignalID], [STText]) VALUES(@pouName, @ControllerID, @Description, @Type, @Language, @oIndex, @executiontype, @triggerSignalID, @STText) ; select last_insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblPou, with the WHERE clause.</remarks>
		internal static string SQL_Update = @"UPDATE [tblPou] SET [pouName] = @pouName, [ControllerID] = @ControllerID, [Description] = @Description, [Type] = @Type, [Language] = @Language, [oIndex] = @oIndex, [executiontype] = @executiontype, [triggerSignalID] = @triggerSignalID, [STText] = @STText WHERE [pouID]=@pouID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblPou, with the WHERE clause.</remarks>
		internal static string SQL_Select = "SELECT [pouName], [ControllerID], [Description], [Type], [Language], [oIndex], [e" +
			"xecutiontype], [triggerSignalID], [STText] FROM [tblPou] WHERE [pouID]=@pouID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblPou, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblPou] WHERE [pouID]=@pouID ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.String</remarks>
		private string _pouName = "";
		
		[DisplayName("pou Name")]
		[Category("Column")]
		public string pouName
		{
			get
			{
				return _pouName;
			}
			set
			{
				_pouName = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _pouID = -1;
		
		[DisplayName("pou ID")]
		[Category("Primary Key")]
		public long pouID
		{
			get
			{
				return _pouID;
			}
			set
			{
				_pouID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _ControllerID = -1;
		
		[DisplayName("Controller ID")]
		[Category("Foreign Key")]
		public long ControllerID
		{
			get
			{
				return _ControllerID;
			}
			set
			{
				_ControllerID = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Description = "";
		
		[DisplayName("Description")]
		[Category("Column")]
		public string Description
		{
			get
			{
				return _Description;
			}
			set
			{
				_Description = value;
			}
		}
		
		/// <remarks>SQL Type:DCS.POUTYPE</remarks>
		private DCS.POUTYPE _Type;
		
		[DisplayName("Type")]
		[Category("Column")]
		public DCS.POUTYPE Type
		{
			get
			{
				return _Type;
			}
			set
			{
				_Type = value;
			}
		}
		
		/// <remarks>SQL Type:DCS.PouLanguageType</remarks>
		private DCS.PouLanguageType _Language;
		
		[DisplayName("Language")]
		[Category("Column")]
		public DCS.PouLanguageType Language
		{
			get
			{
				return _Language;
			}
			set
			{
				_Language = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _oIndex;
		
		[DisplayName("o Index")]
		[Category("Column")]
		public int oIndex
		{
			get
			{
				return _oIndex;
			}
			set
			{
				_oIndex = value;
			}
		}
		
		/// <remarks>SQL Type:DCS.POUEXECUTIONTYPE</remarks>
		private DCS.POUEXECUTIONTYPE _executiontype;
		
		[DisplayName("executiontype")]
		[Category("Column")]
		public DCS.POUEXECUTIONTYPE executiontype
		{
			get
			{
				return _executiontype;
			}
			set
			{
				_executiontype = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _triggerSignalID = -1;
		
		[DisplayName("trigger Signal ID")]
		[Category("Column")]
		public long triggerSignalID
		{
			get
			{
				return _triggerSignalID;
			}
			set
			{
				_triggerSignalID = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _STText = "";
		
		[DisplayName("STText")]
		[Category("Column")]
		public string STText
		{
			get
			{
				return _STText;
			}
			set
			{
				_STText = value;
			}
		}
		#endregion
		
		#region Related Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblController _ControllerID_tblController;
		
		[Description("Represents the foreign key object of the type ControllerID")]
		public tblController m_ControllerID_tblController
		{
			get
			{
				return _ControllerID_tblController;
			}
			set
			{
				_ControllerID_tblController = value;
			}
		}
		#endregion
		
		#region Collection Objects
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblFBDBlockCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblFBDBlockCollection _tblFBDBlockCollection;
		
		[Description("Represents the foreign key object of the type pouID")]
		public tblFBDBlockCollection m_tblFBDBlockCollection
		{
			get
			{
              lock(_tblFBDBlockCollectionLock)
              {
				if (_tblFBDBlockCollection == null)
				{
					_tblFBDBlockCollection =  new tblFBDBlockCollection(this);
					_tblFBDBlockCollection.Load();
				}
				return _tblFBDBlockCollection;
              }
			}
			set
			{
				_tblFBDBlockCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblFBDPinConnectionCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblFBDPinConnectionCollection _tblFBDPinConnectionCollection;
		
		[Description("Represents the foreign key object of the type pouID")]
		public tblFBDPinConnectionCollection m_tblFBDPinConnectionCollection
		{
			get
			{
              lock(_tblFBDPinConnectionCollectionLock)
              {
				if (_tblFBDPinConnectionCollection == null)
				{
					_tblFBDPinConnectionCollection =  new tblFBDPinConnectionCollection(this);
					_tblFBDPinConnectionCollection.Load();
				}
				return _tblFBDPinConnectionCollection;
              }
			}
			set
			{
				_tblFBDPinConnectionCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblVariableCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblVariableCollection _tblVariableCollection;
		
		[Description("Represents the foreign key object of the type pouID")]
		public tblVariableCollection m_tblVariableCollection
		{
			get
			{
              lock(_tblVariableCollectionLock)
              {
				if (_tblVariableCollection == null)
				{
					_tblVariableCollection =  new tblVariableCollection(this);
					_tblVariableCollection.Load();
				}
				return _tblVariableCollection;
              }
			}
			set
			{
				_tblVariableCollection = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblPou.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblPou.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblPou.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				pouID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblPou.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public tblPou()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@pouName", pouName, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@pouID", pouID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@ControllerID", ControllerID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Description", Description, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Type", Type, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Language", Language, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@oIndex", oIndex, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@executiontype", executiontype, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@triggerSignalID", triggerSignalID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@STText", STText, DbType.String));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		public void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the pouName _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("pouName")) == false))
				{
					pouName = ((string)(Convert.ChangeType(rs["pouName"], typeof(string))));
				}
				// if value from the recordset, to the pouID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("pouID")) == false))
				{
					pouID = ((long)(Convert.ChangeType(rs["pouID"], typeof(long))));
				}
				// if value from the recordset, to the ControllerID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ControllerID")) == false))
				{
					ControllerID = ((long)(Convert.ChangeType(rs["ControllerID"], typeof(long))));
				}
				// if value from the recordset, to the Description _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Description")) == false))
				{
					Description = ((string)(Convert.ChangeType(rs["Description"], typeof(string))));
				}
				// if value from the recordset, to the Type _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Type")) == false))
				{
					Type = ((DCS.POUTYPE)(Convert.ChangeType(rs["Type"], typeof(int))));
				}
				// if value from the recordset, to the Language _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Language")) == false))
				{
					Language = ((DCS.PouLanguageType)(Convert.ChangeType(rs["Language"], typeof(int))));
				}
				// if value from the recordset, to the oIndex _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("oIndex")) == false))
				{
					oIndex = ((int)(Convert.ChangeType(rs["oIndex"], typeof(int))));
				}
				// if value from the recordset, to the executiontype _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("executiontype")) == false))
				{
					executiontype = ((DCS.POUEXECUTIONTYPE)(Convert.ChangeType(rs["executiontype"], typeof(int))));
				}
				// if value from the recordset, to the triggerSignalID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("triggerSignalID")) == false))
				{
					triggerSignalID = ((long)(Convert.ChangeType(rs["triggerSignalID"], typeof(long))));
				}
				// if value from the recordset, to the STText _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("STText")) == false))
				{
					STText = ((string)(Convert.ChangeType(rs["STText"], typeof(string))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		
		public override void AddFromString(string[] _strs, string arg1, ref string _log)
		{
			try
			{
				this.PreAddFromString(ref _log);
				int i;
				i = this.ColumnExistInHeader("pouName");
				if ((i >= 0))
				{
					pouName = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("ControllerID");
				if ((i >= 0))
				{
					ControllerID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("Description");
				if ((i >= 0))
				{
					Description = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Type");
				if ((i >= 0))
				{
					Type = ((DCS.POUTYPE)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Language");
				if ((i >= 0))
				{
					Language = ((DCS.PouLanguageType)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("oIndex");
				if ((i >= 0))
				{
					oIndex = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("executiontype");
				if ((i >= 0))
				{
					executiontype = ((DCS.POUEXECUTIONTYPE)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("triggerSignalID");
				if ((i >= 0))
				{
					triggerSignalID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("STText");
				if ((i >= 0))
				{
					STText = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				this.PostAddFromString(ref _log);
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblPouChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblPouCollection : SQLiteTableCollection
	{
		
		/// <remarks>SQL Type:tblPouChangedEventHandler</remarks>
		public event tblPouChangedEventHandler tblPouChanged;
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblController _ControllerID_tblController;
		
		[Description("Represents the foreign key object of the type ControllerID")]
		public tblController m_ControllerID_tblController
		{
			get
			{
				return _ControllerID_tblController;
			}
			set
			{
				_ControllerID_tblController = value;
			}
		}
		
		[Description("Constructor")]
		public tblPouCollection(tblController _parent)
		{
			_ControllerID_tblController = _parent;
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblPouChanged(System.EventArgs e)
		{
			if (tblPouChanged != null)
			{
				this.tblPouChanged(this, e);
			}
		}
		
		[Description("Gets a  tblPou from the collection.")]
		public tblPou this[int index]
		{
			get
			{
				return ((tblPou)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblPouChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblPou from the collection.")]
		public tblPou Get(int index)
		{
			return ((tblPou)(List[index]));
		}
		
		[Description("Adds a new tblPou to the collection.")]
		public void Add(tblPou item)
		{
			List.Add(item);
			this.OntblPouChanged(EventArgs.Empty);
		}
		
		[Description("Removes a tblPou from the collection.")]
		public void Remove(tblPou item)
		{
			List.Remove(item);
			this.OntblPouChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblPou into the collection at the specified index.")]
		public void Insert(int index, tblPou item)
		{
			List.Insert(index, item);
			this.OntblPouChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblPou class in the collection.")]
		public int IndexOf(tblPou item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblPou class is present in the collection.")]
		public bool Contains(tblPou item)
		{
			return List.Contains(item);
		}
	}
}
