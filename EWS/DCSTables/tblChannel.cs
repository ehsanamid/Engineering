//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;


namespace DCS.DCSTables
{


    public partial class tblChannel : SQLiteTable
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblChannel.</remarks>
		internal static string SQL_Insert = "INSERT INTO [tblChannel] ([CHN], [VarNameID], [BoardID], [Type], [INV], [PER], [O" +
			"PD], [AD0], [AD1], [EN0], [EN1], [FLT], [DEB]) VALUES(@CHN, @VarNameID, @BoardID" +
			", @Type, @INV, @PER, @OPD, @AD0, @AD1, @EN0, @EN1, @FLT, @DEB) ; select last_ins" +
			"ert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblChannel, with the WHERE clause.</remarks>
		internal static string SQL_Update = "UPDATE [tblChannel] SET [CHN] = @CHN, [VarNameID] = @VarNameID, [BoardID] = @Boar" +
			"dID, [Type] = @Type, [INV] = @INV, [PER] = @PER, [OPD] = @OPD, [AD0] = @AD0, [AD" +
			"1] = @AD1, [EN0] = @EN0, [EN1] = @EN1, [FLT] = @FLT, [DEB] = @DEB WHERE [CHNID]=" +
			"@CHNID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblChannel, with the WHERE clause.</remarks>
		internal static string SQL_Select = "SELECT [CHN], [VarNameID], [BoardID], [Type], [INV], [PER], [OPD], [AD0], [AD1], " +
			"[EN0], [EN1], [FLT], [DEB] FROM [tblChannel] WHERE [CHNID]=@CHNID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblChannel, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblChannel] WHERE [CHNID]=@CHNID ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _CHNID = -1;
		
		[DisplayName("CHNID")]
		[Category("Primary Key")]
		public long CHNID
		{
			get
			{
				return _CHNID;
			}
			set
			{
				_CHNID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _CHN;
		
		[DisplayName("CHN")]
		[Category("Column")]
		public int CHN
		{
			get
			{
				return _CHN;
			}
			set
			{
				_CHN = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _VarNameID = -1;
		
		[DisplayName("Var Name ID")]
		[Category("Column")]
		public long VarNameID
		{
			get
			{
				return _VarNameID;
			}
			set
			{
				_VarNameID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _BoardID = -1;
		
		[DisplayName("Board ID")]
		[Category("Foreign Key")]
		public long BoardID
		{
			get
			{
				return _BoardID;
			}
			set
			{
				_BoardID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Type;
		
		[DisplayName("Type")]
		[Category("Column")]
		public int Type
		{
			get
			{
				return _Type;
			}
			set
			{
				_Type = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _INV;
		
		[DisplayName("INV")]
		[Category("Column")]
		public bool INV
		{
			get
			{
				return _INV;
			}
			set
			{
				_INV = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _PER;
		
		[DisplayName("PER")]
		[Category("Column")]
		public bool PER
		{
			get
			{
				return _PER;
			}
			set
			{
				_PER = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _OPD;
		
		[DisplayName("OPD")]
		[Category("Column")]
		public int OPD
		{
			get
			{
				return _OPD;
			}
			set
			{
				_OPD = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _AD0;
		
		[DisplayName("AD0")]
		[Category("Column")]
		public int AD0
		{
			get
			{
				return _AD0;
			}
			set
			{
				_AD0 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _AD1;
		
		[DisplayName("AD1")]
		[Category("Column")]
		public int AD1
		{
			get
			{
				return _AD1;
			}
			set
			{
				_AD1 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Single</remarks>
		private float _EN0;
		
		[DisplayName("EN0")]
		[Category("Column")]
		public float EN0
		{
			get
			{
				return _EN0;
			}
			set
			{
				_EN0 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Single</remarks>
		private float _EN1;
		
		[DisplayName("EN1")]
		[Category("Column")]
		public float EN1
		{
			get
			{
				return _EN1;
			}
			set
			{
				_EN1 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _FLT;
		
		[DisplayName("FLT")]
		[Category("Column")]
		public int FLT
		{
			get
			{
				return _FLT;
			}
			set
			{
				_FLT = value;
			}
		}
		
		/// <remarks>SQL Type:System.Single</remarks>
		private float _DEB;
		
		[DisplayName("DEB")]
		[Category("Column")]
		public float DEB
		{
			get
			{
				return _DEB;
			}
			set
			{
				_DEB = value;
			}
		}
		#endregion
		
		#region Related Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblBoard _BoardID_tblBoard;
		
		[Description("Represents the foreign key object of the type BoardID")]
		public tblBoard m_BoardID_tblBoard
		{
			get
			{
				return _BoardID_tblBoard;
			}
			set
			{
				_BoardID_tblBoard = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblChannel.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblChannel.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblChannel.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				CHNID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblChannel.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public tblChannel()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@CHNID", CHNID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@CHN", CHN, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID", VarNameID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@BoardID", BoardID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Type", Type, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@INV", INV, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@PER", PER, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@OPD", OPD, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@AD0", AD0, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@AD1", AD1, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@EN0", EN0, DbType.Single));
				SqlParmColl.Add(CommonDB.AddSqlParm("@EN1", EN1, DbType.Single));
				SqlParmColl.Add(CommonDB.AddSqlParm("@FLT", FLT, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@DEB", DEB, DbType.Single));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		public void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the CHNID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("CHNID")) == false))
				{
					CHNID = ((long)(Convert.ChangeType(rs["CHNID"], typeof(long))));
				}
				// if value from the recordset, to the CHN _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("CHN")) == false))
				{
					CHN = ((int)(Convert.ChangeType(rs["CHN"], typeof(int))));
				}
				// if value from the recordset, to the VarNameID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID")) == false))
				{
					VarNameID = ((long)(Convert.ChangeType(rs["VarNameID"], typeof(long))));
				}
				// if value from the recordset, to the BoardID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("BoardID")) == false))
				{
					BoardID = ((long)(Convert.ChangeType(rs["BoardID"], typeof(long))));
				}
				// if value from the recordset, to the Type _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Type")) == false))
				{
					Type = ((int)(Convert.ChangeType(rs["Type"], typeof(int))));
				}
				// if value from the recordset, to the INV _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("INV")) == false))
				{
					INV = ((bool)(Convert.ChangeType(rs["INV"], typeof(bool))));
				}
				// if value from the recordset, to the PER _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("PER")) == false))
				{
					PER = ((bool)(Convert.ChangeType(rs["PER"], typeof(bool))));
				}
				// if value from the recordset, to the OPD _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("OPD")) == false))
				{
					OPD = ((int)(Convert.ChangeType(rs["OPD"], typeof(int))));
				}
				// if value from the recordset, to the AD0 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("AD0")) == false))
				{
					AD0 = ((int)(Convert.ChangeType(rs["AD0"], typeof(int))));
				}
				// if value from the recordset, to the AD1 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("AD1")) == false))
				{
					AD1 = ((int)(Convert.ChangeType(rs["AD1"], typeof(int))));
				}
				// if value from the recordset, to the EN0 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("EN0")) == false))
				{
					EN0 = ((float)(Convert.ChangeType(rs["EN0"], typeof(float))));
				}
				// if value from the recordset, to the EN1 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("EN1")) == false))
				{
					EN1 = ((float)(Convert.ChangeType(rs["EN1"], typeof(float))));
				}
				// if value from the recordset, to the FLT _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("FLT")) == false))
				{
					FLT = ((int)(Convert.ChangeType(rs["FLT"], typeof(int))));
				}
				// if value from the recordset, to the DEB _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("DEB")) == false))
				{
					DEB = ((float)(Convert.ChangeType(rs["DEB"], typeof(float))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		
		public override void AddFromString(string[] _strs, string arg1, ref string _log)
		{
			try
			{
				this.PreAddFromString(ref _log);
				int i;
				i = this.ColumnExistInHeader("CHN");
				if ((i >= 0))
				{
					CHN = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("VarNameID");
				if ((i >= 0))
				{
					VarNameID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("BoardID");
				if ((i >= 0))
				{
					BoardID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("Type");
				if ((i >= 0))
				{
					Type = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("INV");
				if ((i >= 0))
				{
					INV = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("PER");
				if ((i >= 0))
				{
					PER = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("OPD");
				if ((i >= 0))
				{
					OPD = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("AD0");
				if ((i >= 0))
				{
					AD0 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("AD1");
				if ((i >= 0))
				{
					AD1 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("EN0");
				if ((i >= 0))
				{
					EN0 = ((float)(Convert.ChangeType(_strs[i], typeof(float))));
				}
				i = this.ColumnExistInHeader("EN1");
				if ((i >= 0))
				{
					EN1 = ((float)(Convert.ChangeType(_strs[i], typeof(float))));
				}
				i = this.ColumnExistInHeader("FLT");
				if ((i >= 0))
				{
					FLT = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("DEB");
				if ((i >= 0))
				{
					DEB = ((float)(Convert.ChangeType(_strs[i], typeof(float))));
				}
				this.PostAddFromString(ref _log);
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblChannelChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblChannelCollection : SQLiteTableCollection
	{
		
		/// <remarks>SQL Type:tblChannelChangedEventHandler</remarks>
		public event tblChannelChangedEventHandler tblChannelChanged;
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblBoard _BoardID_tblBoard;
		
		[Description("Represents the foreign key object of the type BoardID")]
		public tblBoard m_BoardID_tblBoard
		{
			get
			{
				return _BoardID_tblBoard;
			}
			set
			{
				_BoardID_tblBoard = value;
			}
		}
		
		[Description("Constructor")]
		public tblChannelCollection(tblBoard _parent)
		{
			_BoardID_tblBoard = _parent;
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblChannelChanged(System.EventArgs e)
		{
			if (tblChannelChanged != null)
			{
				this.tblChannelChanged(this, e);
			}
		}
		
		[Description("Gets a  tblChannel from the collection.")]
		public tblChannel this[int index]
		{
			get
			{
				return ((tblChannel)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblChannelChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblChannel from the collection.")]
		public tblChannel Get(int index)
		{
			return ((tblChannel)(List[index]));
		}
		
		[Description("Adds a new tblChannel to the collection.")]
		public void Add(tblChannel item)
		{
			List.Add(item);
			this.OntblChannelChanged(EventArgs.Empty);
		}
		
		[Description("Removes a tblChannel from the collection.")]
		public void Remove(tblChannel item)
		{
			List.Remove(item);
			this.OntblChannelChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblChannel into the collection at the specified index.")]
		public void Insert(int index, tblChannel item)
		{
			List.Insert(index, item);
			this.OntblChannelChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblChannel class in the collection.")]
		public int IndexOf(tblChannel item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblChannel class is present in the collection.")]
		public bool Contains(tblChannel item)
		{
			return List.Contains(item);
		}
	}
}
