//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;
using System.Data.SqlClient;
using System.Drawing;
using System.Text;
using System.Windows.Forms;


namespace EWS.DCSTables
{
	
	
	public partial class tblDigital : Object
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblDigital.</remarks>
		internal static string SQL_Insert = @"INSERT INTO [tblDigital] ([VarNameID], [PointIndex], [SampleTime], [PointGroup], [FOR], [NR_EBL], [NR_TXT], [NR_AUD], [NR_TYP], [NR_PRN], [AB_EBL], [AB_TXT], [AB_AUD], [AB_TYP], [AB_PRN]) VALUES(@VarNameID, @PointIndex, @SampleTime, @PointGroup, @FOR, @NR_EBL, @NR_TXT, @NR_AUD, @NR_TYP, @NR_PRN, @AB_EBL, @AB_TXT, @AB_AUD, @AB_TYP, @AB_PRN) ; select last_insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblDigital, with the WHERE clause.</remarks>
		internal static string SQL_Update = @"UPDATE [tblDigital] SET [VarNameID] = @VarNameID, [PointIndex] = @PointIndex, [SampleTime] = @SampleTime, [PointGroup] = @PointGroup, [FOR] = @FOR, [NR_EBL] = @NR_EBL, [NR_TXT] = @NR_TXT, [NR_AUD] = @NR_AUD, [NR_TYP] = @NR_TYP, [NR_PRN] = @NR_PRN, [AB_EBL] = @AB_EBL, [AB_TXT] = @AB_TXT, [AB_AUD] = @AB_AUD, [AB_TYP] = @AB_TYP, [AB_PRN] = @AB_PRN WHERE [DigitalID]=@DigitalID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblDigital, with the WHERE clause.</remarks>
		internal static string SQL_Select = "SELECT [VarNameID], [PointIndex], [SampleTime], [PointGroup], [FOR], [NR_EBL], [N" +
			"R_TXT], [NR_AUD], [NR_TYP], [NR_PRN], [AB_EBL], [AB_TXT], [AB_AUD], [AB_TYP], [A" +
			"B_PRN] FROM [tblDigital] WHERE [DigitalID]=@DigitalID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblDigital, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblDigital] WHERE [DigitalID]=@DigitalID ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _VarNameID;
		
		[DisplayName("Var Name ID")]
		[Category("Foreign Key")]
		public long VarNameID
		{
			get
			{
				return _VarNameID;
			}
			set
			{
				_VarNameID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _DigitalID;
		
		[DisplayName("Digital ID")]
		[Category("Primary Key")]
		public long DigitalID
		{
			get
			{
				return _DigitalID;
			}
			set
			{
				_DigitalID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _PointIndex;
		
		[DisplayName("Point Index")]
		[Category("Column")]
		public int PointIndex
		{
			get
			{
				return _PointIndex;
			}
			set
			{
				_PointIndex = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _SampleTime;
		
		[DisplayName("Sample Time")]
		[Category("Column")]
		public int SampleTime
		{
			get
			{
				return _SampleTime;
			}
			set
			{
				_SampleTime = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _PointGroup;
		
		[DisplayName("Point Group")]
		[Category("Column")]
		public int PointGroup
		{
			get
			{
				return _PointGroup;
			}
			set
			{
				_PointGroup = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _FOR;
		
		[DisplayName("FOR")]
		[Category("Column")]
		public string FOR
		{
			get
			{
				return _FOR;
			}
			set
			{
				_FOR = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _NR_EBL;
		
		[DisplayName("NR_EBL")]
		[Category("Column")]
		public bool NR_EBL
		{
			get
			{
				return _NR_EBL;
			}
			set
			{
				_NR_EBL = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _NR_TXT;
		
		[DisplayName("NR_TXT")]
		[Category("Column")]
		public string NR_TXT
		{
			get
			{
				return _NR_TXT;
			}
			set
			{
				_NR_TXT = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _NR_AUD;
		
		[DisplayName("NR_AUD")]
		[Category("Column")]
		public int NR_AUD
		{
			get
			{
				return _NR_AUD;
			}
			set
			{
				_NR_AUD = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _NR_TYP;
		
		[DisplayName("NR_TYP")]
		[Category("Column")]
		public int NR_TYP
		{
			get
			{
				return _NR_TYP;
			}
			set
			{
				_NR_TYP = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _NR_PRN;
		
		[DisplayName("NR_PRN")]
		[Category("Column")]
		public int NR_PRN
		{
			get
			{
				return _NR_PRN;
			}
			set
			{
				_NR_PRN = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _AB_EBL;
		
		[DisplayName("AB_EBL")]
		[Category("Column")]
		public bool AB_EBL
		{
			get
			{
				return _AB_EBL;
			}
			set
			{
				_AB_EBL = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _AB_TXT;
		
		[DisplayName("AB_TXT")]
		[Category("Column")]
		public string AB_TXT
		{
			get
			{
				return _AB_TXT;
			}
			set
			{
				_AB_TXT = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _AB_AUD;
		
		[DisplayName("AB_AUD")]
		[Category("Column")]
		public int AB_AUD
		{
			get
			{
				return _AB_AUD;
			}
			set
			{
				_AB_AUD = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _AB_TYP;
		
		[DisplayName("AB_TYP")]
		[Category("Column")]
		public int AB_TYP
		{
			get
			{
				return _AB_TYP;
			}
			set
			{
				_AB_TYP = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _AB_PRN;
		
		[DisplayName("AB_PRN")]
		[Category("Column")]
		public int AB_PRN
		{
			get
			{
				return _AB_PRN;
			}
			set
			{
				_AB_PRN = value;
			}
		}
		#endregion
		
		#region Related Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblVariable _VarNameID_tblVariable;
		
		[Description("Represents the foreign key object of the type VarNameID")]
		public tblVariable m_VarNameID_tblVariable
		{
			get
			{
				return _VarNameID_tblVariable;
			}
			set
			{
				_VarNameID_tblVariable = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblDigital.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblDigital.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblDigital.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				DigitalID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblDigital.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public tblDigital()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID", VarNameID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@DigitalID", DigitalID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@PointIndex", PointIndex, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@SampleTime", SampleTime, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@PointGroup", PointGroup, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@FOR", FOR, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@NR_EBL", NR_EBL, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@NR_TXT", NR_TXT, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@NR_AUD", NR_AUD, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@NR_TYP", NR_TYP, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@NR_PRN", NR_PRN, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@AB_EBL", AB_EBL, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@AB_TXT", AB_TXT, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@AB_AUD", AB_AUD, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@AB_TYP", AB_TYP, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@AB_PRN", AB_PRN, DbType.Int32));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		private void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the VarNameID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID")) == false))
				{
					VarNameID = ((long)(Convert.ChangeType(rs["VarNameID"], typeof(long))));
				}
				// if value from the recordset, to the DigitalID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("DigitalID")) == false))
				{
					DigitalID = ((long)(Convert.ChangeType(rs["DigitalID"], typeof(long))));
				}
				// if value from the recordset, to the PointIndex _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("PointIndex")) == false))
				{
					PointIndex = ((int)(Convert.ChangeType(rs["PointIndex"], typeof(int))));
				}
				// if value from the recordset, to the SampleTime _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("SampleTime")) == false))
				{
					SampleTime = ((int)(Convert.ChangeType(rs["SampleTime"], typeof(int))));
				}
				// if value from the recordset, to the PointGroup _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("PointGroup")) == false))
				{
					PointGroup = ((int)(Convert.ChangeType(rs["PointGroup"], typeof(int))));
				}
				// if value from the recordset, to the FOR _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("FOR")) == false))
				{
					FOR = ((string)(Convert.ChangeType(rs["FOR"], typeof(string))));
				}
				// if value from the recordset, to the NR_EBL _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("NR_EBL")) == false))
				{
					NR_EBL = ((bool)(Convert.ChangeType(rs["NR_EBL"], typeof(bool))));
				}
				// if value from the recordset, to the NR_TXT _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("NR_TXT")) == false))
				{
					NR_TXT = ((string)(Convert.ChangeType(rs["NR_TXT"], typeof(string))));
				}
				// if value from the recordset, to the NR_AUD _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("NR_AUD")) == false))
				{
					NR_AUD = ((int)(Convert.ChangeType(rs["NR_AUD"], typeof(int))));
				}
				// if value from the recordset, to the NR_TYP _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("NR_TYP")) == false))
				{
					NR_TYP = ((int)(Convert.ChangeType(rs["NR_TYP"], typeof(int))));
				}
				// if value from the recordset, to the NR_PRN _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("NR_PRN")) == false))
				{
					NR_PRN = ((int)(Convert.ChangeType(rs["NR_PRN"], typeof(int))));
				}
				// if value from the recordset, to the AB_EBL _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("AB_EBL")) == false))
				{
					AB_EBL = ((bool)(Convert.ChangeType(rs["AB_EBL"], typeof(bool))));
				}
				// if value from the recordset, to the AB_TXT _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("AB_TXT")) == false))
				{
					AB_TXT = ((string)(Convert.ChangeType(rs["AB_TXT"], typeof(string))));
				}
				// if value from the recordset, to the AB_AUD _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("AB_AUD")) == false))
				{
					AB_AUD = ((int)(Convert.ChangeType(rs["AB_AUD"], typeof(int))));
				}
				// if value from the recordset, to the AB_TYP _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("AB_TYP")) == false))
				{
					AB_TYP = ((int)(Convert.ChangeType(rs["AB_TYP"], typeof(int))));
				}
				// if value from the recordset, to the AB_PRN _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("AB_PRN")) == false))
				{
					AB_PRN = ((int)(Convert.ChangeType(rs["AB_PRN"], typeof(int))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblDigitalChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblDigitalCollection : System.Collections.CollectionBase
	{
		
		/// <remarks>SQL Type:tblDigitalChangedEventHandler</remarks>
		public event tblDigitalChangedEventHandler tblDigitalChanged;
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblVariable _VarNameID_tblVariable;
		
		[Description("Represents the foreign key object of the type VarNameID")]
		public tblVariable m_VarNameID_tblVariable
		{
			get
			{
				return _VarNameID_tblVariable;
			}
			set
			{
				_VarNameID_tblVariable = value;
			}
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblDigitalChanged(System.EventArgs e)
		{
			if (tblDigitalChanged != null)
			{
				this.tblDigitalChanged(this, e);
			}
		}
		
		[Description("Gets a  tblDigital from the collection.")]
		public tblDigital this[int index]
		{
			get
			{
				return ((tblDigital)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblDigitalChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblDigital from the collection.")]
		public tblDigital Get(int index)
		{
			return ((tblDigital)(List[index]));
		}
		
		[Description("Adds a new tblDigital to the collection.")]
		public int Add(tblDigital item)
		{
			int newindex = List.Add(item);
			this.OntblDigitalChanged(EventArgs.Empty);
			return newindex;
		}
		
		[Description("Removes a tblDigital from the collection.")]
		public void Remove(tblDigital item)
		{
			List.Remove(item);
			this.OntblDigitalChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblDigital into the collection at the specified index.")]
		public void Insert(int index, tblDigital item)
		{
			List.Insert(index, item);
			this.OntblDigitalChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblDigital class in the collection.")]
		public int IndexOf(tblDigital item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblDigital class is present in the collection.")]
		public bool Contains(tblDigital item)
		{
			return List.Contains(item);
		}
	}
}
