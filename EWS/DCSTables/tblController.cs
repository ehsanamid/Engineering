//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;


namespace DCS.DCSTables
{


    public partial class tblController : SQLiteTable
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblController.</remarks>
		internal static string SQL_Insert = @"INSERT INTO [tblController] ([ControllerName], [SolutionID], [NodeNumber], [oIndex], [Description], [Redundant], [TargetType], [NumberOfIORack], [DIGID], [HW1DIGID], [HW2DIGID], [IP1_1DIGID], [IP1_2DIGID], [IP2_1DIGID], [IP2_2DIGID], [type], [redundantnet], [NetNo]) VALUES(@ControllerName, @SolutionID, @NodeNumber, @oIndex, @Description, @Redundant, @TargetType, @NumberOfIORack, @DIGID, @HW1DIGID, @HW2DIGID, @IP1_1DIGID, @IP1_2DIGID, @IP2_1DIGID, @IP2_2DIGID, @type, @redundantnet, @NetNo) ; select last_insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblController, with the WHERE clause.</remarks>
		internal static string SQL_Update = @"UPDATE [tblController] SET [ControllerName] = @ControllerName, [SolutionID] = @SolutionID, [NodeNumber] = @NodeNumber, [oIndex] = @oIndex, [Description] = @Description, [Redundant] = @Redundant, [TargetType] = @TargetType, [NumberOfIORack] = @NumberOfIORack, [DIGID] = @DIGID, [HW1DIGID] = @HW1DIGID, [HW2DIGID] = @HW2DIGID, [IP1_1DIGID] = @IP1_1DIGID, [IP1_2DIGID] = @IP1_2DIGID, [IP2_1DIGID] = @IP2_1DIGID, [IP2_2DIGID] = @IP2_2DIGID, [type] = @type, [redundantnet] = @redundantnet, [NetNo] = @NetNo WHERE [ControllerID]=@ControllerID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblController, with the WHERE clause.</remarks>
		internal static string SQL_Select = @"SELECT [ControllerName], [SolutionID], [NodeNumber], [oIndex], [Description], [Redundant], [TargetType], [NumberOfIORack], [DIGID], [HW1DIGID], [HW2DIGID], [IP1_1DIGID], [IP1_2DIGID], [IP2_1DIGID], [IP2_2DIGID], [type], [redundantnet], [NetNo] FROM [tblController] WHERE [ControllerID]=@ControllerID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblController, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblController] WHERE [ControllerID]=@ControllerID ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.String</remarks>
		private string _ControllerName = "";
		
		[DisplayName("Controller Name")]
		[Category("Column")]
		public string ControllerName
		{
			get
			{
				return _ControllerName;
			}
			set
			{
				_ControllerName = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _ControllerID = -1;
		
		[DisplayName("Controller ID")]
		[Category("Primary Key")]
		public long ControllerID
		{
			get
			{
				return _ControllerID;
			}
			set
			{
				_ControllerID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _SolutionID = -1;
		
		[DisplayName("Solution ID")]
		[Category("Foreign Key")]
		public long SolutionID
		{
			get
			{
				return _SolutionID;
			}
			set
			{
				_SolutionID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _NodeNumber;
		
		[DisplayName("Node Number")]
		[Category("Column")]
		public short NodeNumber
		{
			get
			{
				return _NodeNumber;
			}
			set
			{
				_NodeNumber = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _oIndex;
		
		[DisplayName("o Index")]
		[Category("Column")]
		public int oIndex
		{
			get
			{
				return _oIndex;
			}
			set
			{
				_oIndex = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Description = "";
		
		[DisplayName("Description")]
		[Category("Column")]
		public string Description
		{
			get
			{
				return _Description;
			}
			set
			{
				_Description = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _Redundant;
		
		[DisplayName("Redundant")]
		[Category("Column")]
		public bool Redundant
		{
			get
			{
				return _Redundant;
			}
			set
			{
				_Redundant = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _TargetType;
		
		[DisplayName("Target Type")]
		[Category("Column")]
		public int TargetType
		{
			get
			{
				return _TargetType;
			}
			set
			{
				_TargetType = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _NumberOfIORack;
		
		[DisplayName("Number Of IORack")]
		[Category("Column")]
		public int NumberOfIORack
		{
			get
			{
				return _NumberOfIORack;
			}
			set
			{
				_NumberOfIORack = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _DIGID;
		
		[DisplayName("DIGID")]
		[Category("Column")]
		public int DIGID
		{
			get
			{
				return _DIGID;
			}
			set
			{
				_DIGID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _HW1DIGID;
		
		[DisplayName("HW1 DIGID")]
		[Category("Column")]
		public int HW1DIGID
		{
			get
			{
				return _HW1DIGID;
			}
			set
			{
				_HW1DIGID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _HW2DIGID;
		
		[DisplayName("HW2 DIGID")]
		[Category("Column")]
		public int HW2DIGID
		{
			get
			{
				return _HW2DIGID;
			}
			set
			{
				_HW2DIGID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _IP1_1DIGID;
		
		[DisplayName("IP1_1 DIGID")]
		[Category("Column")]
		public int IP1_1DIGID
		{
			get
			{
				return _IP1_1DIGID;
			}
			set
			{
				_IP1_1DIGID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _IP1_2DIGID;
		
		[DisplayName("IP1_2 DIGID")]
		[Category("Column")]
		public int IP1_2DIGID
		{
			get
			{
				return _IP1_2DIGID;
			}
			set
			{
				_IP1_2DIGID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _IP2_1DIGID;
		
		[DisplayName("IP2_1 DIGID")]
		[Category("Column")]
		public int IP2_1DIGID
		{
			get
			{
				return _IP2_1DIGID;
			}
			set
			{
				_IP2_1DIGID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _IP2_2DIGID;
		
		[DisplayName("IP2_2 DIGID")]
		[Category("Column")]
		public int IP2_2DIGID
		{
			get
			{
				return _IP2_2DIGID;
			}
			set
			{
				_IP2_2DIGID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _type;
		
		[DisplayName("type")]
		[Category("Column")]
		public int type
		{
			get
			{
				return _type;
			}
			set
			{
				_type = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _redundantnet;
		
		[DisplayName("redundantnet")]
		[Category("Column")]
		public bool redundantnet
		{
			get
			{
				return _redundantnet;
			}
			set
			{
				_redundantnet = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _NetNo;
		
		[DisplayName("Net No")]
		[Category("Column")]
		public int NetNo
		{
			get
			{
				return _NetNo;
			}
			set
			{
				_NetNo = value;
			}
		}
		#endregion
		
		#region Related Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblSolution _SolutionID_tblSolution;
		
		[Description("Represents the foreign key object of the type SolutionID")]
		public tblSolution m_SolutionID_tblSolution
		{
			get
			{
				return _SolutionID_tblSolution;
			}
			set
			{
				_SolutionID_tblSolution = value;
			}
		}
		#endregion
		
		#region Collection Objects
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblBoardCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblBoardCollection _tblBoardCollection;
		
		[Description("Represents the foreign key object of the type ControllerID")]
		public tblBoardCollection m_tblBoardCollection
		{
			get
			{
              lock(_tblBoardCollectionLock)
              {
				if (_tblBoardCollection == null)
				{
					_tblBoardCollection =  new tblBoardCollection(this);
					_tblBoardCollection.Load();
				}
				return _tblBoardCollection;
              }
			}
			set
			{
				_tblBoardCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblModbusClientCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblModbusClientCollection _tblModbusClientCollection;
		
		[Description("Represents the foreign key object of the type ControllerID")]
		public tblModbusClientCollection m_tblModbusClientCollection
		{
			get
			{
              lock(_tblModbusClientCollectionLock)
              {
				if (_tblModbusClientCollection == null)
				{
					_tblModbusClientCollection =  new tblModbusClientCollection(this);
					_tblModbusClientCollection.Load();
				}
				return _tblModbusClientCollection;
              }
			}
			set
			{
				_tblModbusClientCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblModbusServerCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblModbusServerCollection _tblModbusServerCollection;
		
		[Description("Represents the foreign key object of the type ControllerID")]
		public tblModbusServerCollection m_tblModbusServerCollection
		{
			get
			{
              lock(_tblModbusServerCollectionLock)
              {
				if (_tblModbusServerCollection == null)
				{
					_tblModbusServerCollection =  new tblModbusServerCollection(this);
					_tblModbusServerCollection.Load();
				}
				return _tblModbusServerCollection;
              }
			}
			set
			{
				_tblModbusServerCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblPouCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblPouCollection _tblPouCollection;
		
		[Description("Represents the foreign key object of the type ControllerID")]
		public tblPouCollection m_tblPouCollection
		{
			get
			{
              lock(_tblPouCollectionLock)
              {
				if (_tblPouCollection == null)
				{
					_tblPouCollection =  new tblPouCollection(this);
					_tblPouCollection.Load();
				}
				return _tblPouCollection;
              }
			}
			set
			{
				_tblPouCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblUserAccessCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblUserAccessCollection _tblUserAccessCollection;
		
		[Description("Represents the foreign key object of the type ControllerID")]
		public tblUserAccessCollection m_tblUserAccessCollection
		{
			get
			{
              lock(_tblUserAccessCollectionLock)
              {
				if (_tblUserAccessCollection == null)
				{
					_tblUserAccessCollection =  new tblUserAccessCollection(this);
					_tblUserAccessCollection.Load();
				}
				return _tblUserAccessCollection;
              }
			}
			set
			{
				_tblUserAccessCollection = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblController.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblController.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblController.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				ControllerID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblController.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public tblController()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@ControllerName", ControllerName, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@ControllerID", ControllerID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@SolutionID", SolutionID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@NodeNumber", NodeNumber, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@oIndex", oIndex, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Description", Description, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Redundant", Redundant, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@TargetType", TargetType, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@NumberOfIORack", NumberOfIORack, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@DIGID", DIGID, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@HW1DIGID", HW1DIGID, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@HW2DIGID", HW2DIGID, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@IP1_1DIGID", IP1_1DIGID, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@IP1_2DIGID", IP1_2DIGID, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@IP2_1DIGID", IP2_1DIGID, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@IP2_2DIGID", IP2_2DIGID, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@type", type, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@redundantnet", redundantnet, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@NetNo", NetNo, DbType.Int32));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		public void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the ControllerName _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ControllerName")) == false))
				{
					ControllerName = ((string)(Convert.ChangeType(rs["ControllerName"], typeof(string))));
				}
				// if value from the recordset, to the ControllerID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ControllerID")) == false))
				{
					ControllerID = ((long)(Convert.ChangeType(rs["ControllerID"], typeof(long))));
				}
				// if value from the recordset, to the SolutionID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("SolutionID")) == false))
				{
					SolutionID = ((long)(Convert.ChangeType(rs["SolutionID"], typeof(long))));
				}
				// if value from the recordset, to the NodeNumber _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("NodeNumber")) == false))
				{
					NodeNumber = ((short)(Convert.ChangeType(rs["NodeNumber"], typeof(short))));
				}
				// if value from the recordset, to the oIndex _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("oIndex")) == false))
				{
					oIndex = ((int)(Convert.ChangeType(rs["oIndex"], typeof(int))));
				}
				// if value from the recordset, to the Description _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Description")) == false))
				{
					Description = ((string)(Convert.ChangeType(rs["Description"], typeof(string))));
				}
				// if value from the recordset, to the Redundant _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Redundant")) == false))
				{
					Redundant = ((bool)(Convert.ChangeType(rs["Redundant"], typeof(bool))));
				}
				// if value from the recordset, to the TargetType _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("TargetType")) == false))
				{
					TargetType = ((int)(Convert.ChangeType(rs["TargetType"], typeof(int))));
				}
				// if value from the recordset, to the NumberOfIORack _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("NumberOfIORack")) == false))
				{
					NumberOfIORack = ((int)(Convert.ChangeType(rs["NumberOfIORack"], typeof(int))));
				}
				// if value from the recordset, to the DIGID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("DIGID")) == false))
				{
					DIGID = ((int)(Convert.ChangeType(rs["DIGID"], typeof(int))));
				}
				// if value from the recordset, to the HW1DIGID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("HW1DIGID")) == false))
				{
					HW1DIGID = ((int)(Convert.ChangeType(rs["HW1DIGID"], typeof(int))));
				}
				// if value from the recordset, to the HW2DIGID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("HW2DIGID")) == false))
				{
					HW2DIGID = ((int)(Convert.ChangeType(rs["HW2DIGID"], typeof(int))));
				}
				// if value from the recordset, to the IP1_1DIGID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("IP1_1DIGID")) == false))
				{
					IP1_1DIGID = ((int)(Convert.ChangeType(rs["IP1_1DIGID"], typeof(int))));
				}
				// if value from the recordset, to the IP1_2DIGID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("IP1_2DIGID")) == false))
				{
					IP1_2DIGID = ((int)(Convert.ChangeType(rs["IP1_2DIGID"], typeof(int))));
				}
				// if value from the recordset, to the IP2_1DIGID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("IP2_1DIGID")) == false))
				{
					IP2_1DIGID = ((int)(Convert.ChangeType(rs["IP2_1DIGID"], typeof(int))));
				}
				// if value from the recordset, to the IP2_2DIGID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("IP2_2DIGID")) == false))
				{
					IP2_2DIGID = ((int)(Convert.ChangeType(rs["IP2_2DIGID"], typeof(int))));
				}
				// if value from the recordset, to the type _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("type")) == false))
				{
					type = ((int)(Convert.ChangeType(rs["type"], typeof(int))));
				}
				// if value from the recordset, to the redundantnet _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("redundantnet")) == false))
				{
					redundantnet = ((bool)(Convert.ChangeType(rs["redundantnet"], typeof(bool))));
				}
				// if value from the recordset, to the NetNo _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("NetNo")) == false))
				{
					NetNo = ((int)(Convert.ChangeType(rs["NetNo"], typeof(int))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		
		public override void AddFromString(string[] _strs, string arg1, ref string _log)
		{
			try
			{
				this.PreAddFromString(ref _log);
				int i;
				i = this.ColumnExistInHeader("ControllerName");
				if ((i >= 0))
				{
					ControllerName = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("SolutionID");
				if ((i >= 0))
				{
					SolutionID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("NodeNumber");
				if ((i >= 0))
				{
					NodeNumber = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("oIndex");
				if ((i >= 0))
				{
					oIndex = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Description");
				if ((i >= 0))
				{
					Description = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Redundant");
				if ((i >= 0))
				{
					Redundant = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("TargetType");
				if ((i >= 0))
				{
					TargetType = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("NumberOfIORack");
				if ((i >= 0))
				{
					NumberOfIORack = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("DIGID");
				if ((i >= 0))
				{
					DIGID = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("HW1DIGID");
				if ((i >= 0))
				{
					HW1DIGID = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("HW2DIGID");
				if ((i >= 0))
				{
					HW2DIGID = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("IP1_1DIGID");
				if ((i >= 0))
				{
					IP1_1DIGID = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("IP1_2DIGID");
				if ((i >= 0))
				{
					IP1_2DIGID = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("IP2_1DIGID");
				if ((i >= 0))
				{
					IP2_1DIGID = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("IP2_2DIGID");
				if ((i >= 0))
				{
					IP2_2DIGID = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("type");
				if ((i >= 0))
				{
					type = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("redundantnet");
				if ((i >= 0))
				{
					redundantnet = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("NetNo");
				if ((i >= 0))
				{
					NetNo = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				this.PostAddFromString(ref _log);
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblControllerChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblControllerCollection : SQLiteTableCollection
	{
		
		/// <remarks>SQL Type:tblControllerChangedEventHandler</remarks>
		public event tblControllerChangedEventHandler tblControllerChanged;
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblSolution _SolutionID_tblSolution;
		
		[Description("Represents the foreign key object of the type SolutionID")]
		public tblSolution m_SolutionID_tblSolution
		{
			get
			{
				return _SolutionID_tblSolution;
			}
			set
			{
				_SolutionID_tblSolution = value;
			}
		}
		
		[Description("Constructor")]
		public tblControllerCollection(tblSolution _parent)
		{
			_SolutionID_tblSolution = _parent;
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblControllerChanged(System.EventArgs e)
		{
			if (tblControllerChanged != null)
			{
				this.tblControllerChanged(this, e);
			}
		}
		
		[Description("Gets a  tblController from the collection.")]
		public tblController this[int index]
		{
			get
			{
				return ((tblController)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblControllerChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblController from the collection.")]
		public tblController Get(int index)
		{
			return ((tblController)(List[index]));
		}
		
		[Description("Adds a new tblController to the collection.")]
		public void Add(tblController item)
		{
			List.Add(item);
			this.OntblControllerChanged(EventArgs.Empty);
		}
		
		[Description("Removes a tblController from the collection.")]
		public void Remove(tblController item)
		{
			List.Remove(item);
			this.OntblControllerChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblController into the collection at the specified index.")]
		public void Insert(int index, tblController item)
		{
			List.Insert(index, item);
			this.OntblControllerChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblController class in the collection.")]
		public int IndexOf(tblController item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblController class is present in the collection.")]
		public bool Contains(tblController item)
		{
			return List.Contains(item);
		}
	}
}
