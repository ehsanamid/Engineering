//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;
using System.Data.SqlClient;
using System.Drawing;
using System.Text;
using System.Windows.Forms;


namespace EWS.DCSTables
{
	
	
	public partial class tblDomain : Object
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblDomain.</remarks>
		internal static string SQL_Insert = "INSERT INTO [tblDomain] ([DomainName], [Description], [DomainNo], [oIndex], [Solu" +
			"tionName], [SolutionID]) VALUES(@DomainName, @Description, @DomainNo, @oIndex, @" +
			"SolutionName, @SolutionID) ; select last_insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblDomain, with the WHERE clause.</remarks>
		internal static string SQL_Update = "UPDATE [tblDomain] SET [DomainName] = @DomainName, [Description] = @Description, " +
			"[DomainNo] = @DomainNo, [oIndex] = @oIndex, [SolutionName] = @SolutionName, [Sol" +
			"utionID] = @SolutionID WHERE [DomainID]=@DomainID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblDomain, with the WHERE clause.</remarks>
		internal static string SQL_Select = "SELECT [DomainName], [Description], [DomainNo], [oIndex], [SolutionName], [Soluti" +
			"onID] FROM [tblDomain] WHERE [DomainID]=@DomainID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblDomain, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblDomain] WHERE [DomainID]=@DomainID ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.String</remarks>
		private string _DomainName;
		
		[DisplayName("Domain Name")]
		[Category("Column")]
		public string DomainName
		{
			get
			{
				return _DomainName;
			}
			set
			{
				_DomainName = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _DomainID;
		
		[DisplayName("Domain ID")]
		[Category("Primary Key")]
		public long DomainID
		{
			get
			{
				return _DomainID;
			}
			set
			{
				_DomainID = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Description;
		
		[DisplayName("Description")]
		[Category("Column")]
		public string Description
		{
			get
			{
				return _Description;
			}
			set
			{
				_Description = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _DomainNo;
		
		[DisplayName("Domain No")]
		[Category("Column")]
		public int DomainNo
		{
			get
			{
				return _DomainNo;
			}
			set
			{
				_DomainNo = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _oIndex;
		
		[DisplayName("o Index")]
		[Category("Column")]
		public int oIndex
		{
			get
			{
				return _oIndex;
			}
			set
			{
				_oIndex = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _SolutionName;
		
		[DisplayName("Solution Name")]
		[Category("Column")]
		public string SolutionName
		{
			get
			{
				return _SolutionName;
			}
			set
			{
				_SolutionName = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _SolutionID;
		
		[DisplayName("Solution ID")]
		[Category("Foreign Key")]
		public long SolutionID
		{
			get
			{
				return _SolutionID;
			}
			set
			{
				_SolutionID = value;
			}
		}
		#endregion
		
		#region Related Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblSolution _SolutionID_tblSolution;
		
		[Description("Represents the foreign key object of the type SolutionID")]
		public tblSolution m_SolutionID_tblSolution
		{
			get
			{
				return _SolutionID_tblSolution;
			}
			set
			{
				_SolutionID_tblSolution = value;
			}
		}
		#endregion
		
		#region Collection Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblControllerCollection _tblControllerCollection;
		
		[Description("Represents the foreign key object of the type DomainID")]
		public tblControllerCollection m_tblControllerCollection
		{
			get
			{
				if (_tblControllerCollection == null)
				{
					_tblControllerCollection =  new tblControllerCollection(this);
					_tblControllerCollection.Load();
				}
				return _tblControllerCollection;
			}
			set
			{
				_tblControllerCollection = value;
			}
		}
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblDisplayCollection _tblDisplayCollection;
		
		[Description("Represents the foreign key object of the type DomainID")]
		public tblDisplayCollection m_tblDisplayCollection
		{
			get
			{
				if (_tblDisplayCollection == null)
				{
					_tblDisplayCollection =  new tblDisplayCollection(this);
					_tblDisplayCollection.Load();
				}
				return _tblDisplayCollection;
			}
			set
			{
				_tblDisplayCollection = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblDomain.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return rowseffected;
			}
			catch (System.Exception )
			{
				throw;
			}
		}
		
		public void Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblDomain.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
			}
			catch (System.Exception )
			{
				throw;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblDomain.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				DomainID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SqlException ex)
			{
				throw;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblDomain.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return rowseffected;
			}
			catch (System.Exception )
			{
				throw;
			}
		}
		
		public tblDomain()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@DomainName", DomainName, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@DomainID", DomainID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Description", Description, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@DomainNo", DomainNo, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@oIndex", oIndex, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@SolutionName", SolutionName, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@SolutionID", SolutionID, DbType.Int64));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		private void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the DomainName _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("DomainName")) == false))
				{
					DomainName = ((string)(Convert.ChangeType(rs["DomainName"], typeof(string))));
				}
				// if value from the recordset, to the DomainID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("DomainID")) == false))
				{
					DomainID = ((long)(Convert.ChangeType(rs["DomainID"], typeof(long))));
				}
				// if value from the recordset, to the Description _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Description")) == false))
				{
					Description = ((string)(Convert.ChangeType(rs["Description"], typeof(string))));
				}
				// if value from the recordset, to the DomainNo _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("DomainNo")) == false))
				{
					DomainNo = ((int)(Convert.ChangeType(rs["DomainNo"], typeof(int))));
				}
				// if value from the recordset, to the oIndex _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("oIndex")) == false))
				{
					oIndex = ((int)(Convert.ChangeType(rs["oIndex"], typeof(int))));
				}
				// if value from the recordset, to the SolutionName _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("SolutionName")) == false))
				{
					SolutionName = ((string)(Convert.ChangeType(rs["SolutionName"], typeof(string))));
				}
				// if value from the recordset, to the SolutionID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("SolutionID")) == false))
				{
					SolutionID = ((long)(Convert.ChangeType(rs["SolutionID"], typeof(long))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblDomainChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblDomainCollection : System.Collections.CollectionBase
	{
		
		/// <remarks>SQL Type:tblDomainChangedEventHandler</remarks>
		public event tblDomainChangedEventHandler tblDomainChanged;
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblSolution _SolutionID_tblSolution;
		
		[Description("Represents the foreign key object of the type SolutionID")]
		public tblSolution m_SolutionID_tblSolution
		{
			get
			{
				return _SolutionID_tblSolution;
			}
			set
			{
				_SolutionID_tblSolution = value;
			}
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblDomainChanged(System.EventArgs e)
		{
			if (tblDomainChanged != null)
			{
				this.tblDomainChanged(this, e);
			}
		}
		
		[Description("Gets a  tblDomain from the collection.")]
		public tblDomain this[int index]
		{
			get
			{
				return ((tblDomain)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblDomainChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblDomain from the collection.")]
		public tblDomain Get(int index)
		{
			return ((tblDomain)(List[index]));
		}
		
		[Description("Adds a new tblDomain to the collection.")]
		public int Add(tblDomain item)
		{
			int newindex = List.Add(item);
			this.OntblDomainChanged(EventArgs.Empty);
			return newindex;
		}
		
		[Description("Removes a tblDomain from the collection.")]
		public void Remove(tblDomain item)
		{
			List.Remove(item);
			this.OntblDomainChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblDomain into the collection at the specified index.")]
		public void Insert(int index, tblDomain item)
		{
			List.Insert(index, item);
			this.OntblDomainChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblDomain class in the collection.")]
		public int IndexOf(tblDomain item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblDomain class is present in the collection.")]
		public bool Contains(tblDomain item)
		{
			return List.Contains(item);
		}
	}
}
