//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;


namespace DCS.DCSTables
{


    public partial class tblModbusClient : SQLiteTable
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblModbusClient.</remarks>
		internal static string SQL_Insert = @"INSERT INTO [tblModbusClient] ([ControllerID], [NoOfLink], [SlaveNo], [StaNo], [Placement], [Dig1], [Dig2], [DigIndex1], [DigIndex2], [DigType1], [DigType2]) VALUES(@ControllerID, @NoOfLink, @SlaveNo, @StaNo, @Placement, @Dig1, @Dig2, @DigIndex1, @DigIndex2, @DigType1, @DigType2) ; select last_insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblModbusClient, with the WHERE clause.</remarks>
		internal static string SQL_Update = @"UPDATE [tblModbusClient] SET [ControllerID] = @ControllerID, [NoOfLink] = @NoOfLink, [SlaveNo] = @SlaveNo, [StaNo] = @StaNo, [Placement] = @Placement, [Dig1] = @Dig1, [Dig2] = @Dig2, [DigIndex1] = @DigIndex1, [DigIndex2] = @DigIndex2, [DigType1] = @DigType1, [DigType2] = @DigType2 WHERE [ModbusClientID]=@ModbusClientID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblModbusClient, with the WHERE clause.</remarks>
		internal static string SQL_Select = "SELECT [ControllerID], [NoOfLink], [SlaveNo], [StaNo], [Placement], [Dig1], [Dig2" +
			"], [DigIndex1], [DigIndex2], [DigType1], [DigType2] FROM [tblModbusClient] WHERE" +
			" [ModbusClientID]=@ModbusClientID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblModbusClient, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblModbusClient] WHERE [ModbusClientID]=@ModbusClientID ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _ModbusClientID = -1;
		
		[DisplayName("Modbus Client ID")]
		[Category("Primary Key")]
		public long ModbusClientID
		{
			get
			{
				return _ModbusClientID;
			}
			set
			{
				_ModbusClientID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _ControllerID = -1;
		
		[DisplayName("Controller ID")]
		[Category("Foreign Key")]
		public long ControllerID
		{
			get
			{
				return _ControllerID;
			}
			set
			{
				_ControllerID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _NoOfLink;
		
		[DisplayName("No Of Link")]
		[Category("Column")]
		public short NoOfLink
		{
			get
			{
				return _NoOfLink;
			}
			set
			{
				_NoOfLink = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _SlaveNo;
		
		[DisplayName("Slave No")]
		[Category("Column")]
		public short SlaveNo
		{
			get
			{
				return _SlaveNo;
			}
			set
			{
				_SlaveNo = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _StaNo;
		
		[DisplayName("Sta No")]
		[Category("Column")]
		public short StaNo
		{
			get
			{
				return _StaNo;
			}
			set
			{
				_StaNo = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _Placement;
		
		[DisplayName("Placement")]
		[Category("Column")]
		public short Placement
		{
			get
			{
				return _Placement;
			}
			set
			{
				_Placement = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Dig1 = "";
		
		[DisplayName("Dig 1")]
		[Category("Column")]
		public string Dig1
		{
			get
			{
				return _Dig1;
			}
			set
			{
				_Dig1 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Dig2 = "";
		
		[DisplayName("Dig 2")]
		[Category("Column")]
		public string Dig2
		{
			get
			{
				return _Dig2;
			}
			set
			{
				_Dig2 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _DigIndex1;
		
		[DisplayName("Dig Index 1")]
		[Category("Column")]
		public short DigIndex1
		{
			get
			{
				return _DigIndex1;
			}
			set
			{
				_DigIndex1 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _DigIndex2;
		
		[DisplayName("Dig Index 2")]
		[Category("Column")]
		public short DigIndex2
		{
			get
			{
				return _DigIndex2;
			}
			set
			{
				_DigIndex2 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _DigType1;
		
		[DisplayName("Dig Type 1")]
		[Category("Column")]
		public short DigType1
		{
			get
			{
				return _DigType1;
			}
			set
			{
				_DigType1 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _DigType2;
		
		[DisplayName("Dig Type 2")]
		[Category("Column")]
		public short DigType2
		{
			get
			{
				return _DigType2;
			}
			set
			{
				_DigType2 = value;
			}
		}
		#endregion
		
		#region Related Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblController _ControllerID_tblController;
		
		[Description("Represents the foreign key object of the type ControllerID")]
		public tblController m_ControllerID_tblController
		{
			get
			{
				return _ControllerID_tblController;
			}
			set
			{
				_ControllerID_tblController = value;
			}
		}
		#endregion
		
		#region Collection Objects
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblModbusClientDataCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblModbusClientDataCollection _tblModbusClientDataCollection;
		
		[Description("Represents the foreign key object of the type MobusClientID")]
		public tblModbusClientDataCollection m_tblModbusClientDataCollection
		{
			get
			{
              lock(_tblModbusClientDataCollectionLock)
              {
				if (_tblModbusClientDataCollection == null)
				{
					_tblModbusClientDataCollection =  new tblModbusClientDataCollection(this);
					_tblModbusClientDataCollection.Load();
				}
				return _tblModbusClientDataCollection;
              }
			}
			set
			{
				_tblModbusClientDataCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblModbusClientMapCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblModbusClientMapCollection _tblModbusClientMapCollection;
		
		[Description("Represents the foreign key object of the type ModbusClientID")]
		public tblModbusClientMapCollection m_tblModbusClientMapCollection
		{
			get
			{
              lock(_tblModbusClientMapCollectionLock)
              {
				if (_tblModbusClientMapCollection == null)
				{
					_tblModbusClientMapCollection =  new tblModbusClientMapCollection(this);
					_tblModbusClientMapCollection.Load();
				}
				return _tblModbusClientMapCollection;
              }
			}
			set
			{
				_tblModbusClientMapCollection = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblModbusClient.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblModbusClient.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblModbusClient.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				ModbusClientID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblModbusClient.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public tblModbusClient()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@ModbusClientID", ModbusClientID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@ControllerID", ControllerID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@NoOfLink", NoOfLink, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@SlaveNo", SlaveNo, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@StaNo", StaNo, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Placement", Placement, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Dig1", Dig1, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Dig2", Dig2, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@DigIndex1", DigIndex1, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@DigIndex2", DigIndex2, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@DigType1", DigType1, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@DigType2", DigType2, DbType.Int16));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		public void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the ModbusClientID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ModbusClientID")) == false))
				{
					ModbusClientID = ((long)(Convert.ChangeType(rs["ModbusClientID"], typeof(long))));
				}
				// if value from the recordset, to the ControllerID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ControllerID")) == false))
				{
					ControllerID = ((long)(Convert.ChangeType(rs["ControllerID"], typeof(long))));
				}
				// if value from the recordset, to the NoOfLink _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("NoOfLink")) == false))
				{
					NoOfLink = ((short)(Convert.ChangeType(rs["NoOfLink"], typeof(short))));
				}
				// if value from the recordset, to the SlaveNo _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("SlaveNo")) == false))
				{
					SlaveNo = ((short)(Convert.ChangeType(rs["SlaveNo"], typeof(short))));
				}
				// if value from the recordset, to the StaNo _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("StaNo")) == false))
				{
					StaNo = ((short)(Convert.ChangeType(rs["StaNo"], typeof(short))));
				}
				// if value from the recordset, to the Placement _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Placement")) == false))
				{
					Placement = ((short)(Convert.ChangeType(rs["Placement"], typeof(short))));
				}
				// if value from the recordset, to the Dig1 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Dig1")) == false))
				{
					Dig1 = ((string)(Convert.ChangeType(rs["Dig1"], typeof(string))));
				}
				// if value from the recordset, to the Dig2 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Dig2")) == false))
				{
					Dig2 = ((string)(Convert.ChangeType(rs["Dig2"], typeof(string))));
				}
				// if value from the recordset, to the DigIndex1 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("DigIndex1")) == false))
				{
					DigIndex1 = ((short)(Convert.ChangeType(rs["DigIndex1"], typeof(short))));
				}
				// if value from the recordset, to the DigIndex2 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("DigIndex2")) == false))
				{
					DigIndex2 = ((short)(Convert.ChangeType(rs["DigIndex2"], typeof(short))));
				}
				// if value from the recordset, to the DigType1 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("DigType1")) == false))
				{
					DigType1 = ((short)(Convert.ChangeType(rs["DigType1"], typeof(short))));
				}
				// if value from the recordset, to the DigType2 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("DigType2")) == false))
				{
					DigType2 = ((short)(Convert.ChangeType(rs["DigType2"], typeof(short))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		
		public override void AddFromString(string[] _strs, string arg1, ref string _log)
		{
			try
			{
				this.PreAddFromString(ref _log);
				int i;
				i = this.ColumnExistInHeader("ControllerID");
				if ((i >= 0))
				{
					ControllerID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("NoOfLink");
				if ((i >= 0))
				{
					NoOfLink = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("SlaveNo");
				if ((i >= 0))
				{
					SlaveNo = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("StaNo");
				if ((i >= 0))
				{
					StaNo = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("Placement");
				if ((i >= 0))
				{
					Placement = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("Dig1");
				if ((i >= 0))
				{
					Dig1 = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Dig2");
				if ((i >= 0))
				{
					Dig2 = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("DigIndex1");
				if ((i >= 0))
				{
					DigIndex1 = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("DigIndex2");
				if ((i >= 0))
				{
					DigIndex2 = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("DigType1");
				if ((i >= 0))
				{
					DigType1 = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("DigType2");
				if ((i >= 0))
				{
					DigType2 = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				this.PostAddFromString(ref _log);
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblModbusClientChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblModbusClientCollection : SQLiteTableCollection
	{
		
		/// <remarks>SQL Type:tblModbusClientChangedEventHandler</remarks>
		public event tblModbusClientChangedEventHandler tblModbusClientChanged;
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblController _ControllerID_tblController;
		
		[Description("Represents the foreign key object of the type ControllerID")]
		public tblController m_ControllerID_tblController
		{
			get
			{
				return _ControllerID_tblController;
			}
			set
			{
				_ControllerID_tblController = value;
			}
		}
		
		[Description("Constructor")]
		public tblModbusClientCollection(tblController _parent)
		{
			_ControllerID_tblController = _parent;
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblModbusClientChanged(System.EventArgs e)
		{
			if (tblModbusClientChanged != null)
			{
				this.tblModbusClientChanged(this, e);
			}
		}
		
		[Description("Gets a  tblModbusClient from the collection.")]
		public tblModbusClient this[int index]
		{
			get
			{
				return ((tblModbusClient)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblModbusClientChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblModbusClient from the collection.")]
		public tblModbusClient Get(int index)
		{
			return ((tblModbusClient)(List[index]));
		}
		
		[Description("Adds a new tblModbusClient to the collection.")]
		public void Add(tblModbusClient item)
		{
			List.Add(item);
			this.OntblModbusClientChanged(EventArgs.Empty);
		}
		
		[Description("Removes a tblModbusClient from the collection.")]
		public void Remove(tblModbusClient item)
		{
			List.Remove(item);
			this.OntblModbusClientChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblModbusClient into the collection at the specified index.")]
		public void Insert(int index, tblModbusClient item)
		{
			List.Insert(index, item);
			this.OntblModbusClientChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblModbusClient class in the collection.")]
		public int IndexOf(tblModbusClient item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblModbusClient class is present in the collection.")]
		public bool Contains(tblModbusClient item)
		{
			return List.Contains(item);
		}
	}
}
