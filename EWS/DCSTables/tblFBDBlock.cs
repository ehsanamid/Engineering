//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;


namespace DCS.DCSTables
{


    public partial class tblFBDBlock : SQLiteTable
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblFBDBlock.</remarks>
		internal static string SQL_Insert = @"INSERT INTO [tblFBDBlock] ([pouID], [FunctionID], [FunctionName], [VarpouID], [VarNameID], [PinName], [VarType], [InstanceName], [Type], [X], [Y], [NoOfExtensiblePins], [Page], [ISObject], [IsExtendedProperty], [ExtendedPropertyTXT]) VALUES(@pouID, @FunctionID, @FunctionName, @VarpouID, @VarNameID, @PinName, @VarType, @InstanceName, @Type, @X, @Y, @NoOfExtensiblePins, @Page, @ISObject, @IsExtendedProperty, @ExtendedPropertyTXT) ; select last_insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblFBDBlock, with the WHERE clause.</remarks>
		internal static string SQL_Update = @"UPDATE [tblFBDBlock] SET [pouID] = @pouID, [FunctionID] = @FunctionID, [FunctionName] = @FunctionName, [VarpouID] = @VarpouID, [VarNameID] = @VarNameID, [PinName] = @PinName, [VarType] = @VarType, [InstanceName] = @InstanceName, [Type] = @Type, [X] = @X, [Y] = @Y, [NoOfExtensiblePins] = @NoOfExtensiblePins, [Page] = @Page, [ISObject] = @ISObject, [IsExtendedProperty] = @IsExtendedProperty, [ExtendedPropertyTXT] = @ExtendedPropertyTXT WHERE [FBDBlockID]=@FBDBlockID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblFBDBlock, with the WHERE clause.</remarks>
		internal static string SQL_Select = @"SELECT [pouID], [FunctionID], [FunctionName], [VarpouID], [VarNameID], [PinName], [VarType], [InstanceName], [Type], [X], [Y], [NoOfExtensiblePins], [Page], [ISObject], [IsExtendedProperty], [ExtendedPropertyTXT] FROM [tblFBDBlock] WHERE [FBDBlockID]=@FBDBlockID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblFBDBlock, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblFBDBlock] WHERE [FBDBlockID]=@FBDBlockID ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _FBDBlockID = -1;
		
		[DisplayName("FBDBlock ID")]
		[Category("Primary Key")]
		public long FBDBlockID
		{
			get
			{
				return _FBDBlockID;
			}
			set
			{
				_FBDBlockID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _pouID = -1;
		
		[DisplayName("pou ID")]
		[Category("Foreign Key")]
		public long pouID
		{
			get
			{
				return _pouID;
			}
			set
			{
				_pouID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _FunctionID = -1;
		
		[DisplayName("Function ID")]
		[Category("Column")]
		public long FunctionID
		{
			get
			{
				return _FunctionID;
			}
			set
			{
				_FunctionID = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _FunctionName = "";
		
		[DisplayName("Function Name")]
		[Category("Column")]
		public string FunctionName
		{
			get
			{
				return _FunctionName;
			}
			set
			{
				_FunctionName = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _VarpouID = -1;
		
		[DisplayName("Varpou ID")]
		[Category("Column")]
		public long VarpouID
		{
			get
			{
				return _VarpouID;
			}
			set
			{
				_VarpouID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _VarNameID = -1;
		
		[DisplayName("Var Name ID")]
		[Category("Column")]
		public long VarNameID
		{
			get
			{
				return _VarNameID;
			}
			set
			{
				_VarNameID = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _PinName = "";
		
		[DisplayName("Pin Name")]
		[Category("Column")]
		public string PinName
		{
			get
			{
				return _PinName;
			}
			set
			{
				_PinName = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _VarType;
		
		[DisplayName("Var Type")]
		[Category("Column")]
		public int VarType
		{
			get
			{
				return _VarType;
			}
			set
			{
				_VarType = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _InstanceName = "";
		
		[DisplayName("Instance Name")]
		[Category("Column")]
		public string InstanceName
		{
			get
			{
				return _InstanceName;
			}
			set
			{
				_InstanceName = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Type;
		
		[DisplayName("Type")]
		[Category("Column")]
		public int Type
		{
			get
			{
				return _Type;
			}
			set
			{
				_Type = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _X;
		
		[DisplayName("X")]
		[Category("Column")]
		public int X
		{
			get
			{
				return _X;
			}
			set
			{
				_X = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Y;
		
		[DisplayName("Y")]
		[Category("Column")]
		public int Y
		{
			get
			{
				return _Y;
			}
			set
			{
				_Y = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _NoOfExtensiblePins;
		
		[DisplayName("No Of Extensible Pins")]
		[Category("Column")]
		public int NoOfExtensiblePins
		{
			get
			{
				return _NoOfExtensiblePins;
			}
			set
			{
				_NoOfExtensiblePins = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Page;
		
		[DisplayName("Page")]
		[Category("Column")]
		public int Page
		{
			get
			{
				return _Page;
			}
			set
			{
				_Page = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _ISObject;
		
		[DisplayName("ISObject")]
		[Category("Column")]
		public bool ISObject
		{
			get
			{
				return _ISObject;
			}
			set
			{
				_ISObject = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _IsExtendedProperty;
		
		[DisplayName("Is Extended Property")]
		[Category("Column")]
		public bool IsExtendedProperty
		{
			get
			{
				return _IsExtendedProperty;
			}
			set
			{
				_IsExtendedProperty = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _ExtendedPropertyTXT = "";
		
		[DisplayName("Extended Property TXT")]
		[Category("Column")]
		public string ExtendedPropertyTXT
		{
			get
			{
				return _ExtendedPropertyTXT;
			}
			set
			{
				_ExtendedPropertyTXT = value;
			}
		}
		#endregion
		
		#region Related Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblPou _pouID_tblPou;
		
		[Description("Represents the foreign key object of the type pouID")]
		public tblPou m_pouID_tblPou
		{
			get
			{
				return _pouID_tblPou;
			}
			set
			{
				_pouID_tblPou = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblFBDBlock.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblFBDBlock.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblFBDBlock.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				FBDBlockID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblFBDBlock.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public tblFBDBlock()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@FBDBlockID", FBDBlockID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@pouID", pouID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@FunctionID", FunctionID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@FunctionName", FunctionName, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarpouID", VarpouID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID", VarNameID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@PinName", PinName, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarType", VarType, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@InstanceName", InstanceName, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Type", Type, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@X", X, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Y", Y, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@NoOfExtensiblePins", NoOfExtensiblePins, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Page", Page, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@ISObject", ISObject, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@IsExtendedProperty", IsExtendedProperty, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@ExtendedPropertyTXT", ExtendedPropertyTXT, DbType.String));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		public void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the FBDBlockID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("FBDBlockID")) == false))
				{
					FBDBlockID = ((long)(Convert.ChangeType(rs["FBDBlockID"], typeof(long))));
				}
				// if value from the recordset, to the pouID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("pouID")) == false))
				{
					pouID = ((long)(Convert.ChangeType(rs["pouID"], typeof(long))));
				}
				// if value from the recordset, to the FunctionID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("FunctionID")) == false))
				{
					FunctionID = ((long)(Convert.ChangeType(rs["FunctionID"], typeof(long))));
				}
				// if value from the recordset, to the FunctionName _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("FunctionName")) == false))
				{
					FunctionName = ((string)(Convert.ChangeType(rs["FunctionName"], typeof(string))));
				}
				// if value from the recordset, to the VarpouID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarpouID")) == false))
				{
					VarpouID = ((long)(Convert.ChangeType(rs["VarpouID"], typeof(long))));
				}
				// if value from the recordset, to the VarNameID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID")) == false))
				{
					VarNameID = ((long)(Convert.ChangeType(rs["VarNameID"], typeof(long))));
				}
				// if value from the recordset, to the PinName _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("PinName")) == false))
				{
					PinName = ((string)(Convert.ChangeType(rs["PinName"], typeof(string))));
				}
				// if value from the recordset, to the VarType _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarType")) == false))
				{
					VarType = ((int)(Convert.ChangeType(rs["VarType"], typeof(int))));
				}
				// if value from the recordset, to the InstanceName _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("InstanceName")) == false))
				{
					InstanceName = ((string)(Convert.ChangeType(rs["InstanceName"], typeof(string))));
				}
				// if value from the recordset, to the Type _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Type")) == false))
				{
					Type = ((int)(Convert.ChangeType(rs["Type"], typeof(int))));
				}
				// if value from the recordset, to the X _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("X")) == false))
				{
					X = ((int)(Convert.ChangeType(rs["X"], typeof(int))));
				}
				// if value from the recordset, to the Y _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Y")) == false))
				{
					Y = ((int)(Convert.ChangeType(rs["Y"], typeof(int))));
				}
				// if value from the recordset, to the NoOfExtensiblePins _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("NoOfExtensiblePins")) == false))
				{
					NoOfExtensiblePins = ((int)(Convert.ChangeType(rs["NoOfExtensiblePins"], typeof(int))));
				}
				// if value from the recordset, to the Page _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Page")) == false))
				{
					Page = ((int)(Convert.ChangeType(rs["Page"], typeof(int))));
				}
				// if value from the recordset, to the ISObject _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ISObject")) == false))
				{
					ISObject = ((bool)(Convert.ChangeType(rs["ISObject"], typeof(bool))));
				}
				// if value from the recordset, to the IsExtendedProperty _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("IsExtendedProperty")) == false))
				{
					IsExtendedProperty = ((bool)(Convert.ChangeType(rs["IsExtendedProperty"], typeof(bool))));
				}
				// if value from the recordset, to the ExtendedPropertyTXT _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ExtendedPropertyTXT")) == false))
				{
					ExtendedPropertyTXT = ((string)(Convert.ChangeType(rs["ExtendedPropertyTXT"], typeof(string))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		
		public override void AddFromString(string[] _strs, string arg1, ref string _log)
		{
			try
			{
				this.PreAddFromString(ref _log);
				int i;
				i = this.ColumnExistInHeader("pouID");
				if ((i >= 0))
				{
					pouID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("FunctionID");
				if ((i >= 0))
				{
					FunctionID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("FunctionName");
				if ((i >= 0))
				{
					FunctionName = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("VarpouID");
				if ((i >= 0))
				{
					VarpouID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("VarNameID");
				if ((i >= 0))
				{
					VarNameID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("PinName");
				if ((i >= 0))
				{
					PinName = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("VarType");
				if ((i >= 0))
				{
					VarType = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("InstanceName");
				if ((i >= 0))
				{
					InstanceName = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Type");
				if ((i >= 0))
				{
					Type = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("X");
				if ((i >= 0))
				{
					X = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Y");
				if ((i >= 0))
				{
					Y = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("NoOfExtensiblePins");
				if ((i >= 0))
				{
					NoOfExtensiblePins = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Page");
				if ((i >= 0))
				{
					Page = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("ISObject");
				if ((i >= 0))
				{
					ISObject = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("IsExtendedProperty");
				if ((i >= 0))
				{
					IsExtendedProperty = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("ExtendedPropertyTXT");
				if ((i >= 0))
				{
					ExtendedPropertyTXT = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				this.PostAddFromString(ref _log);
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblFBDBlockChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblFBDBlockCollection : SQLiteTableCollection
	{
		
		/// <remarks>SQL Type:tblFBDBlockChangedEventHandler</remarks>
		public event tblFBDBlockChangedEventHandler tblFBDBlockChanged;
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblPou _pouID_tblPou;
		
		[Description("Represents the foreign key object of the type pouID")]
		public tblPou m_pouID_tblPou
		{
			get
			{
				return _pouID_tblPou;
			}
			set
			{
				_pouID_tblPou = value;
			}
		}
		
		[Description("Constructor")]
		public tblFBDBlockCollection(tblPou _parent)
		{
			_pouID_tblPou = _parent;
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblFBDBlockChanged(System.EventArgs e)
		{
			if (tblFBDBlockChanged != null)
			{
				this.tblFBDBlockChanged(this, e);
			}
		}
		
		[Description("Gets a  tblFBDBlock from the collection.")]
		public tblFBDBlock this[int index]
		{
			get
			{
				return ((tblFBDBlock)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblFBDBlockChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblFBDBlock from the collection.")]
		public tblFBDBlock Get(int index)
		{
			return ((tblFBDBlock)(List[index]));
		}
		
		[Description("Adds a new tblFBDBlock to the collection.")]
		public void Add(tblFBDBlock item)
		{
			List.Add(item);
			this.OntblFBDBlockChanged(EventArgs.Empty);
		}
		
		[Description("Removes a tblFBDBlock from the collection.")]
		public void Remove(tblFBDBlock item)
		{
			List.Remove(item);
			this.OntblFBDBlockChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblFBDBlock into the collection at the specified index.")]
		public void Insert(int index, tblFBDBlock item)
		{
			List.Insert(index, item);
			this.OntblFBDBlockChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblFBDBlock class in the collection.")]
		public int IndexOf(tblFBDBlock item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblFBDBlock class is present in the collection.")]
		public bool Contains(tblFBDBlock item)
		{
			return List.Contains(item);
		}
	}
}
