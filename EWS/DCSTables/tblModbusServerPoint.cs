//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;


namespace DCS.DCSTables
{


    public partial class tblModbusServerPoint : SQLiteTable
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblModbusServerPoint.</remarks>
		internal static string SQL_Insert = @"INSERT INTO [tblModbusServerPoint] ([ModbusServerDataGroupID], [Number], [Multiplier], [Type], [AD0], [AD1], [VarNameID00], [VarNameID01], [VarNameID02], [VarNameID03], [VarNameID04], [VarNameID05], [VarNameID06], [VarNameID07], [VarNameID08], [VarNameID09], [VarNameID10], [VarNameID11], [VarNameID12], [VarNameID13], [VarNameID14], [VarNameID15]) VALUES(@ModbusServerDataGroupID, @Number, @Multiplier, @Type, @AD0, @AD1, @VarNameID00, @VarNameID01, @VarNameID02, @VarNameID03, @VarNameID04, @VarNameID05, @VarNameID06, @VarNameID07, @VarNameID08, @VarNameID09, @VarNameID10, @VarNameID11, @VarNameID12, @VarNameID13, @VarNameID14, @VarNameID15) ; select last_insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblModbusServerPoint, with the WHERE clause.</remarks>
		internal static string SQL_Update = @"UPDATE [tblModbusServerPoint] SET [ModbusServerDataGroupID] = @ModbusServerDataGroupID, [Number] = @Number, [Multiplier] = @Multiplier, [Type] = @Type, [AD0] = @AD0, [AD1] = @AD1, [VarNameID00] = @VarNameID00, [VarNameID01] = @VarNameID01, [VarNameID02] = @VarNameID02, [VarNameID03] = @VarNameID03, [VarNameID04] = @VarNameID04, [VarNameID05] = @VarNameID05, [VarNameID06] = @VarNameID06, [VarNameID07] = @VarNameID07, [VarNameID08] = @VarNameID08, [VarNameID09] = @VarNameID09, [VarNameID10] = @VarNameID10, [VarNameID11] = @VarNameID11, [VarNameID12] = @VarNameID12, [VarNameID13] = @VarNameID13, [VarNameID14] = @VarNameID14, [VarNameID15] = @VarNameID15 WHERE [ID]=@ID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblModbusServerPoint, with the WHERE clause.</remarks>
		internal static string SQL_Select = @"SELECT [ModbusServerDataGroupID], [Number], [Multiplier], [Type], [AD0], [AD1], [VarNameID00], [VarNameID01], [VarNameID02], [VarNameID03], [VarNameID04], [VarNameID05], [VarNameID06], [VarNameID07], [VarNameID08], [VarNameID09], [VarNameID10], [VarNameID11], [VarNameID12], [VarNameID13], [VarNameID14], [VarNameID15] FROM [tblModbusServerPoint] WHERE [ID]=@ID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblModbusServerPoint, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblModbusServerPoint] WHERE [ID]=@ID ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _ModbusServerDataGroupID = -1;
		
		[DisplayName("Modbus Server Data Group ID")]
		[Category("Foreign Key")]
		public long ModbusServerDataGroupID
		{
			get
			{
				return _ModbusServerDataGroupID;
			}
			set
			{
				_ModbusServerDataGroupID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _ID = -1;
		
		[DisplayName("ID")]
		[Category("Primary Key")]
		public long ID
		{
			get
			{
				return _ID;
			}
			set
			{
				_ID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _Number;
		
		[DisplayName("Number")]
		[Category("Column")]
		public short Number
		{
			get
			{
				return _Number;
			}
			set
			{
				_Number = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _Multiplier;
		
		[DisplayName("Multiplier")]
		[Category("Column")]
		public short Multiplier
		{
			get
			{
				return _Multiplier;
			}
			set
			{
				_Multiplier = value;
			}
		}
		
		/// <remarks>SQL Type:System.Byte</remarks>
		private byte _Type;
		
		[DisplayName("Type")]
		[Category("Column")]
		public byte Type
		{
			get
			{
				return _Type;
			}
			set
			{
				_Type = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _AD0;
		
		[DisplayName("AD0")]
		[Category("Column")]
		public int AD0
		{
			get
			{
				return _AD0;
			}
			set
			{
				_AD0 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _AD1;
		
		[DisplayName("AD1")]
		[Category("Column")]
		public int AD1
		{
			get
			{
				return _AD1;
			}
			set
			{
				_AD1 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _VarNameID00;
		
		[DisplayName("Var Name ID0 0")]
		[Category("Column")]
		public int VarNameID00
		{
			get
			{
				return _VarNameID00;
			}
			set
			{
				_VarNameID00 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _VarNameID01;
		
		[DisplayName("Var Name ID0 1")]
		[Category("Column")]
		public int VarNameID01
		{
			get
			{
				return _VarNameID01;
			}
			set
			{
				_VarNameID01 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _VarNameID02;
		
		[DisplayName("Var Name ID0 2")]
		[Category("Column")]
		public int VarNameID02
		{
			get
			{
				return _VarNameID02;
			}
			set
			{
				_VarNameID02 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _VarNameID03;
		
		[DisplayName("Var Name ID0 3")]
		[Category("Column")]
		public int VarNameID03
		{
			get
			{
				return _VarNameID03;
			}
			set
			{
				_VarNameID03 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _VarNameID04;
		
		[DisplayName("Var Name ID0 4")]
		[Category("Column")]
		public int VarNameID04
		{
			get
			{
				return _VarNameID04;
			}
			set
			{
				_VarNameID04 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _VarNameID05;
		
		[DisplayName("Var Name ID0 5")]
		[Category("Column")]
		public int VarNameID05
		{
			get
			{
				return _VarNameID05;
			}
			set
			{
				_VarNameID05 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _VarNameID06;
		
		[DisplayName("Var Name ID0 6")]
		[Category("Column")]
		public int VarNameID06
		{
			get
			{
				return _VarNameID06;
			}
			set
			{
				_VarNameID06 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _VarNameID07;
		
		[DisplayName("Var Name ID0 7")]
		[Category("Column")]
		public int VarNameID07
		{
			get
			{
				return _VarNameID07;
			}
			set
			{
				_VarNameID07 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _VarNameID08;
		
		[DisplayName("Var Name ID0 8")]
		[Category("Column")]
		public int VarNameID08
		{
			get
			{
				return _VarNameID08;
			}
			set
			{
				_VarNameID08 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _VarNameID09;
		
		[DisplayName("Var Name ID0 9")]
		[Category("Column")]
		public int VarNameID09
		{
			get
			{
				return _VarNameID09;
			}
			set
			{
				_VarNameID09 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _VarNameID10;
		
		[DisplayName("Var Name ID1 0")]
		[Category("Column")]
		public int VarNameID10
		{
			get
			{
				return _VarNameID10;
			}
			set
			{
				_VarNameID10 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _VarNameID11;
		
		[DisplayName("Var Name ID1 1")]
		[Category("Column")]
		public int VarNameID11
		{
			get
			{
				return _VarNameID11;
			}
			set
			{
				_VarNameID11 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _VarNameID12;
		
		[DisplayName("Var Name ID1 2")]
		[Category("Column")]
		public int VarNameID12
		{
			get
			{
				return _VarNameID12;
			}
			set
			{
				_VarNameID12 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _VarNameID13;
		
		[DisplayName("Var Name ID1 3")]
		[Category("Column")]
		public int VarNameID13
		{
			get
			{
				return _VarNameID13;
			}
			set
			{
				_VarNameID13 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _VarNameID14;
		
		[DisplayName("Var Name ID1 4")]
		[Category("Column")]
		public int VarNameID14
		{
			get
			{
				return _VarNameID14;
			}
			set
			{
				_VarNameID14 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _VarNameID15;
		
		[DisplayName("Var Name ID1 5")]
		[Category("Column")]
		public int VarNameID15
		{
			get
			{
				return _VarNameID15;
			}
			set
			{
				_VarNameID15 = value;
			}
		}
		#endregion
		
		#region Related Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblModbusServerDataGroup _ModbusServerDataGroupID_tblModbusServerDataGroup;
		
		[Description("Represents the foreign key object of the type ModbusServerDataGroupID")]
		public tblModbusServerDataGroup m_ModbusServerDataGroupID_tblModbusServerDataGroup
		{
			get
			{
				return _ModbusServerDataGroupID_tblModbusServerDataGroup;
			}
			set
			{
				_ModbusServerDataGroupID_tblModbusServerDataGroup = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblModbusServerPoint.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblModbusServerPoint.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblModbusServerPoint.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				ID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblModbusServerPoint.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public tblModbusServerPoint()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@ModbusServerDataGroupID", ModbusServerDataGroupID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@ID", ID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Number", Number, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Multiplier", Multiplier, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Type", Type, DbType.Byte));
				SqlParmColl.Add(CommonDB.AddSqlParm("@AD0", AD0, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@AD1", AD1, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID00", VarNameID00, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID01", VarNameID01, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID02", VarNameID02, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID03", VarNameID03, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID04", VarNameID04, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID05", VarNameID05, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID06", VarNameID06, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID07", VarNameID07, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID08", VarNameID08, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID09", VarNameID09, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID10", VarNameID10, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID11", VarNameID11, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID12", VarNameID12, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID13", VarNameID13, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID14", VarNameID14, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID15", VarNameID15, DbType.Int32));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		public void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the ModbusServerDataGroupID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ModbusServerDataGroupID")) == false))
				{
					ModbusServerDataGroupID = ((long)(Convert.ChangeType(rs["ModbusServerDataGroupID"], typeof(long))));
				}
				// if value from the recordset, to the ID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ID")) == false))
				{
					ID = ((long)(Convert.ChangeType(rs["ID"], typeof(long))));
				}
				// if value from the recordset, to the Number _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Number")) == false))
				{
					Number = ((short)(Convert.ChangeType(rs["Number"], typeof(short))));
				}
				// if value from the recordset, to the Multiplier _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Multiplier")) == false))
				{
					Multiplier = ((short)(Convert.ChangeType(rs["Multiplier"], typeof(short))));
				}
				// if value from the recordset, to the Type _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Type")) == false))
				{
					Type = ((byte)(Convert.ChangeType(rs["Type"], typeof(byte))));
				}
				// if value from the recordset, to the AD0 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("AD0")) == false))
				{
					AD0 = ((int)(Convert.ChangeType(rs["AD0"], typeof(int))));
				}
				// if value from the recordset, to the AD1 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("AD1")) == false))
				{
					AD1 = ((int)(Convert.ChangeType(rs["AD1"], typeof(int))));
				}
				// if value from the recordset, to the VarNameID00 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID00")) == false))
				{
					VarNameID00 = ((int)(Convert.ChangeType(rs["VarNameID00"], typeof(int))));
				}
				// if value from the recordset, to the VarNameID01 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID01")) == false))
				{
					VarNameID01 = ((int)(Convert.ChangeType(rs["VarNameID01"], typeof(int))));
				}
				// if value from the recordset, to the VarNameID02 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID02")) == false))
				{
					VarNameID02 = ((int)(Convert.ChangeType(rs["VarNameID02"], typeof(int))));
				}
				// if value from the recordset, to the VarNameID03 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID03")) == false))
				{
					VarNameID03 = ((int)(Convert.ChangeType(rs["VarNameID03"], typeof(int))));
				}
				// if value from the recordset, to the VarNameID04 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID04")) == false))
				{
					VarNameID04 = ((int)(Convert.ChangeType(rs["VarNameID04"], typeof(int))));
				}
				// if value from the recordset, to the VarNameID05 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID05")) == false))
				{
					VarNameID05 = ((int)(Convert.ChangeType(rs["VarNameID05"], typeof(int))));
				}
				// if value from the recordset, to the VarNameID06 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID06")) == false))
				{
					VarNameID06 = ((int)(Convert.ChangeType(rs["VarNameID06"], typeof(int))));
				}
				// if value from the recordset, to the VarNameID07 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID07")) == false))
				{
					VarNameID07 = ((int)(Convert.ChangeType(rs["VarNameID07"], typeof(int))));
				}
				// if value from the recordset, to the VarNameID08 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID08")) == false))
				{
					VarNameID08 = ((int)(Convert.ChangeType(rs["VarNameID08"], typeof(int))));
				}
				// if value from the recordset, to the VarNameID09 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID09")) == false))
				{
					VarNameID09 = ((int)(Convert.ChangeType(rs["VarNameID09"], typeof(int))));
				}
				// if value from the recordset, to the VarNameID10 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID10")) == false))
				{
					VarNameID10 = ((int)(Convert.ChangeType(rs["VarNameID10"], typeof(int))));
				}
				// if value from the recordset, to the VarNameID11 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID11")) == false))
				{
					VarNameID11 = ((int)(Convert.ChangeType(rs["VarNameID11"], typeof(int))));
				}
				// if value from the recordset, to the VarNameID12 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID12")) == false))
				{
					VarNameID12 = ((int)(Convert.ChangeType(rs["VarNameID12"], typeof(int))));
				}
				// if value from the recordset, to the VarNameID13 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID13")) == false))
				{
					VarNameID13 = ((int)(Convert.ChangeType(rs["VarNameID13"], typeof(int))));
				}
				// if value from the recordset, to the VarNameID14 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID14")) == false))
				{
					VarNameID14 = ((int)(Convert.ChangeType(rs["VarNameID14"], typeof(int))));
				}
				// if value from the recordset, to the VarNameID15 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID15")) == false))
				{
					VarNameID15 = ((int)(Convert.ChangeType(rs["VarNameID15"], typeof(int))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		
		public override void AddFromString(string[] _strs, string arg1, ref string _log)
		{
			try
			{
				this.PreAddFromString(ref _log);
				int i;
				i = this.ColumnExistInHeader("ModbusServerDataGroupID");
				if ((i >= 0))
				{
					ModbusServerDataGroupID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("Number");
				if ((i >= 0))
				{
					Number = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("Multiplier");
				if ((i >= 0))
				{
					Multiplier = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("Type");
				if ((i >= 0))
				{
					Type = ((byte)(Convert.ChangeType(_strs[i], typeof(byte))));
				}
				i = this.ColumnExistInHeader("AD0");
				if ((i >= 0))
				{
					AD0 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("AD1");
				if ((i >= 0))
				{
					AD1 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("VarNameID00");
				if ((i >= 0))
				{
					VarNameID00 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("VarNameID01");
				if ((i >= 0))
				{
					VarNameID01 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("VarNameID02");
				if ((i >= 0))
				{
					VarNameID02 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("VarNameID03");
				if ((i >= 0))
				{
					VarNameID03 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("VarNameID04");
				if ((i >= 0))
				{
					VarNameID04 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("VarNameID05");
				if ((i >= 0))
				{
					VarNameID05 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("VarNameID06");
				if ((i >= 0))
				{
					VarNameID06 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("VarNameID07");
				if ((i >= 0))
				{
					VarNameID07 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("VarNameID08");
				if ((i >= 0))
				{
					VarNameID08 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("VarNameID09");
				if ((i >= 0))
				{
					VarNameID09 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("VarNameID10");
				if ((i >= 0))
				{
					VarNameID10 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("VarNameID11");
				if ((i >= 0))
				{
					VarNameID11 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("VarNameID12");
				if ((i >= 0))
				{
					VarNameID12 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("VarNameID13");
				if ((i >= 0))
				{
					VarNameID13 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("VarNameID14");
				if ((i >= 0))
				{
					VarNameID14 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("VarNameID15");
				if ((i >= 0))
				{
					VarNameID15 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				this.PostAddFromString(ref _log);
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblModbusServerPointChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblModbusServerPointCollection : SQLiteTableCollection
	{
		
		/// <remarks>SQL Type:tblModbusServerPointChangedEventHandler</remarks>
		public event tblModbusServerPointChangedEventHandler tblModbusServerPointChanged;
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblModbusServerDataGroup _ModbusServerDataGroupID_tblModbusServerDataGroup;
		
		[Description("Represents the foreign key object of the type ModbusServerDataGroupID")]
		public tblModbusServerDataGroup m_ModbusServerDataGroupID_tblModbusServerDataGroup
		{
			get
			{
				return _ModbusServerDataGroupID_tblModbusServerDataGroup;
			}
			set
			{
				_ModbusServerDataGroupID_tblModbusServerDataGroup = value;
			}
		}
		
		[Description("Constructor")]
		public tblModbusServerPointCollection(tblModbusServerDataGroup _parent)
		{
			_ModbusServerDataGroupID_tblModbusServerDataGroup = _parent;
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblModbusServerPointChanged(System.EventArgs e)
		{
			if (tblModbusServerPointChanged != null)
			{
				this.tblModbusServerPointChanged(this, e);
			}
		}
		
		[Description("Gets a  tblModbusServerPoint from the collection.")]
		public tblModbusServerPoint this[int index]
		{
			get
			{
				return ((tblModbusServerPoint)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblModbusServerPointChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblModbusServerPoint from the collection.")]
		public tblModbusServerPoint Get(int index)
		{
			return ((tblModbusServerPoint)(List[index]));
		}
		
		[Description("Adds a new tblModbusServerPoint to the collection.")]
		public void Add(tblModbusServerPoint item)
		{
			List.Add(item);
			this.OntblModbusServerPointChanged(EventArgs.Empty);
		}
		
		[Description("Removes a tblModbusServerPoint from the collection.")]
		public void Remove(tblModbusServerPoint item)
		{
			List.Remove(item);
			this.OntblModbusServerPointChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblModbusServerPoint into the collection at the specified index.")]
		public void Insert(int index, tblModbusServerPoint item)
		{
			List.Insert(index, item);
			this.OntblModbusServerPointChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblModbusServerPoint class in the collection.")]
		public int IndexOf(tblModbusServerPoint item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblModbusServerPoint class is present in the collection.")]
		public bool Contains(tblModbusServerPoint item)
		{
			return List.Contains(item);
		}
	}
}
