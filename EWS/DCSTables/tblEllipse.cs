//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;


namespace DCS.DCSTables
{


    public partial class tblEllipse : SQLiteTable
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblEllipse.</remarks>
		internal static string SQL_Insert = @"INSERT INTO [tblEllipse] ([DisplayID], [oIndex], [bBrush], [bPen], [LogpenLopnColor], [LogpenLopnStyle], [LogpenLopnWidthX], [LogpenLopnWidthY], [LogbrushLbColor], [LogbrushLbHatch], [LogbrushLbStyle], [Left], [Top], [Right], [Bottom], [LastRev], [CompiledExp], [validexpression]) VALUES(@DisplayID, @oIndex, @bBrush, @bPen, @LogpenLopnColor, @LogpenLopnStyle, @LogpenLopnWidthX, @LogpenLopnWidthY, @LogbrushLbColor, @LogbrushLbHatch, @LogbrushLbStyle, @Left, @Top, @Right, @Bottom, @LastRev, @CompiledExp, @validexpression) ; select last_insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblEllipse, with the WHERE clause.</remarks>
		internal static string SQL_Update = @"UPDATE [tblEllipse] SET [DisplayID] = @DisplayID, [oIndex] = @oIndex, [bBrush] = @bBrush, [bPen] = @bPen, [LogpenLopnColor] = @LogpenLopnColor, [LogpenLopnStyle] = @LogpenLopnStyle, [LogpenLopnWidthX] = @LogpenLopnWidthX, [LogpenLopnWidthY] = @LogpenLopnWidthY, [LogbrushLbColor] = @LogbrushLbColor, [LogbrushLbHatch] = @LogbrushLbHatch, [LogbrushLbStyle] = @LogbrushLbStyle, [Left] = @Left, [Top] = @Top, [Right] = @Right, [Bottom] = @Bottom, [LastRev] = @LastRev, [CompiledExp] = @CompiledExp, [validexpression] = @validexpression WHERE [ID]=@ID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblEllipse, with the WHERE clause.</remarks>
		internal static string SQL_Select = @"SELECT [DisplayID], [oIndex], [bBrush], [bPen], [LogpenLopnColor], [LogpenLopnStyle], [LogpenLopnWidthX], [LogpenLopnWidthY], [LogbrushLbColor], [LogbrushLbHatch], [LogbrushLbStyle], [Left], [Top], [Right], [Bottom], [LastRev], [CompiledExp], [validexpression] FROM [tblEllipse] WHERE [ID]=@ID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblEllipse, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblEllipse] WHERE [ID]=@ID ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _ID = -1;
		
		[DisplayName("ID")]
		[Category("Primary Key")]
		public long ID
		{
			get
			{
				return _ID;
			}
			set
			{
				_ID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _DisplayID = -1;
		
		[DisplayName("Display ID")]
		[Category("Foreign Key")]
		public long DisplayID
		{
			get
			{
				return _DisplayID;
			}
			set
			{
				_DisplayID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _oIndex;
		
		[DisplayName("o Index")]
		[Category("Column")]
		public int oIndex
		{
			get
			{
				return _oIndex;
			}
			set
			{
				_oIndex = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _bBrush;
		
		[DisplayName("b Brush")]
		[Category("Column")]
		public bool bBrush
		{
			get
			{
				return _bBrush;
			}
			set
			{
				_bBrush = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _bPen;
		
		[DisplayName("b Pen")]
		[Category("Column")]
		public bool bPen
		{
			get
			{
				return _bPen;
			}
			set
			{
				_bPen = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _LogpenLopnColor;
		
		[DisplayName("Logpen Lopn Color")]
		[Category("Column")]
		public int LogpenLopnColor
		{
			get
			{
				return _LogpenLopnColor;
			}
			set
			{
				_LogpenLopnColor = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _LogpenLopnStyle;
		
		[DisplayName("Logpen Lopn Style")]
		[Category("Column")]
		public int LogpenLopnStyle
		{
			get
			{
				return _LogpenLopnStyle;
			}
			set
			{
				_LogpenLopnStyle = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _LogpenLopnWidthX;
		
		[DisplayName("Logpen Lopn Width X")]
		[Category("Column")]
		public int LogpenLopnWidthX
		{
			get
			{
				return _LogpenLopnWidthX;
			}
			set
			{
				_LogpenLopnWidthX = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _LogpenLopnWidthY;
		
		[DisplayName("Logpen Lopn Width Y")]
		[Category("Column")]
		public int LogpenLopnWidthY
		{
			get
			{
				return _LogpenLopnWidthY;
			}
			set
			{
				_LogpenLopnWidthY = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _LogbrushLbColor;
		
		[DisplayName("Logbrush Lb Color")]
		[Category("Column")]
		public int LogbrushLbColor
		{
			get
			{
				return _LogbrushLbColor;
			}
			set
			{
				_LogbrushLbColor = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _LogbrushLbHatch;
		
		[DisplayName("Logbrush Lb Hatch")]
		[Category("Column")]
		public int LogbrushLbHatch
		{
			get
			{
				return _LogbrushLbHatch;
			}
			set
			{
				_LogbrushLbHatch = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _LogbrushLbStyle;
		
		[DisplayName("Logbrush Lb Style")]
		[Category("Column")]
		public int LogbrushLbStyle
		{
			get
			{
				return _LogbrushLbStyle;
			}
			set
			{
				_LogbrushLbStyle = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Left;
		
		[DisplayName("Left")]
		[Category("Column")]
		public int Left
		{
			get
			{
				return _Left;
			}
			set
			{
				_Left = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Top;
		
		[DisplayName("Top")]
		[Category("Column")]
		public int Top
		{
			get
			{
				return _Top;
			}
			set
			{
				_Top = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Right;
		
		[DisplayName("Right")]
		[Category("Column")]
		public int Right
		{
			get
			{
				return _Right;
			}
			set
			{
				_Right = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Bottom;
		
		[DisplayName("Bottom")]
		[Category("Column")]
		public int Bottom
		{
			get
			{
				return _Bottom;
			}
			set
			{
				_Bottom = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _LastRev;
		
		[DisplayName("Last Rev")]
		[Category("Column")]
		public bool LastRev
		{
			get
			{
				return _LastRev;
			}
			set
			{
				_LastRev = value;
			}
		}
		
		/// <remarks>SQL Type:System.Byte[]</remarks>
		private byte[] _CompiledExp;
		
		[DisplayName("Compiled Exp")]
		[Category("Column")]
		public byte[] CompiledExp
		{
			get
			{
				return _CompiledExp;
			}
			set
			{
				_CompiledExp = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _validexpression;
		
		[DisplayName("validexpression")]
		[Category("Column")]
		public bool validexpression
		{
			get
			{
				return _validexpression;
			}
			set
			{
				_validexpression = value;
			}
		}
		#endregion
		
		#region Related Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblDisplay _DisplayID_tblDisplay;
		
		[Description("Represents the foreign key object of the type DisplayID")]
		public tblDisplay m_DisplayID_tblDisplay
		{
			get
			{
				return _DisplayID_tblDisplay;
			}
			set
			{
				_DisplayID_tblDisplay = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblEllipse.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblEllipse.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblEllipse.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				ID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblEllipse.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public tblEllipse()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@ID", ID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@DisplayID", DisplayID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@oIndex", oIndex, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@bBrush", bBrush, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@bPen", bPen, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LogpenLopnColor", LogpenLopnColor, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LogpenLopnStyle", LogpenLopnStyle, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LogpenLopnWidthX", LogpenLopnWidthX, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LogpenLopnWidthY", LogpenLopnWidthY, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LogbrushLbColor", LogbrushLbColor, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LogbrushLbHatch", LogbrushLbHatch, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LogbrushLbStyle", LogbrushLbStyle, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Left", Left, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Top", Top, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Right", Right, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Bottom", Bottom, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LastRev", LastRev, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@CompiledExp", CompiledExp, DbType.Binary));
				SqlParmColl.Add(CommonDB.AddSqlParm("@validexpression", validexpression, DbType.Boolean));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		public void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the ID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ID")) == false))
				{
					ID = ((long)(Convert.ChangeType(rs["ID"], typeof(long))));
				}
				// if value from the recordset, to the DisplayID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("DisplayID")) == false))
				{
					DisplayID = ((long)(Convert.ChangeType(rs["DisplayID"], typeof(long))));
				}
				// if value from the recordset, to the oIndex _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("oIndex")) == false))
				{
					oIndex = ((int)(Convert.ChangeType(rs["oIndex"], typeof(int))));
				}
				// if value from the recordset, to the bBrush _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("bBrush")) == false))
				{
					bBrush = ((bool)(Convert.ChangeType(rs["bBrush"], typeof(bool))));
				}
				// if value from the recordset, to the bPen _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("bPen")) == false))
				{
					bPen = ((bool)(Convert.ChangeType(rs["bPen"], typeof(bool))));
				}
				// if value from the recordset, to the LogpenLopnColor _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LogpenLopnColor")) == false))
				{
					LogpenLopnColor = ((int)(Convert.ChangeType(rs["LogpenLopnColor"], typeof(int))));
				}
				// if value from the recordset, to the LogpenLopnStyle _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LogpenLopnStyle")) == false))
				{
					LogpenLopnStyle = ((int)(Convert.ChangeType(rs["LogpenLopnStyle"], typeof(int))));
				}
				// if value from the recordset, to the LogpenLopnWidthX _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LogpenLopnWidthX")) == false))
				{
					LogpenLopnWidthX = ((int)(Convert.ChangeType(rs["LogpenLopnWidthX"], typeof(int))));
				}
				// if value from the recordset, to the LogpenLopnWidthY _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LogpenLopnWidthY")) == false))
				{
					LogpenLopnWidthY = ((int)(Convert.ChangeType(rs["LogpenLopnWidthY"], typeof(int))));
				}
				// if value from the recordset, to the LogbrushLbColor _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LogbrushLbColor")) == false))
				{
					LogbrushLbColor = ((int)(Convert.ChangeType(rs["LogbrushLbColor"], typeof(int))));
				}
				// if value from the recordset, to the LogbrushLbHatch _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LogbrushLbHatch")) == false))
				{
					LogbrushLbHatch = ((int)(Convert.ChangeType(rs["LogbrushLbHatch"], typeof(int))));
				}
				// if value from the recordset, to the LogbrushLbStyle _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LogbrushLbStyle")) == false))
				{
					LogbrushLbStyle = ((int)(Convert.ChangeType(rs["LogbrushLbStyle"], typeof(int))));
				}
				// if value from the recordset, to the Left _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Left")) == false))
				{
					Left = ((int)(Convert.ChangeType(rs["Left"], typeof(int))));
				}
				// if value from the recordset, to the Top _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Top")) == false))
				{
					Top = ((int)(Convert.ChangeType(rs["Top"], typeof(int))));
				}
				// if value from the recordset, to the Right _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Right")) == false))
				{
					Right = ((int)(Convert.ChangeType(rs["Right"], typeof(int))));
				}
				// if value from the recordset, to the Bottom _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Bottom")) == false))
				{
					Bottom = ((int)(Convert.ChangeType(rs["Bottom"], typeof(int))));
				}
				// if value from the recordset, to the LastRev _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LastRev")) == false))
				{
					LastRev = ((bool)(Convert.ChangeType(rs["LastRev"], typeof(bool))));
				}
				// if value from the recordset, to the CompiledExp _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("CompiledExp")) == false))
				{
					CompiledExp = ((byte[])(Convert.ChangeType(rs["CompiledExp"], typeof(byte[]))));
				}
				// if value from the recordset, to the validexpression _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("validexpression")) == false))
				{
					validexpression = ((bool)(Convert.ChangeType(rs["validexpression"], typeof(bool))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		
		public override void AddFromString(string[] _strs, string arg1, ref string _log)
		{
			try
			{
				this.PreAddFromString(ref _log);
				int i;
				i = this.ColumnExistInHeader("DisplayID");
				if ((i >= 0))
				{
					DisplayID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("oIndex");
				if ((i >= 0))
				{
					oIndex = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("bBrush");
				if ((i >= 0))
				{
					bBrush = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("bPen");
				if ((i >= 0))
				{
					bPen = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("LogpenLopnColor");
				if ((i >= 0))
				{
					LogpenLopnColor = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("LogpenLopnStyle");
				if ((i >= 0))
				{
					LogpenLopnStyle = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("LogpenLopnWidthX");
				if ((i >= 0))
				{
					LogpenLopnWidthX = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("LogpenLopnWidthY");
				if ((i >= 0))
				{
					LogpenLopnWidthY = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("LogbrushLbColor");
				if ((i >= 0))
				{
					LogbrushLbColor = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("LogbrushLbHatch");
				if ((i >= 0))
				{
					LogbrushLbHatch = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("LogbrushLbStyle");
				if ((i >= 0))
				{
					LogbrushLbStyle = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Left");
				if ((i >= 0))
				{
					Left = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Top");
				if ((i >= 0))
				{
					Top = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Right");
				if ((i >= 0))
				{
					Right = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Bottom");
				if ((i >= 0))
				{
					Bottom = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("LastRev");
				if ((i >= 0))
				{
					LastRev = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("CompiledExp");
				if ((i >= 0))
				{
					CompiledExp = ((byte[])(Convert.ChangeType(_strs[i], typeof(byte[]))));
				}
				i = this.ColumnExistInHeader("validexpression");
				if ((i >= 0))
				{
					validexpression = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				this.PostAddFromString(ref _log);
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblEllipseChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblEllipseCollection : SQLiteTableCollection
	{
		
		/// <remarks>SQL Type:tblEllipseChangedEventHandler</remarks>
		public event tblEllipseChangedEventHandler tblEllipseChanged;
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblDisplay _DisplayID_tblDisplay;
		
		[Description("Represents the foreign key object of the type DisplayID")]
		public tblDisplay m_DisplayID_tblDisplay
		{
			get
			{
				return _DisplayID_tblDisplay;
			}
			set
			{
				_DisplayID_tblDisplay = value;
			}
		}
		
		[Description("Constructor")]
		public tblEllipseCollection(tblDisplay _parent)
		{
			_DisplayID_tblDisplay = _parent;
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblEllipseChanged(System.EventArgs e)
		{
			if (tblEllipseChanged != null)
			{
				this.tblEllipseChanged(this, e);
			}
		}
		
		[Description("Gets a  tblEllipse from the collection.")]
		public tblEllipse this[int index]
		{
			get
			{
				return ((tblEllipse)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblEllipseChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblEllipse from the collection.")]
		public tblEllipse Get(int index)
		{
			return ((tblEllipse)(List[index]));
		}
		
		[Description("Adds a new tblEllipse to the collection.")]
		public void Add(tblEllipse item)
		{
			List.Add(item);
			this.OntblEllipseChanged(EventArgs.Empty);
		}
		
		[Description("Removes a tblEllipse from the collection.")]
		public void Remove(tblEllipse item)
		{
			List.Remove(item);
			this.OntblEllipseChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblEllipse into the collection at the specified index.")]
		public void Insert(int index, tblEllipse item)
		{
			List.Insert(index, item);
			this.OntblEllipseChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblEllipse class in the collection.")]
		public int IndexOf(tblEllipse item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblEllipse class is present in the collection.")]
		public bool Contains(tblEllipse item)
		{
			return List.Contains(item);
		}
	}
}
