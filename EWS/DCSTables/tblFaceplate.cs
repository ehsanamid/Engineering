//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;
using System.Data.SqlClient;
using System.Drawing;
using System.Text;
using System.Windows.Forms;


namespace EWS.DCSTables
{
	
	
	public partial class tblFaceplate : Object
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblFaceplate.</remarks>
		internal static string SQL_Insert = @"INSERT INTO [tblFaceplate] ([NoOfPoint], [SolutionName], [Des1], [Type1], [Des2], [Type2], [Des3], [Type3], [Des4], [Type4], [Des5], [Type5], [Des6], [Type6], [Des7], [Type7], [Des8], [Type8], [Des9], [Type9], [Des10], [Type10], [Des11], [Type11], [Des12], [Type12], [Des13], [Type13], [Des14], [Type14], [Des15], [Type15], [Des16], [Type16], [Des17], [Type17], [Des18], [Type18], [Des19], [Type19], [Des20], [Type20]) VALUES(@NoOfPoint, @SolutionName, @Des1, @Type1, @Des2, @Type2, @Des3, @Type3, @Des4, @Type4, @Des5, @Type5, @Des6, @Type6, @Des7, @Type7, @Des8, @Type8, @Des9, @Type9, @Des10, @Type10, @Des11, @Type11, @Des12, @Type12, @Des13, @Type13, @Des14, @Type14, @Des15, @Type15, @Des16, @Type16, @Des17, @Type17, @Des18, @Type18, @Des19, @Type19, @Des20, @Type20) ; select last_insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblFaceplate, with the WHERE clause.</remarks>
		internal static string SQL_Update = @"UPDATE [tblFaceplate] SET [NoOfPoint] = @NoOfPoint, [SolutionName] = @SolutionName, [Des1] = @Des1, [Type1] = @Type1, [Des2] = @Des2, [Type2] = @Type2, [Des3] = @Des3, [Type3] = @Type3, [Des4] = @Des4, [Type4] = @Type4, [Des5] = @Des5, [Type5] = @Type5, [Des6] = @Des6, [Type6] = @Type6, [Des7] = @Des7, [Type7] = @Type7, [Des8] = @Des8, [Type8] = @Type8, [Des9] = @Des9, [Type9] = @Type9, [Des10] = @Des10, [Type10] = @Type10, [Des11] = @Des11, [Type11] = @Type11, [Des12] = @Des12, [Type12] = @Type12, [Des13] = @Des13, [Type13] = @Type13, [Des14] = @Des14, [Type14] = @Type14, [Des15] = @Des15, [Type15] = @Type15, [Des16] = @Des16, [Type16] = @Type16, [Des17] = @Des17, [Type17] = @Type17, [Des18] = @Des18, [Type18] = @Type18, [Des19] = @Des19, [Type19] = @Type19, [Des20] = @Des20, [Type20] = @Type20 WHERE [FPName]=@FPName ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblFaceplate, with the WHERE clause.</remarks>
		internal static string SQL_Select = @"SELECT [NoOfPoint], [SolutionName], [Des1], [Type1], [Des2], [Type2], [Des3], [Type3], [Des4], [Type4], [Des5], [Type5], [Des6], [Type6], [Des7], [Type7], [Des8], [Type8], [Des9], [Type9], [Des10], [Type10], [Des11], [Type11], [Des12], [Type12], [Des13], [Type13], [Des14], [Type14], [Des15], [Type15], [Des16], [Type16], [Des17], [Type17], [Des18], [Type18], [Des19], [Type19], [Des20], [Type20] FROM [tblFaceplate] WHERE [FPName]=@FPName ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblFaceplate, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblFaceplate] WHERE [FPName]=@FPName ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.String</remarks>
		private string _FPName;
		
		[DisplayName("FPName")]
		[Category("Primary Key")]
		public string FPName
		{
			get
			{
				return _FPName;
			}
			set
			{
				_FPName = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _NoOfPoint;
		
		[DisplayName("No Of Point")]
		[Category("Column")]
		public int NoOfPoint
		{
			get
			{
				return _NoOfPoint;
			}
			set
			{
				_NoOfPoint = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _SolutionName;
		
		[DisplayName("Solution Name")]
		[Category("Foreign Key")]
		public long SolutionName
		{
			get
			{
				return _SolutionName;
			}
			set
			{
				_SolutionName = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Des1;
		
		[DisplayName("Des 1")]
		[Category("Column")]
		public string Des1
		{
			get
			{
				return _Des1;
			}
			set
			{
				_Des1 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Type1;
		
		[DisplayName("Type 1")]
		[Category("Column")]
		public int Type1
		{
			get
			{
				return _Type1;
			}
			set
			{
				_Type1 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Des2;
		
		[DisplayName("Des 2")]
		[Category("Column")]
		public string Des2
		{
			get
			{
				return _Des2;
			}
			set
			{
				_Des2 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Type2;
		
		[DisplayName("Type 2")]
		[Category("Column")]
		public int Type2
		{
			get
			{
				return _Type2;
			}
			set
			{
				_Type2 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Des3;
		
		[DisplayName("Des 3")]
		[Category("Column")]
		public string Des3
		{
			get
			{
				return _Des3;
			}
			set
			{
				_Des3 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Type3;
		
		[DisplayName("Type 3")]
		[Category("Column")]
		public int Type3
		{
			get
			{
				return _Type3;
			}
			set
			{
				_Type3 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Des4;
		
		[DisplayName("Des 4")]
		[Category("Column")]
		public string Des4
		{
			get
			{
				return _Des4;
			}
			set
			{
				_Des4 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Type4;
		
		[DisplayName("Type 4")]
		[Category("Column")]
		public int Type4
		{
			get
			{
				return _Type4;
			}
			set
			{
				_Type4 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Des5;
		
		[DisplayName("Des 5")]
		[Category("Column")]
		public string Des5
		{
			get
			{
				return _Des5;
			}
			set
			{
				_Des5 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Type5;
		
		[DisplayName("Type 5")]
		[Category("Column")]
		public int Type5
		{
			get
			{
				return _Type5;
			}
			set
			{
				_Type5 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Des6;
		
		[DisplayName("Des 6")]
		[Category("Column")]
		public string Des6
		{
			get
			{
				return _Des6;
			}
			set
			{
				_Des6 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Type6;
		
		[DisplayName("Type 6")]
		[Category("Column")]
		public int Type6
		{
			get
			{
				return _Type6;
			}
			set
			{
				_Type6 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Des7;
		
		[DisplayName("Des 7")]
		[Category("Column")]
		public string Des7
		{
			get
			{
				return _Des7;
			}
			set
			{
				_Des7 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Type7;
		
		[DisplayName("Type 7")]
		[Category("Column")]
		public int Type7
		{
			get
			{
				return _Type7;
			}
			set
			{
				_Type7 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Des8;
		
		[DisplayName("Des 8")]
		[Category("Column")]
		public string Des8
		{
			get
			{
				return _Des8;
			}
			set
			{
				_Des8 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Type8;
		
		[DisplayName("Type 8")]
		[Category("Column")]
		public int Type8
		{
			get
			{
				return _Type8;
			}
			set
			{
				_Type8 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Des9;
		
		[DisplayName("Des 9")]
		[Category("Column")]
		public string Des9
		{
			get
			{
				return _Des9;
			}
			set
			{
				_Des9 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Type9;
		
		[DisplayName("Type 9")]
		[Category("Column")]
		public int Type9
		{
			get
			{
				return _Type9;
			}
			set
			{
				_Type9 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Des10;
		
		[DisplayName("Des 10")]
		[Category("Column")]
		public string Des10
		{
			get
			{
				return _Des10;
			}
			set
			{
				_Des10 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Type10;
		
		[DisplayName("Type 10")]
		[Category("Column")]
		public int Type10
		{
			get
			{
				return _Type10;
			}
			set
			{
				_Type10 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Des11;
		
		[DisplayName("Des 11")]
		[Category("Column")]
		public string Des11
		{
			get
			{
				return _Des11;
			}
			set
			{
				_Des11 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Type11;
		
		[DisplayName("Type 11")]
		[Category("Column")]
		public int Type11
		{
			get
			{
				return _Type11;
			}
			set
			{
				_Type11 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Des12;
		
		[DisplayName("Des 12")]
		[Category("Column")]
		public string Des12
		{
			get
			{
				return _Des12;
			}
			set
			{
				_Des12 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Type12;
		
		[DisplayName("Type 12")]
		[Category("Column")]
		public int Type12
		{
			get
			{
				return _Type12;
			}
			set
			{
				_Type12 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Des13;
		
		[DisplayName("Des 13")]
		[Category("Column")]
		public string Des13
		{
			get
			{
				return _Des13;
			}
			set
			{
				_Des13 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Type13;
		
		[DisplayName("Type 13")]
		[Category("Column")]
		public int Type13
		{
			get
			{
				return _Type13;
			}
			set
			{
				_Type13 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Des14;
		
		[DisplayName("Des 14")]
		[Category("Column")]
		public string Des14
		{
			get
			{
				return _Des14;
			}
			set
			{
				_Des14 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Type14;
		
		[DisplayName("Type 14")]
		[Category("Column")]
		public int Type14
		{
			get
			{
				return _Type14;
			}
			set
			{
				_Type14 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Des15;
		
		[DisplayName("Des 15")]
		[Category("Column")]
		public string Des15
		{
			get
			{
				return _Des15;
			}
			set
			{
				_Des15 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Type15;
		
		[DisplayName("Type 15")]
		[Category("Column")]
		public int Type15
		{
			get
			{
				return _Type15;
			}
			set
			{
				_Type15 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Des16;
		
		[DisplayName("Des 16")]
		[Category("Column")]
		public string Des16
		{
			get
			{
				return _Des16;
			}
			set
			{
				_Des16 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Type16;
		
		[DisplayName("Type 16")]
		[Category("Column")]
		public int Type16
		{
			get
			{
				return _Type16;
			}
			set
			{
				_Type16 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Des17;
		
		[DisplayName("Des 17")]
		[Category("Column")]
		public string Des17
		{
			get
			{
				return _Des17;
			}
			set
			{
				_Des17 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Type17;
		
		[DisplayName("Type 17")]
		[Category("Column")]
		public int Type17
		{
			get
			{
				return _Type17;
			}
			set
			{
				_Type17 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Des18;
		
		[DisplayName("Des 18")]
		[Category("Column")]
		public string Des18
		{
			get
			{
				return _Des18;
			}
			set
			{
				_Des18 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Type18;
		
		[DisplayName("Type 18")]
		[Category("Column")]
		public int Type18
		{
			get
			{
				return _Type18;
			}
			set
			{
				_Type18 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Des19;
		
		[DisplayName("Des 19")]
		[Category("Column")]
		public string Des19
		{
			get
			{
				return _Des19;
			}
			set
			{
				_Des19 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Type19;
		
		[DisplayName("Type 19")]
		[Category("Column")]
		public int Type19
		{
			get
			{
				return _Type19;
			}
			set
			{
				_Type19 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Des20;
		
		[DisplayName("Des 20")]
		[Category("Column")]
		public string Des20
		{
			get
			{
				return _Des20;
			}
			set
			{
				_Des20 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Type20;
		
		[DisplayName("Type 20")]
		[Category("Column")]
		public int Type20
		{
			get
			{
				return _Type20;
			}
			set
			{
				_Type20 = value;
			}
		}
		#endregion
		
		#region Related Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblSolution _SolutionName_tblSolution;
		
		[Description("Represents the foreign key object of the type SolutionName")]
		public tblSolution m_SolutionName_tblSolution
		{
			get
			{
				return _SolutionName_tblSolution;
			}
			set
			{
				_SolutionName_tblSolution = value;
			}
		}
		#endregion
		
		#region Collection Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblFP_ParameterCollection _tblFP_ParameterCollection;
		
		[Description("Represents the foreign key object of the type FPName")]
		public tblFP_ParameterCollection m_tblFP_ParameterCollection
		{
			get
			{
				if (_tblFP_ParameterCollection == null)
				{
					_tblFP_ParameterCollection =  new tblFP_ParameterCollection(this);
					_tblFP_ParameterCollection.Load();
				}
				return _tblFP_ParameterCollection;
			}
			set
			{
				_tblFP_ParameterCollection = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblFaceplate.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return rowseffected;
			}
			catch (System.Exception )
			{
				throw;
			}
		}
		
		public void Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblFaceplate.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
			}
			catch (System.Exception )
			{
				throw;
			}
		}
		
		public bool Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblFaceplate.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				Com.Dispose();
				this.PostInsertTriger();
				return true;
			}
			catch (SqlException ex)
			{
				return false;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblFaceplate.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return rowseffected;
			}
			catch (System.Exception )
			{
				throw;
			}
		}
		
		public tblFaceplate()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@FPName", FPName, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@NoOfPoint", NoOfPoint, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@SolutionName", SolutionName, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Des1", Des1, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Type1", Type1, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Des2", Des2, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Type2", Type2, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Des3", Des3, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Type3", Type3, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Des4", Des4, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Type4", Type4, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Des5", Des5, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Type5", Type5, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Des6", Des6, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Type6", Type6, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Des7", Des7, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Type7", Type7, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Des8", Des8, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Type8", Type8, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Des9", Des9, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Type9", Type9, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Des10", Des10, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Type10", Type10, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Des11", Des11, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Type11", Type11, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Des12", Des12, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Type12", Type12, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Des13", Des13, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Type13", Type13, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Des14", Des14, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Type14", Type14, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Des15", Des15, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Type15", Type15, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Des16", Des16, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Type16", Type16, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Des17", Des17, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Type17", Type17, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Des18", Des18, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Type18", Type18, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Des19", Des19, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Type19", Type19, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Des20", Des20, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Type20", Type20, DbType.Int32));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		private void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the FPName _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("FPName")) == false))
				{
					FPName = ((string)(Convert.ChangeType(rs["FPName"], typeof(string))));
				}
				// if value from the recordset, to the NoOfPoint _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("NoOfPoint")) == false))
				{
					NoOfPoint = ((int)(Convert.ChangeType(rs["NoOfPoint"], typeof(int))));
				}
				// if value from the recordset, to the SolutionName _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("SolutionName")) == false))
				{
					SolutionName = ((long)(Convert.ChangeType(rs["SolutionName"], typeof(long))));
				}
				// if value from the recordset, to the Des1 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Des1")) == false))
				{
					Des1 = ((string)(Convert.ChangeType(rs["Des1"], typeof(string))));
				}
				// if value from the recordset, to the Type1 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Type1")) == false))
				{
					Type1 = ((int)(Convert.ChangeType(rs["Type1"], typeof(int))));
				}
				// if value from the recordset, to the Des2 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Des2")) == false))
				{
					Des2 = ((string)(Convert.ChangeType(rs["Des2"], typeof(string))));
				}
				// if value from the recordset, to the Type2 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Type2")) == false))
				{
					Type2 = ((int)(Convert.ChangeType(rs["Type2"], typeof(int))));
				}
				// if value from the recordset, to the Des3 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Des3")) == false))
				{
					Des3 = ((string)(Convert.ChangeType(rs["Des3"], typeof(string))));
				}
				// if value from the recordset, to the Type3 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Type3")) == false))
				{
					Type3 = ((int)(Convert.ChangeType(rs["Type3"], typeof(int))));
				}
				// if value from the recordset, to the Des4 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Des4")) == false))
				{
					Des4 = ((string)(Convert.ChangeType(rs["Des4"], typeof(string))));
				}
				// if value from the recordset, to the Type4 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Type4")) == false))
				{
					Type4 = ((int)(Convert.ChangeType(rs["Type4"], typeof(int))));
				}
				// if value from the recordset, to the Des5 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Des5")) == false))
				{
					Des5 = ((string)(Convert.ChangeType(rs["Des5"], typeof(string))));
				}
				// if value from the recordset, to the Type5 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Type5")) == false))
				{
					Type5 = ((int)(Convert.ChangeType(rs["Type5"], typeof(int))));
				}
				// if value from the recordset, to the Des6 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Des6")) == false))
				{
					Des6 = ((string)(Convert.ChangeType(rs["Des6"], typeof(string))));
				}
				// if value from the recordset, to the Type6 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Type6")) == false))
				{
					Type6 = ((int)(Convert.ChangeType(rs["Type6"], typeof(int))));
				}
				// if value from the recordset, to the Des7 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Des7")) == false))
				{
					Des7 = ((string)(Convert.ChangeType(rs["Des7"], typeof(string))));
				}
				// if value from the recordset, to the Type7 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Type7")) == false))
				{
					Type7 = ((int)(Convert.ChangeType(rs["Type7"], typeof(int))));
				}
				// if value from the recordset, to the Des8 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Des8")) == false))
				{
					Des8 = ((string)(Convert.ChangeType(rs["Des8"], typeof(string))));
				}
				// if value from the recordset, to the Type8 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Type8")) == false))
				{
					Type8 = ((int)(Convert.ChangeType(rs["Type8"], typeof(int))));
				}
				// if value from the recordset, to the Des9 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Des9")) == false))
				{
					Des9 = ((string)(Convert.ChangeType(rs["Des9"], typeof(string))));
				}
				// if value from the recordset, to the Type9 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Type9")) == false))
				{
					Type9 = ((int)(Convert.ChangeType(rs["Type9"], typeof(int))));
				}
				// if value from the recordset, to the Des10 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Des10")) == false))
				{
					Des10 = ((string)(Convert.ChangeType(rs["Des10"], typeof(string))));
				}
				// if value from the recordset, to the Type10 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Type10")) == false))
				{
					Type10 = ((int)(Convert.ChangeType(rs["Type10"], typeof(int))));
				}
				// if value from the recordset, to the Des11 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Des11")) == false))
				{
					Des11 = ((string)(Convert.ChangeType(rs["Des11"], typeof(string))));
				}
				// if value from the recordset, to the Type11 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Type11")) == false))
				{
					Type11 = ((int)(Convert.ChangeType(rs["Type11"], typeof(int))));
				}
				// if value from the recordset, to the Des12 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Des12")) == false))
				{
					Des12 = ((string)(Convert.ChangeType(rs["Des12"], typeof(string))));
				}
				// if value from the recordset, to the Type12 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Type12")) == false))
				{
					Type12 = ((int)(Convert.ChangeType(rs["Type12"], typeof(int))));
				}
				// if value from the recordset, to the Des13 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Des13")) == false))
				{
					Des13 = ((string)(Convert.ChangeType(rs["Des13"], typeof(string))));
				}
				// if value from the recordset, to the Type13 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Type13")) == false))
				{
					Type13 = ((int)(Convert.ChangeType(rs["Type13"], typeof(int))));
				}
				// if value from the recordset, to the Des14 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Des14")) == false))
				{
					Des14 = ((string)(Convert.ChangeType(rs["Des14"], typeof(string))));
				}
				// if value from the recordset, to the Type14 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Type14")) == false))
				{
					Type14 = ((int)(Convert.ChangeType(rs["Type14"], typeof(int))));
				}
				// if value from the recordset, to the Des15 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Des15")) == false))
				{
					Des15 = ((string)(Convert.ChangeType(rs["Des15"], typeof(string))));
				}
				// if value from the recordset, to the Type15 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Type15")) == false))
				{
					Type15 = ((int)(Convert.ChangeType(rs["Type15"], typeof(int))));
				}
				// if value from the recordset, to the Des16 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Des16")) == false))
				{
					Des16 = ((string)(Convert.ChangeType(rs["Des16"], typeof(string))));
				}
				// if value from the recordset, to the Type16 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Type16")) == false))
				{
					Type16 = ((int)(Convert.ChangeType(rs["Type16"], typeof(int))));
				}
				// if value from the recordset, to the Des17 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Des17")) == false))
				{
					Des17 = ((string)(Convert.ChangeType(rs["Des17"], typeof(string))));
				}
				// if value from the recordset, to the Type17 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Type17")) == false))
				{
					Type17 = ((int)(Convert.ChangeType(rs["Type17"], typeof(int))));
				}
				// if value from the recordset, to the Des18 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Des18")) == false))
				{
					Des18 = ((string)(Convert.ChangeType(rs["Des18"], typeof(string))));
				}
				// if value from the recordset, to the Type18 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Type18")) == false))
				{
					Type18 = ((int)(Convert.ChangeType(rs["Type18"], typeof(int))));
				}
				// if value from the recordset, to the Des19 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Des19")) == false))
				{
					Des19 = ((string)(Convert.ChangeType(rs["Des19"], typeof(string))));
				}
				// if value from the recordset, to the Type19 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Type19")) == false))
				{
					Type19 = ((int)(Convert.ChangeType(rs["Type19"], typeof(int))));
				}
				// if value from the recordset, to the Des20 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Des20")) == false))
				{
					Des20 = ((string)(Convert.ChangeType(rs["Des20"], typeof(string))));
				}
				// if value from the recordset, to the Type20 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Type20")) == false))
				{
					Type20 = ((int)(Convert.ChangeType(rs["Type20"], typeof(int))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblFaceplateChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblFaceplateCollection : System.Collections.CollectionBase
	{
		
		/// <remarks>SQL Type:tblFaceplateChangedEventHandler</remarks>
		public event tblFaceplateChangedEventHandler tblFaceplateChanged;
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblSolution _SolutionName_tblSolution;
		
		[Description("Represents the foreign key object of the type SolutionName")]
		public tblSolution m_SolutionName_tblSolution
		{
			get
			{
				return _SolutionName_tblSolution;
			}
			set
			{
				_SolutionName_tblSolution = value;
			}
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblFaceplateChanged(System.EventArgs e)
		{
			if (tblFaceplateChanged != null)
			{
				this.tblFaceplateChanged(this, e);
			}
		}
		
		[Description("Gets a  tblFaceplate from the collection.")]
		public tblFaceplate this[int index]
		{
			get
			{
				return ((tblFaceplate)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblFaceplateChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblFaceplate from the collection.")]
		public tblFaceplate Get(int index)
		{
			return ((tblFaceplate)(List[index]));
		}
		
		[Description("Adds a new tblFaceplate to the collection.")]
		public int Add(tblFaceplate item)
		{
			int newindex = List.Add(item);
			this.OntblFaceplateChanged(EventArgs.Empty);
			return newindex;
		}
		
		[Description("Removes a tblFaceplate from the collection.")]
		public void Remove(tblFaceplate item)
		{
			List.Remove(item);
			this.OntblFaceplateChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblFaceplate into the collection at the specified index.")]
		public void Insert(int index, tblFaceplate item)
		{
			List.Insert(index, item);
			this.OntblFaceplateChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblFaceplate class in the collection.")]
		public int IndexOf(tblFaceplate item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblFaceplate class is present in the collection.")]
		public bool Contains(tblFaceplate item)
		{
			return List.Contains(item);
		}
	}
}
