//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;


namespace DCS.DCSTables
{


    public partial class tblBlock : SQLiteTable
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblBlock.</remarks>
		internal static string SQL_Insert = @"INSERT INTO [tblBlock] ([DisplayID], [SymbolID], [oIndex], [DlgType], [DlgIndex], [Left], [Top], [Value], [Orientation], [Inverse], [ScaleX], [ScaleY], [HasLevel], [Param], [ValueID], [ShowState], [LastRev], [validexpression]) VALUES(@DisplayID, @SymbolID, @oIndex, @DlgType, @DlgIndex, @Left, @Top, @Value, @Orientation, @Inverse, @ScaleX, @ScaleY, @HasLevel, @Param, @ValueID, @ShowState, @LastRev, @validexpression) ; select last_insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblBlock, with the WHERE clause.</remarks>
		internal static string SQL_Update = @"UPDATE [tblBlock] SET [DisplayID] = @DisplayID, [SymbolID] = @SymbolID, [oIndex] = @oIndex, [DlgType] = @DlgType, [DlgIndex] = @DlgIndex, [Left] = @Left, [Top] = @Top, [Value] = @Value, [Orientation] = @Orientation, [Inverse] = @Inverse, [ScaleX] = @ScaleX, [ScaleY] = @ScaleY, [HasLevel] = @HasLevel, [Param] = @Param, [ValueID] = @ValueID, [ShowState] = @ShowState, [LastRev] = @LastRev, [validexpression] = @validexpression WHERE [ID]=@ID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblBlock, with the WHERE clause.</remarks>
		internal static string SQL_Select = "SELECT [DisplayID], [SymbolID], [oIndex], [DlgType], [DlgIndex], [Left], [Top], [" +
			"Value], [Orientation], [Inverse], [ScaleX], [ScaleY], [HasLevel], [Param], [Valu" +
			"eID], [ShowState], [LastRev], [validexpression] FROM [tblBlock] WHERE [ID]=@ID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblBlock, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblBlock] WHERE [ID]=@ID ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _ID = -1;
		
		[DisplayName("ID")]
		[Category("Primary Key")]
		public long ID
		{
			get
			{
				return _ID;
			}
			set
			{
				_ID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _DisplayID = -1;
		
		[DisplayName("Display ID")]
		[Category("Foreign Key")]
		public long DisplayID
		{
			get
			{
				return _DisplayID;
			}
			set
			{
				_DisplayID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _SymbolID = -1;
		
		[DisplayName("Symbol ID")]
		[Category("Column")]
		public long SymbolID
		{
			get
			{
				return _SymbolID;
			}
			set
			{
				_SymbolID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _oIndex;
		
		[DisplayName("o Index")]
		[Category("Column")]
		public int oIndex
		{
			get
			{
				return _oIndex;
			}
			set
			{
				_oIndex = value;
			}
		}
		
		/// <remarks>SQL Type:System.Byte</remarks>
		private byte _DlgType;
		
		[DisplayName("Dlg Type")]
		[Category("Column")]
		public byte DlgType
		{
			get
			{
				return _DlgType;
			}
			set
			{
				_DlgType = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _DlgIndex;
		
		[DisplayName("Dlg Index")]
		[Category("Column")]
		public int DlgIndex
		{
			get
			{
				return _DlgIndex;
			}
			set
			{
				_DlgIndex = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Left;
		
		[DisplayName("Left")]
		[Category("Column")]
		public int Left
		{
			get
			{
				return _Left;
			}
			set
			{
				_Left = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Top;
		
		[DisplayName("Top")]
		[Category("Column")]
		public int Top
		{
			get
			{
				return _Top;
			}
			set
			{
				_Top = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Value = "";
		
		[DisplayName("Value")]
		[Category("Column")]
		public string Value
		{
			get
			{
				return _Value;
			}
			set
			{
				_Value = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _Orientation;
		
		[DisplayName("Orientation")]
		[Category("Column")]
		public short Orientation
		{
			get
			{
				return _Orientation;
			}
			set
			{
				_Orientation = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Inverse;
		
		[DisplayName("Inverse")]
		[Category("Column")]
		public int Inverse
		{
			get
			{
				return _Inverse;
			}
			set
			{
				_Inverse = value;
			}
		}
		
		/// <remarks>SQL Type:System.Double</remarks>
		private double _ScaleX;
		
		[DisplayName("Scale X")]
		[Category("Column")]
		public double ScaleX
		{
			get
			{
				return _ScaleX;
			}
			set
			{
				_ScaleX = value;
			}
		}
		
		/// <remarks>SQL Type:System.Double</remarks>
		private double _ScaleY;
		
		[DisplayName("Scale Y")]
		[Category("Column")]
		public double ScaleY
		{
			get
			{
				return _ScaleY;
			}
			set
			{
				_ScaleY = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _HasLevel;
		
		[DisplayName("Has Level")]
		[Category("Column")]
		public short HasLevel
		{
			get
			{
				return _HasLevel;
			}
			set
			{
				_HasLevel = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _Param;
		
		[DisplayName("Param")]
		[Category("Column")]
		public short Param
		{
			get
			{
				return _Param;
			}
			set
			{
				_Param = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _ValueID;
		
		[DisplayName("Value ID")]
		[Category("Column")]
		public int ValueID
		{
			get
			{
				return _ValueID;
			}
			set
			{
				_ValueID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Byte</remarks>
		private byte _ShowState;
		
		[DisplayName("Show State")]
		[Category("Column")]
		public byte ShowState
		{
			get
			{
				return _ShowState;
			}
			set
			{
				_ShowState = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _LastRev;
		
		[DisplayName("Last Rev")]
		[Category("Column")]
		public bool LastRev
		{
			get
			{
				return _LastRev;
			}
			set
			{
				_LastRev = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _validexpression;
		
		[DisplayName("validexpression")]
		[Category("Column")]
		public bool validexpression
		{
			get
			{
				return _validexpression;
			}
			set
			{
				_validexpression = value;
			}
		}
		#endregion
		
		#region Related Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblDisplay _DisplayID_tblDisplay;
		
		[Description("Represents the foreign key object of the type DisplayID")]
		public tblDisplay m_DisplayID_tblDisplay
		{
			get
			{
				return _DisplayID_tblDisplay;
			}
			set
			{
				_DisplayID_tblDisplay = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblBlock.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblBlock.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblBlock.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				ID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblBlock.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public tblBlock()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@ID", ID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@DisplayID", DisplayID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@SymbolID", SymbolID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@oIndex", oIndex, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@DlgType", DlgType, DbType.Byte));
				SqlParmColl.Add(CommonDB.AddSqlParm("@DlgIndex", DlgIndex, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Left", Left, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Top", Top, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Value", Value, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Orientation", Orientation, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Inverse", Inverse, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@ScaleX", ScaleX, DbType.Double));
				SqlParmColl.Add(CommonDB.AddSqlParm("@ScaleY", ScaleY, DbType.Double));
				SqlParmColl.Add(CommonDB.AddSqlParm("@HasLevel", HasLevel, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Param", Param, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@ValueID", ValueID, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@ShowState", ShowState, DbType.Byte));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LastRev", LastRev, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@validexpression", validexpression, DbType.Boolean));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		public void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the ID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ID")) == false))
				{
					ID = ((long)(Convert.ChangeType(rs["ID"], typeof(long))));
				}
				// if value from the recordset, to the DisplayID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("DisplayID")) == false))
				{
					DisplayID = ((long)(Convert.ChangeType(rs["DisplayID"], typeof(long))));
				}
				// if value from the recordset, to the SymbolID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("SymbolID")) == false))
				{
					SymbolID = ((long)(Convert.ChangeType(rs["SymbolID"], typeof(long))));
				}
				// if value from the recordset, to the oIndex _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("oIndex")) == false))
				{
					oIndex = ((int)(Convert.ChangeType(rs["oIndex"], typeof(int))));
				}
				// if value from the recordset, to the DlgType _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("DlgType")) == false))
				{
					DlgType = ((byte)(Convert.ChangeType(rs["DlgType"], typeof(byte))));
				}
				// if value from the recordset, to the DlgIndex _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("DlgIndex")) == false))
				{
					DlgIndex = ((int)(Convert.ChangeType(rs["DlgIndex"], typeof(int))));
				}
				// if value from the recordset, to the Left _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Left")) == false))
				{
					Left = ((int)(Convert.ChangeType(rs["Left"], typeof(int))));
				}
				// if value from the recordset, to the Top _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Top")) == false))
				{
					Top = ((int)(Convert.ChangeType(rs["Top"], typeof(int))));
				}
				// if value from the recordset, to the Value _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Value")) == false))
				{
					Value = ((string)(Convert.ChangeType(rs["Value"], typeof(string))));
				}
				// if value from the recordset, to the Orientation _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Orientation")) == false))
				{
					Orientation = ((short)(Convert.ChangeType(rs["Orientation"], typeof(short))));
				}
				// if value from the recordset, to the Inverse _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Inverse")) == false))
				{
					Inverse = ((int)(Convert.ChangeType(rs["Inverse"], typeof(int))));
				}
				// if value from the recordset, to the ScaleX _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ScaleX")) == false))
				{
					ScaleX = ((double)(Convert.ChangeType(rs["ScaleX"], typeof(double))));
				}
				// if value from the recordset, to the ScaleY _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ScaleY")) == false))
				{
					ScaleY = ((double)(Convert.ChangeType(rs["ScaleY"], typeof(double))));
				}
				// if value from the recordset, to the HasLevel _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("HasLevel")) == false))
				{
					HasLevel = ((short)(Convert.ChangeType(rs["HasLevel"], typeof(short))));
				}
				// if value from the recordset, to the Param _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Param")) == false))
				{
					Param = ((short)(Convert.ChangeType(rs["Param"], typeof(short))));
				}
				// if value from the recordset, to the ValueID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ValueID")) == false))
				{
					ValueID = ((int)(Convert.ChangeType(rs["ValueID"], typeof(int))));
				}
				// if value from the recordset, to the ShowState _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ShowState")) == false))
				{
					ShowState = ((byte)(Convert.ChangeType(rs["ShowState"], typeof(byte))));
				}
				// if value from the recordset, to the LastRev _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LastRev")) == false))
				{
					LastRev = ((bool)(Convert.ChangeType(rs["LastRev"], typeof(bool))));
				}
				// if value from the recordset, to the validexpression _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("validexpression")) == false))
				{
					validexpression = ((bool)(Convert.ChangeType(rs["validexpression"], typeof(bool))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		
		public override void AddFromString(string[] _strs, string arg1, ref string _log)
		{
			try
			{
				this.PreAddFromString(ref _log);
				int i;
				i = this.ColumnExistInHeader("DisplayID");
				if ((i >= 0))
				{
					DisplayID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("SymbolID");
				if ((i >= 0))
				{
					SymbolID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("oIndex");
				if ((i >= 0))
				{
					oIndex = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("DlgType");
				if ((i >= 0))
				{
					DlgType = ((byte)(Convert.ChangeType(_strs[i], typeof(byte))));
				}
				i = this.ColumnExistInHeader("DlgIndex");
				if ((i >= 0))
				{
					DlgIndex = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Left");
				if ((i >= 0))
				{
					Left = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Top");
				if ((i >= 0))
				{
					Top = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Value");
				if ((i >= 0))
				{
					Value = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Orientation");
				if ((i >= 0))
				{
					Orientation = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("Inverse");
				if ((i >= 0))
				{
					Inverse = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("ScaleX");
				if ((i >= 0))
				{
					ScaleX = ((double)(Convert.ChangeType(_strs[i], typeof(double))));
				}
				i = this.ColumnExistInHeader("ScaleY");
				if ((i >= 0))
				{
					ScaleY = ((double)(Convert.ChangeType(_strs[i], typeof(double))));
				}
				i = this.ColumnExistInHeader("HasLevel");
				if ((i >= 0))
				{
					HasLevel = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("Param");
				if ((i >= 0))
				{
					Param = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("ValueID");
				if ((i >= 0))
				{
					ValueID = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("ShowState");
				if ((i >= 0))
				{
					ShowState = ((byte)(Convert.ChangeType(_strs[i], typeof(byte))));
				}
				i = this.ColumnExistInHeader("LastRev");
				if ((i >= 0))
				{
					LastRev = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("validexpression");
				if ((i >= 0))
				{
					validexpression = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				this.PostAddFromString(ref _log);
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblBlockChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblBlockCollection : SQLiteTableCollection
	{
		
		/// <remarks>SQL Type:tblBlockChangedEventHandler</remarks>
		public event tblBlockChangedEventHandler tblBlockChanged;
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblDisplay _DisplayID_tblDisplay;
		
		[Description("Represents the foreign key object of the type DisplayID")]
		public tblDisplay m_DisplayID_tblDisplay
		{
			get
			{
				return _DisplayID_tblDisplay;
			}
			set
			{
				_DisplayID_tblDisplay = value;
			}
		}
		
		[Description("Constructor")]
		public tblBlockCollection(tblDisplay _parent)
		{
			_DisplayID_tblDisplay = _parent;
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblBlockChanged(System.EventArgs e)
		{
			if (tblBlockChanged != null)
			{
				this.tblBlockChanged(this, e);
			}
		}
		
		[Description("Gets a  tblBlock from the collection.")]
		public tblBlock this[int index]
		{
			get
			{
				return ((tblBlock)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblBlockChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblBlock from the collection.")]
		public tblBlock Get(int index)
		{
			return ((tblBlock)(List[index]));
		}
		
		[Description("Adds a new tblBlock to the collection.")]
		public void Add(tblBlock item)
		{
			List.Add(item);
			this.OntblBlockChanged(EventArgs.Empty);
		}
		
		[Description("Removes a tblBlock from the collection.")]
		public void Remove(tblBlock item)
		{
			List.Remove(item);
			this.OntblBlockChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblBlock into the collection at the specified index.")]
		public void Insert(int index, tblBlock item)
		{
			List.Insert(index, item);
			this.OntblBlockChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblBlock class in the collection.")]
		public int IndexOf(tblBlock item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblBlock class is present in the collection.")]
		public bool Contains(tblBlock item)
		{
			return List.Contains(item);
		}
	}
}
