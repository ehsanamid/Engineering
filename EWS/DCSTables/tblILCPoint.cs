//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;


namespace DCS.DCSTables
{


    public partial class tblILCPoint : SQLiteTable
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblILCPoint.</remarks>
		internal static string SQL_Insert = "INSERT INTO [tblILCPoint] ([SourceVarID], [SourceNodeNo], [DestinationVarID], [De" +
			"stinationNodeID]) VALUES(@SourceVarID, @SourceNodeNo, @DestinationVarID, @Destin" +
			"ationNodeID) ; select last_insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblILCPoint, with the WHERE clause.</remarks>
		internal static string SQL_Update = "UPDATE [tblILCPoint] SET [SourceVarID] = @SourceVarID, [SourceNodeNo] = @SourceNo" +
			"deNo, [DestinationVarID] = @DestinationVarID, [DestinationNodeID] = @Destination" +
			"NodeID WHERE [ID]=@ID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblILCPoint, with the WHERE clause.</remarks>
		internal static string SQL_Select = "SELECT [SourceVarID], [SourceNodeNo], [DestinationVarID], [DestinationNodeID] FRO" +
			"M [tblILCPoint] WHERE [ID]=@ID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblILCPoint, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblILCPoint] WHERE [ID]=@ID ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _ID = -1;
		
		[DisplayName("ID")]
		[Category("Primary Key")]
		public long ID
		{
			get
			{
				return _ID;
			}
			set
			{
				_ID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _SourceVarID = -1;
		
		[DisplayName("Source Var ID")]
		[Category("Column")]
		public long SourceVarID
		{
			get
			{
				return _SourceVarID;
			}
			set
			{
				_SourceVarID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _SourceNodeNo;
		
		[DisplayName("Source Node No")]
		[Category("Column")]
		public short SourceNodeNo
		{
			get
			{
				return _SourceNodeNo;
			}
			set
			{
				_SourceNodeNo = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _DestinationVarID = -1;
		
		[DisplayName("Destination Var ID")]
		[Category("Column")]
		public long DestinationVarID
		{
			get
			{
				return _DestinationVarID;
			}
			set
			{
				_DestinationVarID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _DestinationNodeID;
		
		[DisplayName("Destination Node ID")]
		[Category("Column")]
		public short DestinationNodeID
		{
			get
			{
				return _DestinationNodeID;
			}
			set
			{
				_DestinationNodeID = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblILCPoint.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblILCPoint.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblILCPoint.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				ID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblILCPoint.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public tblILCPoint()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@ID", ID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@SourceVarID", SourceVarID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@SourceNodeNo", SourceNodeNo, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@DestinationVarID", DestinationVarID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@DestinationNodeID", DestinationNodeID, DbType.Int16));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		public void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the ID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ID")) == false))
				{
					ID = ((long)(Convert.ChangeType(rs["ID"], typeof(long))));
				}
				// if value from the recordset, to the SourceVarID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("SourceVarID")) == false))
				{
					SourceVarID = ((long)(Convert.ChangeType(rs["SourceVarID"], typeof(long))));
				}
				// if value from the recordset, to the SourceNodeNo _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("SourceNodeNo")) == false))
				{
					SourceNodeNo = ((short)(Convert.ChangeType(rs["SourceNodeNo"], typeof(short))));
				}
				// if value from the recordset, to the DestinationVarID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("DestinationVarID")) == false))
				{
					DestinationVarID = ((long)(Convert.ChangeType(rs["DestinationVarID"], typeof(long))));
				}
				// if value from the recordset, to the DestinationNodeID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("DestinationNodeID")) == false))
				{
					DestinationNodeID = ((short)(Convert.ChangeType(rs["DestinationNodeID"], typeof(short))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		
		public override void AddFromString(string[] _strs, string arg1, ref string _log)
		{
			try
			{
				this.PreAddFromString(ref _log);
				int i;
				i = this.ColumnExistInHeader("SourceVarID");
				if ((i >= 0))
				{
					SourceVarID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("SourceNodeNo");
				if ((i >= 0))
				{
					SourceNodeNo = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("DestinationVarID");
				if ((i >= 0))
				{
					DestinationVarID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("DestinationNodeID");
				if ((i >= 0))
				{
					DestinationNodeID = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				this.PostAddFromString(ref _log);
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblILCPointChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblILCPointCollection : SQLiteTableCollection
	{
		
		/// <remarks>SQL Type:tblILCPointChangedEventHandler</remarks>
		public event tblILCPointChangedEventHandler tblILCPointChanged;
		
		[Description("Constructor")]
		public tblILCPointCollection()
		{
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblILCPointChanged(System.EventArgs e)
		{
			if (tblILCPointChanged != null)
			{
				this.tblILCPointChanged(this, e);
			}
		}
		
		[Description("Gets a  tblILCPoint from the collection.")]
		public tblILCPoint this[int index]
		{
			get
			{
				return ((tblILCPoint)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblILCPointChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblILCPoint from the collection.")]
		public tblILCPoint Get(int index)
		{
			return ((tblILCPoint)(List[index]));
		}
		
		[Description("Adds a new tblILCPoint to the collection.")]
		public void Add(tblILCPoint item)
		{
			List.Add(item);
			this.OntblILCPointChanged(EventArgs.Empty);
		}
		
		[Description("Removes a tblILCPoint from the collection.")]
		public void Remove(tblILCPoint item)
		{
			List.Remove(item);
			this.OntblILCPointChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblILCPoint into the collection at the specified index.")]
		public void Insert(int index, tblILCPoint item)
		{
			List.Insert(index, item);
			this.OntblILCPointChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblILCPoint class in the collection.")]
		public int IndexOf(tblILCPoint item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblILCPoint class is present in the collection.")]
		public bool Contains(tblILCPoint item)
		{
			return List.Contains(item);
		}
	}
}
