//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;
using System.Data.SqlClient;
using System.Drawing;
using System.Text;
using System.Windows.Forms;


namespace EWS.DCSTables
{
	
	
	public partial class tblAnalog : Object
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblAnalog.</remarks>
		internal static string SQL_Insert = @"INSERT INTO [tblAnalog] ([VarNameID], [PointIndex], [SampleTime], [PointGroup], [UNI], [FOR], [IRL_LIM], [IRL_EBL], [IRL_TXT], [IRL_AUD], [IRL_TYP], [IRL_PRN], [IRH_LIM], [IRH_EBL], [IRH_TXT], [IRH_AUD], [IRH_TYP], [IRH_PRN], [LL_LIM], [LL_EBL], [LL_TXT], [LL_AUD], [LL_TYP], [LL_PRN], [HH_LIM], [HH_EBL], [HH_TXT], [HH_AUD], [HH_TYP], [HH_PRN], [L_LIM], [L_EBL], [L_TXT], [L_AUD], [L_TYP], [L_PRN], [H_LIM], [H_EBL], [H_TXT], [H_AUD], [H_TYP], [H_PRN], [Hystersis], [RTT], [Interval]) VALUES(@VarNameID, @PointIndex, @SampleTime, @PointGroup, @UNI, @FOR, @IRL_LIM, @IRL_EBL, @IRL_TXT, @IRL_AUD, @IRL_TYP, @IRL_PRN, @IRH_LIM, @IRH_EBL, @IRH_TXT, @IRH_AUD, @IRH_TYP, @IRH_PRN, @LL_LIM, @LL_EBL, @LL_TXT, @LL_AUD, @LL_TYP, @LL_PRN, @HH_LIM, @HH_EBL, @HH_TXT, @HH_AUD, @HH_TYP, @HH_PRN, @L_LIM, @L_EBL, @L_TXT, @L_AUD, @L_TYP, @L_PRN, @H_LIM, @H_EBL, @H_TXT, @H_AUD, @H_TYP, @H_PRN, @Hystersis, @RTT, @Interval) ; select last_insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblAnalog, with the WHERE clause.</remarks>
		internal static string SQL_Update = @"UPDATE [tblAnalog] SET [VarNameID] = @VarNameID, [PointIndex] = @PointIndex, [SampleTime] = @SampleTime, [PointGroup] = @PointGroup, [UNI] = @UNI, [FOR] = @FOR, [IRL_LIM] = @IRL_LIM, [IRL_EBL] = @IRL_EBL, [IRL_TXT] = @IRL_TXT, [IRL_AUD] = @IRL_AUD, [IRL_TYP] = @IRL_TYP, [IRL_PRN] = @IRL_PRN, [IRH_LIM] = @IRH_LIM, [IRH_EBL] = @IRH_EBL, [IRH_TXT] = @IRH_TXT, [IRH_AUD] = @IRH_AUD, [IRH_TYP] = @IRH_TYP, [IRH_PRN] = @IRH_PRN, [LL_LIM] = @LL_LIM, [LL_EBL] = @LL_EBL, [LL_TXT] = @LL_TXT, [LL_AUD] = @LL_AUD, [LL_TYP] = @LL_TYP, [LL_PRN] = @LL_PRN, [HH_LIM] = @HH_LIM, [HH_EBL] = @HH_EBL, [HH_TXT] = @HH_TXT, [HH_AUD] = @HH_AUD, [HH_TYP] = @HH_TYP, [HH_PRN] = @HH_PRN, [L_LIM] = @L_LIM, [L_EBL] = @L_EBL, [L_TXT] = @L_TXT, [L_AUD] = @L_AUD, [L_TYP] = @L_TYP, [L_PRN] = @L_PRN, [H_LIM] = @H_LIM, [H_EBL] = @H_EBL, [H_TXT] = @H_TXT, [H_AUD] = @H_AUD, [H_TYP] = @H_TYP, [H_PRN] = @H_PRN, [Hystersis] = @Hystersis, [RTT] = @RTT, [Interval] = @Interval WHERE [AnalogID]=@AnalogID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblAnalog, with the WHERE clause.</remarks>
		internal static string SQL_Select = @"SELECT [VarNameID], [PointIndex], [SampleTime], [PointGroup], [UNI], [FOR], [IRL_LIM], [IRL_EBL], [IRL_TXT], [IRL_AUD], [IRL_TYP], [IRL_PRN], [IRH_LIM], [IRH_EBL], [IRH_TXT], [IRH_AUD], [IRH_TYP], [IRH_PRN], [LL_LIM], [LL_EBL], [LL_TXT], [LL_AUD], [LL_TYP], [LL_PRN], [HH_LIM], [HH_EBL], [HH_TXT], [HH_AUD], [HH_TYP], [HH_PRN], [L_LIM], [L_EBL], [L_TXT], [L_AUD], [L_TYP], [L_PRN], [H_LIM], [H_EBL], [H_TXT], [H_AUD], [H_TYP], [H_PRN], [Hystersis], [RTT], [Interval] FROM [tblAnalog] WHERE [AnalogID]=@AnalogID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblAnalog, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblAnalog] WHERE [AnalogID]=@AnalogID ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _VarNameID;
		
		[DisplayName("Var Name ID")]
		[Category("Foreign Key")]
		public long VarNameID
		{
			get
			{
				return _VarNameID;
			}
			set
			{
				_VarNameID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _AnalogID;
		
		[DisplayName("Analog ID")]
		[Category("Primary Key")]
		public long AnalogID
		{
			get
			{
				return _AnalogID;
			}
			set
			{
				_AnalogID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _PointIndex;
		
		[DisplayName("Point Index")]
		[Category("Column")]
		public int PointIndex
		{
			get
			{
				return _PointIndex;
			}
			set
			{
				_PointIndex = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _SampleTime;
		
		[DisplayName("Sample Time")]
		[Category("Column")]
		public int SampleTime
		{
			get
			{
				return _SampleTime;
			}
			set
			{
				_SampleTime = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _PointGroup;
		
		[DisplayName("Point Group")]
		[Category("Column")]
		public int PointGroup
		{
			get
			{
				return _PointGroup;
			}
			set
			{
				_PointGroup = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _UNI;
		
		[DisplayName("UNI")]
		[Category("Column")]
		public string UNI
		{
			get
			{
				return _UNI;
			}
			set
			{
				_UNI = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _FOR;
		
		[DisplayName("FOR")]
		[Category("Column")]
		public string FOR
		{
			get
			{
				return _FOR;
			}
			set
			{
				_FOR = value;
			}
		}
		
		/// <remarks>SQL Type:System.Single</remarks>
		private float _IRL_LIM;
		
		[DisplayName("IRL_LIM")]
		[Category("Column")]
		public float IRL_LIM
		{
			get
			{
				return _IRL_LIM;
			}
			set
			{
				_IRL_LIM = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _IRL_EBL;
		
		[DisplayName("IRL_EBL")]
		[Category("Column")]
		public bool IRL_EBL
		{
			get
			{
				return _IRL_EBL;
			}
			set
			{
				_IRL_EBL = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _IRL_TXT;
		
		[DisplayName("IRL_TXT")]
		[Category("Column")]
		public string IRL_TXT
		{
			get
			{
				return _IRL_TXT;
			}
			set
			{
				_IRL_TXT = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _IRL_AUD;
		
		[DisplayName("IRL_AUD")]
		[Category("Column")]
		public int IRL_AUD
		{
			get
			{
				return _IRL_AUD;
			}
			set
			{
				_IRL_AUD = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _IRL_TYP;
		
		[DisplayName("IRL_TYP")]
		[Category("Column")]
		public int IRL_TYP
		{
			get
			{
				return _IRL_TYP;
			}
			set
			{
				_IRL_TYP = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _IRL_PRN;
		
		[DisplayName("IRL_PRN")]
		[Category("Column")]
		public int IRL_PRN
		{
			get
			{
				return _IRL_PRN;
			}
			set
			{
				_IRL_PRN = value;
			}
		}
		
		/// <remarks>SQL Type:System.Single</remarks>
		private float _IRH_LIM;
		
		[DisplayName("IRH_LIM")]
		[Category("Column")]
		public float IRH_LIM
		{
			get
			{
				return _IRH_LIM;
			}
			set
			{
				_IRH_LIM = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _IRH_EBL;
		
		[DisplayName("IRH_EBL")]
		[Category("Column")]
		public bool IRH_EBL
		{
			get
			{
				return _IRH_EBL;
			}
			set
			{
				_IRH_EBL = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _IRH_TXT;
		
		[DisplayName("IRH_TXT")]
		[Category("Column")]
		public string IRH_TXT
		{
			get
			{
				return _IRH_TXT;
			}
			set
			{
				_IRH_TXT = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _IRH_AUD;
		
		[DisplayName("IRH_AUD")]
		[Category("Column")]
		public int IRH_AUD
		{
			get
			{
				return _IRH_AUD;
			}
			set
			{
				_IRH_AUD = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _IRH_TYP;
		
		[DisplayName("IRH_TYP")]
		[Category("Column")]
		public int IRH_TYP
		{
			get
			{
				return _IRH_TYP;
			}
			set
			{
				_IRH_TYP = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _IRH_PRN;
		
		[DisplayName("IRH_PRN")]
		[Category("Column")]
		public int IRH_PRN
		{
			get
			{
				return _IRH_PRN;
			}
			set
			{
				_IRH_PRN = value;
			}
		}
		
		/// <remarks>SQL Type:System.Single</remarks>
		private float _LL_LIM;
		
		[DisplayName("LL_LIM")]
		[Category("Column")]
		public float LL_LIM
		{
			get
			{
				return _LL_LIM;
			}
			set
			{
				_LL_LIM = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _LL_EBL;
		
		[DisplayName("LL_EBL")]
		[Category("Column")]
		public bool LL_EBL
		{
			get
			{
				return _LL_EBL;
			}
			set
			{
				_LL_EBL = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _LL_TXT;
		
		[DisplayName("LL_TXT")]
		[Category("Column")]
		public string LL_TXT
		{
			get
			{
				return _LL_TXT;
			}
			set
			{
				_LL_TXT = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _LL_AUD;
		
		[DisplayName("LL_AUD")]
		[Category("Column")]
		public int LL_AUD
		{
			get
			{
				return _LL_AUD;
			}
			set
			{
				_LL_AUD = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _LL_TYP;
		
		[DisplayName("LL_TYP")]
		[Category("Column")]
		public int LL_TYP
		{
			get
			{
				return _LL_TYP;
			}
			set
			{
				_LL_TYP = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _LL_PRN;
		
		[DisplayName("LL_PRN")]
		[Category("Column")]
		public int LL_PRN
		{
			get
			{
				return _LL_PRN;
			}
			set
			{
				_LL_PRN = value;
			}
		}
		
		/// <remarks>SQL Type:System.Single</remarks>
		private float _HH_LIM;
		
		[DisplayName("HH_LIM")]
		[Category("Column")]
		public float HH_LIM
		{
			get
			{
				return _HH_LIM;
			}
			set
			{
				_HH_LIM = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _HH_EBL;
		
		[DisplayName("HH_EBL")]
		[Category("Column")]
		public bool HH_EBL
		{
			get
			{
				return _HH_EBL;
			}
			set
			{
				_HH_EBL = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _HH_TXT;
		
		[DisplayName("HH_TXT")]
		[Category("Column")]
		public string HH_TXT
		{
			get
			{
				return _HH_TXT;
			}
			set
			{
				_HH_TXT = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _HH_AUD;
		
		[DisplayName("HH_AUD")]
		[Category("Column")]
		public int HH_AUD
		{
			get
			{
				return _HH_AUD;
			}
			set
			{
				_HH_AUD = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _HH_TYP;
		
		[DisplayName("HH_TYP")]
		[Category("Column")]
		public int HH_TYP
		{
			get
			{
				return _HH_TYP;
			}
			set
			{
				_HH_TYP = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _HH_PRN;
		
		[DisplayName("HH_PRN")]
		[Category("Column")]
		public int HH_PRN
		{
			get
			{
				return _HH_PRN;
			}
			set
			{
				_HH_PRN = value;
			}
		}
		
		/// <remarks>SQL Type:System.Single</remarks>
		private float _L_LIM;
		
		[DisplayName("L_LIM")]
		[Category("Column")]
		public float L_LIM
		{
			get
			{
				return _L_LIM;
			}
			set
			{
				_L_LIM = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _L_EBL;
		
		[DisplayName("L_EBL")]
		[Category("Column")]
		public bool L_EBL
		{
			get
			{
				return _L_EBL;
			}
			set
			{
				_L_EBL = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _L_TXT;
		
		[DisplayName("L_TXT")]
		[Category("Column")]
		public string L_TXT
		{
			get
			{
				return _L_TXT;
			}
			set
			{
				_L_TXT = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _L_AUD;
		
		[DisplayName("L_AUD")]
		[Category("Column")]
		public int L_AUD
		{
			get
			{
				return _L_AUD;
			}
			set
			{
				_L_AUD = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _L_TYP;
		
		[DisplayName("L_TYP")]
		[Category("Column")]
		public int L_TYP
		{
			get
			{
				return _L_TYP;
			}
			set
			{
				_L_TYP = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _L_PRN;
		
		[DisplayName("L_PRN")]
		[Category("Column")]
		public int L_PRN
		{
			get
			{
				return _L_PRN;
			}
			set
			{
				_L_PRN = value;
			}
		}
		
		/// <remarks>SQL Type:System.Single</remarks>
		private float _H_LIM;
		
		[DisplayName("H_LIM")]
		[Category("Column")]
		public float H_LIM
		{
			get
			{
				return _H_LIM;
			}
			set
			{
				_H_LIM = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _H_EBL;
		
		[DisplayName("H_EBL")]
		[Category("Column")]
		public bool H_EBL
		{
			get
			{
				return _H_EBL;
			}
			set
			{
				_H_EBL = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _H_TXT;
		
		[DisplayName("H_TXT")]
		[Category("Column")]
		public string H_TXT
		{
			get
			{
				return _H_TXT;
			}
			set
			{
				_H_TXT = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _H_AUD;
		
		[DisplayName("H_AUD")]
		[Category("Column")]
		public int H_AUD
		{
			get
			{
				return _H_AUD;
			}
			set
			{
				_H_AUD = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _H_TYP;
		
		[DisplayName("H_TYP")]
		[Category("Column")]
		public int H_TYP
		{
			get
			{
				return _H_TYP;
			}
			set
			{
				_H_TYP = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _H_PRN;
		
		[DisplayName("H_PRN")]
		[Category("Column")]
		public int H_PRN
		{
			get
			{
				return _H_PRN;
			}
			set
			{
				_H_PRN = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Hystersis;
		
		[DisplayName("Hystersis")]
		[Category("Column")]
		public int Hystersis
		{
			get
			{
				return _Hystersis;
			}
			set
			{
				_Hystersis = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _RTT;
		
		[DisplayName("RTT")]
		[Category("Column")]
		public bool RTT
		{
			get
			{
				return _RTT;
			}
			set
			{
				_RTT = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Interval;
		
		[DisplayName("Interval")]
		[Category("Column")]
		public int Interval
		{
			get
			{
				return _Interval;
			}
			set
			{
				_Interval = value;
			}
		}
		#endregion
		
		#region Related Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblVariable _VarNameID_tblVariable;
		
		[Description("Represents the foreign key object of the type VarNameID")]
		public tblVariable m_VarNameID_tblVariable
		{
			get
			{
				return _VarNameID_tblVariable;
			}
			set
			{
				_VarNameID_tblVariable = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblAnalog.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblAnalog.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblAnalog.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				AnalogID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblAnalog.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public tblAnalog()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID", VarNameID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@AnalogID", AnalogID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@PointIndex", PointIndex, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@SampleTime", SampleTime, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@PointGroup", PointGroup, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@UNI", UNI, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@FOR", FOR, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@IRL_LIM", IRL_LIM, DbType.Single));
				SqlParmColl.Add(CommonDB.AddSqlParm("@IRL_EBL", IRL_EBL, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@IRL_TXT", IRL_TXT, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@IRL_AUD", IRL_AUD, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@IRL_TYP", IRL_TYP, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@IRL_PRN", IRL_PRN, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@IRH_LIM", IRH_LIM, DbType.Single));
				SqlParmColl.Add(CommonDB.AddSqlParm("@IRH_EBL", IRH_EBL, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@IRH_TXT", IRH_TXT, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@IRH_AUD", IRH_AUD, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@IRH_TYP", IRH_TYP, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@IRH_PRN", IRH_PRN, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LL_LIM", LL_LIM, DbType.Single));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LL_EBL", LL_EBL, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LL_TXT", LL_TXT, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LL_AUD", LL_AUD, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LL_TYP", LL_TYP, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LL_PRN", LL_PRN, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@HH_LIM", HH_LIM, DbType.Single));
				SqlParmColl.Add(CommonDB.AddSqlParm("@HH_EBL", HH_EBL, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@HH_TXT", HH_TXT, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@HH_AUD", HH_AUD, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@HH_TYP", HH_TYP, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@HH_PRN", HH_PRN, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@L_LIM", L_LIM, DbType.Single));
				SqlParmColl.Add(CommonDB.AddSqlParm("@L_EBL", L_EBL, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@L_TXT", L_TXT, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@L_AUD", L_AUD, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@L_TYP", L_TYP, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@L_PRN", L_PRN, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@H_LIM", H_LIM, DbType.Single));
				SqlParmColl.Add(CommonDB.AddSqlParm("@H_EBL", H_EBL, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@H_TXT", H_TXT, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@H_AUD", H_AUD, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@H_TYP", H_TYP, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@H_PRN", H_PRN, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Hystersis", Hystersis, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@RTT", RTT, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Interval", Interval, DbType.Int32));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		private void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the VarNameID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID")) == false))
				{
					VarNameID = ((long)(Convert.ChangeType(rs["VarNameID"], typeof(long))));
				}
				// if value from the recordset, to the AnalogID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("AnalogID")) == false))
				{
					AnalogID = ((long)(Convert.ChangeType(rs["AnalogID"], typeof(long))));
				}
				// if value from the recordset, to the PointIndex _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("PointIndex")) == false))
				{
					PointIndex = ((int)(Convert.ChangeType(rs["PointIndex"], typeof(int))));
				}
				// if value from the recordset, to the SampleTime _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("SampleTime")) == false))
				{
					SampleTime = ((int)(Convert.ChangeType(rs["SampleTime"], typeof(int))));
				}
				// if value from the recordset, to the PointGroup _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("PointGroup")) == false))
				{
					PointGroup = ((int)(Convert.ChangeType(rs["PointGroup"], typeof(int))));
				}
				// if value from the recordset, to the UNI _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("UNI")) == false))
				{
					UNI = ((string)(Convert.ChangeType(rs["UNI"], typeof(string))));
				}
				// if value from the recordset, to the FOR _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("FOR")) == false))
				{
					FOR = ((string)(Convert.ChangeType(rs["FOR"], typeof(string))));
				}
				// if value from the recordset, to the IRL_LIM _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("IRL_LIM")) == false))
				{
					IRL_LIM = ((float)(Convert.ChangeType(rs["IRL_LIM"], typeof(float))));
				}
				// if value from the recordset, to the IRL_EBL _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("IRL_EBL")) == false))
				{
					IRL_EBL = ((bool)(Convert.ChangeType(rs["IRL_EBL"], typeof(bool))));
				}
				// if value from the recordset, to the IRL_TXT _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("IRL_TXT")) == false))
				{
					IRL_TXT = ((string)(Convert.ChangeType(rs["IRL_TXT"], typeof(string))));
				}
				// if value from the recordset, to the IRL_AUD _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("IRL_AUD")) == false))
				{
					IRL_AUD = ((int)(Convert.ChangeType(rs["IRL_AUD"], typeof(int))));
				}
				// if value from the recordset, to the IRL_TYP _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("IRL_TYP")) == false))
				{
					IRL_TYP = ((int)(Convert.ChangeType(rs["IRL_TYP"], typeof(int))));
				}
				// if value from the recordset, to the IRL_PRN _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("IRL_PRN")) == false))
				{
					IRL_PRN = ((int)(Convert.ChangeType(rs["IRL_PRN"], typeof(int))));
				}
				// if value from the recordset, to the IRH_LIM _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("IRH_LIM")) == false))
				{
					IRH_LIM = ((float)(Convert.ChangeType(rs["IRH_LIM"], typeof(float))));
				}
				// if value from the recordset, to the IRH_EBL _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("IRH_EBL")) == false))
				{
					IRH_EBL = ((bool)(Convert.ChangeType(rs["IRH_EBL"], typeof(bool))));
				}
				// if value from the recordset, to the IRH_TXT _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("IRH_TXT")) == false))
				{
					IRH_TXT = ((string)(Convert.ChangeType(rs["IRH_TXT"], typeof(string))));
				}
				// if value from the recordset, to the IRH_AUD _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("IRH_AUD")) == false))
				{
					IRH_AUD = ((int)(Convert.ChangeType(rs["IRH_AUD"], typeof(int))));
				}
				// if value from the recordset, to the IRH_TYP _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("IRH_TYP")) == false))
				{
					IRH_TYP = ((int)(Convert.ChangeType(rs["IRH_TYP"], typeof(int))));
				}
				// if value from the recordset, to the IRH_PRN _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("IRH_PRN")) == false))
				{
					IRH_PRN = ((int)(Convert.ChangeType(rs["IRH_PRN"], typeof(int))));
				}
				// if value from the recordset, to the LL_LIM _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LL_LIM")) == false))
				{
					LL_LIM = ((float)(Convert.ChangeType(rs["LL_LIM"], typeof(float))));
				}
				// if value from the recordset, to the LL_EBL _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LL_EBL")) == false))
				{
					LL_EBL = ((bool)(Convert.ChangeType(rs["LL_EBL"], typeof(bool))));
				}
				// if value from the recordset, to the LL_TXT _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LL_TXT")) == false))
				{
					LL_TXT = ((string)(Convert.ChangeType(rs["LL_TXT"], typeof(string))));
				}
				// if value from the recordset, to the LL_AUD _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LL_AUD")) == false))
				{
					LL_AUD = ((int)(Convert.ChangeType(rs["LL_AUD"], typeof(int))));
				}
				// if value from the recordset, to the LL_TYP _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LL_TYP")) == false))
				{
					LL_TYP = ((int)(Convert.ChangeType(rs["LL_TYP"], typeof(int))));
				}
				// if value from the recordset, to the LL_PRN _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LL_PRN")) == false))
				{
					LL_PRN = ((int)(Convert.ChangeType(rs["LL_PRN"], typeof(int))));
				}
				// if value from the recordset, to the HH_LIM _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("HH_LIM")) == false))
				{
					HH_LIM = ((float)(Convert.ChangeType(rs["HH_LIM"], typeof(float))));
				}
				// if value from the recordset, to the HH_EBL _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("HH_EBL")) == false))
				{
					HH_EBL = ((bool)(Convert.ChangeType(rs["HH_EBL"], typeof(bool))));
				}
				// if value from the recordset, to the HH_TXT _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("HH_TXT")) == false))
				{
					HH_TXT = ((string)(Convert.ChangeType(rs["HH_TXT"], typeof(string))));
				}
				// if value from the recordset, to the HH_AUD _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("HH_AUD")) == false))
				{
					HH_AUD = ((int)(Convert.ChangeType(rs["HH_AUD"], typeof(int))));
				}
				// if value from the recordset, to the HH_TYP _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("HH_TYP")) == false))
				{
					HH_TYP = ((int)(Convert.ChangeType(rs["HH_TYP"], typeof(int))));
				}
				// if value from the recordset, to the HH_PRN _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("HH_PRN")) == false))
				{
					HH_PRN = ((int)(Convert.ChangeType(rs["HH_PRN"], typeof(int))));
				}
				// if value from the recordset, to the L_LIM _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("L_LIM")) == false))
				{
					L_LIM = ((float)(Convert.ChangeType(rs["L_LIM"], typeof(float))));
				}
				// if value from the recordset, to the L_EBL _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("L_EBL")) == false))
				{
					L_EBL = ((bool)(Convert.ChangeType(rs["L_EBL"], typeof(bool))));
				}
				// if value from the recordset, to the L_TXT _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("L_TXT")) == false))
				{
					L_TXT = ((string)(Convert.ChangeType(rs["L_TXT"], typeof(string))));
				}
				// if value from the recordset, to the L_AUD _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("L_AUD")) == false))
				{
					L_AUD = ((int)(Convert.ChangeType(rs["L_AUD"], typeof(int))));
				}
				// if value from the recordset, to the L_TYP _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("L_TYP")) == false))
				{
					L_TYP = ((int)(Convert.ChangeType(rs["L_TYP"], typeof(int))));
				}
				// if value from the recordset, to the L_PRN _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("L_PRN")) == false))
				{
					L_PRN = ((int)(Convert.ChangeType(rs["L_PRN"], typeof(int))));
				}
				// if value from the recordset, to the H_LIM _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("H_LIM")) == false))
				{
					H_LIM = ((float)(Convert.ChangeType(rs["H_LIM"], typeof(float))));
				}
				// if value from the recordset, to the H_EBL _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("H_EBL")) == false))
				{
					H_EBL = ((bool)(Convert.ChangeType(rs["H_EBL"], typeof(bool))));
				}
				// if value from the recordset, to the H_TXT _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("H_TXT")) == false))
				{
					H_TXT = ((string)(Convert.ChangeType(rs["H_TXT"], typeof(string))));
				}
				// if value from the recordset, to the H_AUD _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("H_AUD")) == false))
				{
					H_AUD = ((int)(Convert.ChangeType(rs["H_AUD"], typeof(int))));
				}
				// if value from the recordset, to the H_TYP _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("H_TYP")) == false))
				{
					H_TYP = ((int)(Convert.ChangeType(rs["H_TYP"], typeof(int))));
				}
				// if value from the recordset, to the H_PRN _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("H_PRN")) == false))
				{
					H_PRN = ((int)(Convert.ChangeType(rs["H_PRN"], typeof(int))));
				}
				// if value from the recordset, to the Hystersis _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Hystersis")) == false))
				{
					Hystersis = ((int)(Convert.ChangeType(rs["Hystersis"], typeof(int))));
				}
				// if value from the recordset, to the RTT _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("RTT")) == false))
				{
					RTT = ((bool)(Convert.ChangeType(rs["RTT"], typeof(bool))));
				}
				// if value from the recordset, to the Interval _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Interval")) == false))
				{
					Interval = ((int)(Convert.ChangeType(rs["Interval"], typeof(int))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblAnalogChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblAnalogCollection : System.Collections.CollectionBase
	{
		
		/// <remarks>SQL Type:tblAnalogChangedEventHandler</remarks>
		public event tblAnalogChangedEventHandler tblAnalogChanged;
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblVariable _VarNameID_tblVariable;
		
		[Description("Represents the foreign key object of the type VarNameID")]
		public tblVariable m_VarNameID_tblVariable
		{
			get
			{
				return _VarNameID_tblVariable;
			}
			set
			{
				_VarNameID_tblVariable = value;
			}
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblAnalogChanged(System.EventArgs e)
		{
			if (tblAnalogChanged != null)
			{
				this.tblAnalogChanged(this, e);
			}
		}
		
		[Description("Gets a  tblAnalog from the collection.")]
		public tblAnalog this[int index]
		{
			get
			{
				return ((tblAnalog)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblAnalogChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblAnalog from the collection.")]
		public tblAnalog Get(int index)
		{
			return ((tblAnalog)(List[index]));
		}
		
		[Description("Adds a new tblAnalog to the collection.")]
		public int Add(tblAnalog item)
		{
			int newindex = List.Add(item);
			this.OntblAnalogChanged(EventArgs.Empty);
			return newindex;
		}
		
		[Description("Removes a tblAnalog from the collection.")]
		public void Remove(tblAnalog item)
		{
			List.Remove(item);
			this.OntblAnalogChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblAnalog into the collection at the specified index.")]
		public void Insert(int index, tblAnalog item)
		{
			List.Insert(index, item);
			this.OntblAnalogChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblAnalog class in the collection.")]
		public int IndexOf(tblAnalog item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblAnalog class is present in the collection.")]
		public bool Contains(tblAnalog item)
		{
			return List.Contains(item);
		}
	}
}
