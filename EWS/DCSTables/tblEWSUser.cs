//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;


namespace DCS.DCSTables
{


    public partial class tblEWSUser : SQLiteTable
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblEWSUser.</remarks>
		internal static string SQL_Insert = @"INSERT INTO [tblEWSUser] ([SolutionID], [User_Name], [Description], [Pass_word], [LogicExplorer], [SystemExplorer], [ReportExplorer], [UserExplorer], [PlantStructureExplorer], [DisplayExplorer], [CanChangePassword], [NerverExpire], [LastChangeDate], [VlidityDays]) VALUES(@SolutionID, @User_Name, @Description, @Pass_word, @LogicExplorer, @SystemExplorer, @ReportExplorer, @UserExplorer, @PlantStructureExplorer, @DisplayExplorer, @CanChangePassword, @NerverExpire, @LastChangeDate, @VlidityDays) ; select last_insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblEWSUser, with the WHERE clause.</remarks>
		internal static string SQL_Update = @"UPDATE [tblEWSUser] SET [SolutionID] = @SolutionID, [User_Name] = @User_Name, [Description] = @Description, [Pass_word] = @Pass_word, [LogicExplorer] = @LogicExplorer, [SystemExplorer] = @SystemExplorer, [ReportExplorer] = @ReportExplorer, [UserExplorer] = @UserExplorer, [PlantStructureExplorer] = @PlantStructureExplorer, [DisplayExplorer] = @DisplayExplorer, [CanChangePassword] = @CanChangePassword, [NerverExpire] = @NerverExpire, [LastChangeDate] = @LastChangeDate, [VlidityDays] = @VlidityDays WHERE [UserNameID]=@UserNameID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblEWSUser, with the WHERE clause.</remarks>
		internal static string SQL_Select = @"SELECT [SolutionID], [User_Name], [Description], [Pass_word], [LogicExplorer], [SystemExplorer], [ReportExplorer], [UserExplorer], [PlantStructureExplorer], [DisplayExplorer], [CanChangePassword], [NerverExpire], [LastChangeDate], [VlidityDays] FROM [tblEWSUser] WHERE [UserNameID]=@UserNameID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblEWSUser, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblEWSUser] WHERE [UserNameID]=@UserNameID ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _UserNameID = -1;
		
		[DisplayName("User Name ID")]
		[Category("Primary Key")]
		public long UserNameID
		{
			get
			{
				return _UserNameID;
			}
			set
			{
				_UserNameID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _SolutionID = -1;
		
		[DisplayName("Solution ID")]
		[Category("Foreign Key")]
		public long SolutionID
		{
			get
			{
				return _SolutionID;
			}
			set
			{
				_SolutionID = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _User_Name = "";
		
		[DisplayName("User_Name")]
		[Category("Column")]
		public string User_Name
		{
			get
			{
				return _User_Name;
			}
			set
			{
				_User_Name = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Description = "";
		
		[DisplayName("Description")]
		[Category("Column")]
		public string Description
		{
			get
			{
				return _Description;
			}
			set
			{
				_Description = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Pass_word = "";
		
		[DisplayName("Pass_word")]
		[Category("Column")]
		public string Pass_word
		{
			get
			{
				return _Pass_word;
			}
			set
			{
				_Pass_word = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _LogicExplorer;
		
		[DisplayName("Logic Explorer")]
		[Category("Column")]
		public int LogicExplorer
		{
			get
			{
				return _LogicExplorer;
			}
			set
			{
				_LogicExplorer = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _SystemExplorer;
		
		[DisplayName("System Explorer")]
		[Category("Column")]
		public int SystemExplorer
		{
			get
			{
				return _SystemExplorer;
			}
			set
			{
				_SystemExplorer = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _ReportExplorer;
		
		[DisplayName("Report Explorer")]
		[Category("Column")]
		public int ReportExplorer
		{
			get
			{
				return _ReportExplorer;
			}
			set
			{
				_ReportExplorer = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _UserExplorer;
		
		[DisplayName("User Explorer")]
		[Category("Column")]
		public int UserExplorer
		{
			get
			{
				return _UserExplorer;
			}
			set
			{
				_UserExplorer = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _PlantStructureExplorer;
		
		[DisplayName("Plant Structure Explorer")]
		[Category("Column")]
		public int PlantStructureExplorer
		{
			get
			{
				return _PlantStructureExplorer;
			}
			set
			{
				_PlantStructureExplorer = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _DisplayExplorer;
		
		[DisplayName("Display Explorer")]
		[Category("Column")]
		public int DisplayExplorer
		{
			get
			{
				return _DisplayExplorer;
			}
			set
			{
				_DisplayExplorer = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _CanChangePassword;
		
		[DisplayName("Can Change Password")]
		[Category("Column")]
		public bool CanChangePassword
		{
			get
			{
				return _CanChangePassword;
			}
			set
			{
				_CanChangePassword = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _NerverExpire;
		
		[DisplayName("Nerver Expire")]
		[Category("Column")]
		public bool NerverExpire
		{
			get
			{
				return _NerverExpire;
			}
			set
			{
				_NerverExpire = value;
			}
		}
		
		/// <remarks>SQL Type:System.DateTime</remarks>
		private System.DateTime _LastChangeDate;
		
		[DisplayName("Last Change Date")]
		[Category("Column")]
		public System.DateTime LastChangeDate
		{
			get
			{
				return _LastChangeDate;
			}
			set
			{
				_LastChangeDate = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _VlidityDays;
		
		[DisplayName("Vlidity Days")]
		[Category("Column")]
		public int VlidityDays
		{
			get
			{
				return _VlidityDays;
			}
			set
			{
				_VlidityDays = value;
			}
		}
		#endregion
		
		#region Related Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblSolution _SolutionID_tblSolution;
		
		[Description("Represents the foreign key object of the type SolutionID")]
		public tblSolution m_SolutionID_tblSolution
		{
			get
			{
				return _SolutionID_tblSolution;
			}
			set
			{
				_SolutionID_tblSolution = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblEWSUser.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblEWSUser.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblEWSUser.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				UserNameID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblEWSUser.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public tblEWSUser()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@UserNameID", UserNameID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@SolutionID", SolutionID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@User_Name", User_Name, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Description", Description, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Pass_word", Pass_word, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LogicExplorer", LogicExplorer, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@SystemExplorer", SystemExplorer, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@ReportExplorer", ReportExplorer, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@UserExplorer", UserExplorer, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@PlantStructureExplorer", PlantStructureExplorer, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@DisplayExplorer", DisplayExplorer, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@CanChangePassword", CanChangePassword, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@NerverExpire", NerverExpire, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LastChangeDate", LastChangeDate, DbType.DateTime));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VlidityDays", VlidityDays, DbType.Int32));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		public void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the UserNameID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("UserNameID")) == false))
				{
					UserNameID = ((long)(Convert.ChangeType(rs["UserNameID"], typeof(long))));
				}
				// if value from the recordset, to the SolutionID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("SolutionID")) == false))
				{
					SolutionID = ((long)(Convert.ChangeType(rs["SolutionID"], typeof(long))));
				}
				// if value from the recordset, to the User_Name _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("User_Name")) == false))
				{
					User_Name = ((string)(Convert.ChangeType(rs["User_Name"], typeof(string))));
				}
				// if value from the recordset, to the Description _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Description")) == false))
				{
					Description = ((string)(Convert.ChangeType(rs["Description"], typeof(string))));
				}
				// if value from the recordset, to the Pass_word _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Pass_word")) == false))
				{
					Pass_word = ((string)(Convert.ChangeType(rs["Pass_word"], typeof(string))));
				}
				// if value from the recordset, to the LogicExplorer _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LogicExplorer")) == false))
				{
					LogicExplorer = ((int)(Convert.ChangeType(rs["LogicExplorer"], typeof(int))));
				}
				// if value from the recordset, to the SystemExplorer _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("SystemExplorer")) == false))
				{
					SystemExplorer = ((int)(Convert.ChangeType(rs["SystemExplorer"], typeof(int))));
				}
				// if value from the recordset, to the ReportExplorer _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ReportExplorer")) == false))
				{
					ReportExplorer = ((int)(Convert.ChangeType(rs["ReportExplorer"], typeof(int))));
				}
				// if value from the recordset, to the UserExplorer _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("UserExplorer")) == false))
				{
					UserExplorer = ((int)(Convert.ChangeType(rs["UserExplorer"], typeof(int))));
				}
				// if value from the recordset, to the PlantStructureExplorer _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("PlantStructureExplorer")) == false))
				{
					PlantStructureExplorer = ((int)(Convert.ChangeType(rs["PlantStructureExplorer"], typeof(int))));
				}
				// if value from the recordset, to the DisplayExplorer _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("DisplayExplorer")) == false))
				{
					DisplayExplorer = ((int)(Convert.ChangeType(rs["DisplayExplorer"], typeof(int))));
				}
				// if value from the recordset, to the CanChangePassword _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("CanChangePassword")) == false))
				{
					CanChangePassword = ((bool)(Convert.ChangeType(rs["CanChangePassword"], typeof(bool))));
				}
				// if value from the recordset, to the NerverExpire _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("NerverExpire")) == false))
				{
					NerverExpire = ((bool)(Convert.ChangeType(rs["NerverExpire"], typeof(bool))));
				}
				// if value from the recordset, to the LastChangeDate _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LastChangeDate")) == false))
				{
					LastChangeDate = ((System.DateTime)(Convert.ChangeType(rs["LastChangeDate"], typeof(System.DateTime))));
				}
				// if value from the recordset, to the VlidityDays _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VlidityDays")) == false))
				{
					VlidityDays = ((int)(Convert.ChangeType(rs["VlidityDays"], typeof(int))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		
		public override void AddFromString(string[] _strs, string arg1, ref string _log)
		{
			try
			{
				this.PreAddFromString(ref _log);
				int i;
				i = this.ColumnExistInHeader("SolutionID");
				if ((i >= 0))
				{
					SolutionID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("User_Name");
				if ((i >= 0))
				{
					User_Name = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Description");
				if ((i >= 0))
				{
					Description = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Pass_word");
				if ((i >= 0))
				{
					Pass_word = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("LogicExplorer");
				if ((i >= 0))
				{
					LogicExplorer = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("SystemExplorer");
				if ((i >= 0))
				{
					SystemExplorer = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("ReportExplorer");
				if ((i >= 0))
				{
					ReportExplorer = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("UserExplorer");
				if ((i >= 0))
				{
					UserExplorer = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("PlantStructureExplorer");
				if ((i >= 0))
				{
					PlantStructureExplorer = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("DisplayExplorer");
				if ((i >= 0))
				{
					DisplayExplorer = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("CanChangePassword");
				if ((i >= 0))
				{
					CanChangePassword = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("NerverExpire");
				if ((i >= 0))
				{
					NerverExpire = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("LastChangeDate");
				if ((i >= 0))
				{
					LastChangeDate = ((System.DateTime)(Convert.ChangeType(_strs[i], typeof(System.DateTime))));
				}
				i = this.ColumnExistInHeader("VlidityDays");
				if ((i >= 0))
				{
					VlidityDays = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				this.PostAddFromString(ref _log);
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblEWSUserChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblEWSUserCollection : SQLiteTableCollection
	{
		
		/// <remarks>SQL Type:tblEWSUserChangedEventHandler</remarks>
		public event tblEWSUserChangedEventHandler tblEWSUserChanged;
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblSolution _SolutionID_tblSolution;
		
		[Description("Represents the foreign key object of the type SolutionID")]
		public tblSolution m_SolutionID_tblSolution
		{
			get
			{
				return _SolutionID_tblSolution;
			}
			set
			{
				_SolutionID_tblSolution = value;
			}
		}
		
		[Description("Constructor")]
		public tblEWSUserCollection(tblSolution _parent)
		{
			_SolutionID_tblSolution = _parent;
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblEWSUserChanged(System.EventArgs e)
		{
			if (tblEWSUserChanged != null)
			{
				this.tblEWSUserChanged(this, e);
			}
		}
		
		[Description("Gets a  tblEWSUser from the collection.")]
		public tblEWSUser this[int index]
		{
			get
			{
				return ((tblEWSUser)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblEWSUserChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblEWSUser from the collection.")]
		public tblEWSUser Get(int index)
		{
			return ((tblEWSUser)(List[index]));
		}
		
		[Description("Adds a new tblEWSUser to the collection.")]
		public void Add(tblEWSUser item)
		{
			List.Add(item);
			this.OntblEWSUserChanged(EventArgs.Empty);
		}
		
		[Description("Removes a tblEWSUser from the collection.")]
		public void Remove(tblEWSUser item)
		{
			List.Remove(item);
			this.OntblEWSUserChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblEWSUser into the collection at the specified index.")]
		public void Insert(int index, tblEWSUser item)
		{
			List.Insert(index, item);
			this.OntblEWSUserChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblEWSUser class in the collection.")]
		public int IndexOf(tblEWSUser item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblEWSUser class is present in the collection.")]
		public bool Contains(tblEWSUser item)
		{
			return List.Contains(item);
		}
	}
}
