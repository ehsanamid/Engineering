//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;


namespace DCS.DCSTables
{


    public partial class tblModbusClientData : SQLiteTable
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblModbusClientData.</remarks>
		internal static string SQL_Insert = @"INSERT INTO [tblModbusClientData] ([MobusClientID], [StaNo], [LinkName], [LinkType], [PortName], [BaudRate], [Parity], [StopBit], [DataSize], [Redundant], [IP], [PortNumber]) VALUES(@MobusClientID, @StaNo, @LinkName, @LinkType, @PortName, @BaudRate, @Parity, @StopBit, @DataSize, @Redundant, @IP, @PortNumber) ; select last_insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblModbusClientData, with the WHERE clause.</remarks>
		internal static string SQL_Update = @"UPDATE [tblModbusClientData] SET [MobusClientID] = @MobusClientID, [StaNo] = @StaNo, [LinkName] = @LinkName, [LinkType] = @LinkType, [PortName] = @PortName, [BaudRate] = @BaudRate, [Parity] = @Parity, [StopBit] = @StopBit, [DataSize] = @DataSize, [Redundant] = @Redundant, [IP] = @IP, [PortNumber] = @PortNumber WHERE [ModbusClientDataID]=@ModbusClientDataID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblModbusClientData, with the WHERE clause.</remarks>
		internal static string SQL_Select = "SELECT [MobusClientID], [StaNo], [LinkName], [LinkType], [PortName], [BaudRate], " +
			"[Parity], [StopBit], [DataSize], [Redundant], [IP], [PortNumber] FROM [tblModbus" +
			"ClientData] WHERE [ModbusClientDataID]=@ModbusClientDataID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblModbusClientData, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblModbusClientData] WHERE [ModbusClientDataID]=@ModbusClientDataID " +
			"";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _ModbusClientDataID = -1;
		
		[DisplayName("Modbus Client Data ID")]
		[Category("Primary Key")]
		public long ModbusClientDataID
		{
			get
			{
				return _ModbusClientDataID;
			}
			set
			{
				_ModbusClientDataID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _MobusClientID = -1;
		
		[DisplayName("Mobus Client ID")]
		[Category("Foreign Key")]
		public long MobusClientID
		{
			get
			{
				return _MobusClientID;
			}
			set
			{
				_MobusClientID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _StaNo;
		
		[DisplayName("Sta No")]
		[Category("Column")]
		public short StaNo
		{
			get
			{
				return _StaNo;
			}
			set
			{
				_StaNo = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _LinkName = "";
		
		[DisplayName("Link Name")]
		[Category("Column")]
		public string LinkName
		{
			get
			{
				return _LinkName;
			}
			set
			{
				_LinkName = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _LinkType;
		
		[DisplayName("Link Type")]
		[Category("Column")]
		public short LinkType
		{
			get
			{
				return _LinkType;
			}
			set
			{
				_LinkType = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _PortName = "";
		
		[DisplayName("Port Name")]
		[Category("Column")]
		public string PortName
		{
			get
			{
				return _PortName;
			}
			set
			{
				_PortName = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _BaudRate;
		
		[DisplayName("Baud Rate")]
		[Category("Column")]
		public short BaudRate
		{
			get
			{
				return _BaudRate;
			}
			set
			{
				_BaudRate = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Parity = "";
		
		[DisplayName("Parity")]
		[Category("Column")]
		public string Parity
		{
			get
			{
				return _Parity;
			}
			set
			{
				_Parity = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _StopBit;
		
		[DisplayName("Stop Bit")]
		[Category("Column")]
		public short StopBit
		{
			get
			{
				return _StopBit;
			}
			set
			{
				_StopBit = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _DataSize;
		
		[DisplayName("Data Size")]
		[Category("Column")]
		public short DataSize
		{
			get
			{
				return _DataSize;
			}
			set
			{
				_DataSize = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _Redundant;
		
		[DisplayName("Redundant")]
		[Category("Column")]
		public short Redundant
		{
			get
			{
				return _Redundant;
			}
			set
			{
				_Redundant = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _IP = "";
		
		[DisplayName("IP")]
		[Category("Column")]
		public string IP
		{
			get
			{
				return _IP;
			}
			set
			{
				_IP = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _PortNumber;
		
		[DisplayName("Port Number")]
		[Category("Column")]
		public short PortNumber
		{
			get
			{
				return _PortNumber;
			}
			set
			{
				_PortNumber = value;
			}
		}
		#endregion
		
		#region Related Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblModbusClient _ModbusClientID_tblModbusClient;
		
		[Description("Represents the foreign key object of the type ModbusClientID")]
		public tblModbusClient m_ModbusClientID_tblModbusClient
		{
			get
			{
				return _ModbusClientID_tblModbusClient;
			}
			set
			{
				_ModbusClientID_tblModbusClient = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblModbusClientData.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblModbusClientData.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblModbusClientData.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				ModbusClientDataID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblModbusClientData.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public tblModbusClientData()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@ModbusClientDataID", ModbusClientDataID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@MobusClientID", MobusClientID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@StaNo", StaNo, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LinkName", LinkName, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LinkType", LinkType, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@PortName", PortName, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@BaudRate", BaudRate, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Parity", Parity, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@StopBit", StopBit, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@DataSize", DataSize, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Redundant", Redundant, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@IP", IP, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@PortNumber", PortNumber, DbType.Int16));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		public void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the ModbusClientDataID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ModbusClientDataID")) == false))
				{
					ModbusClientDataID = ((long)(Convert.ChangeType(rs["ModbusClientDataID"], typeof(long))));
				}
				// if value from the recordset, to the MobusClientID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("MobusClientID")) == false))
				{
					MobusClientID = ((long)(Convert.ChangeType(rs["MobusClientID"], typeof(long))));
				}
				// if value from the recordset, to the StaNo _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("StaNo")) == false))
				{
					StaNo = ((short)(Convert.ChangeType(rs["StaNo"], typeof(short))));
				}
				// if value from the recordset, to the LinkName _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LinkName")) == false))
				{
					LinkName = ((string)(Convert.ChangeType(rs["LinkName"], typeof(string))));
				}
				// if value from the recordset, to the LinkType _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LinkType")) == false))
				{
					LinkType = ((short)(Convert.ChangeType(rs["LinkType"], typeof(short))));
				}
				// if value from the recordset, to the PortName _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("PortName")) == false))
				{
					PortName = ((string)(Convert.ChangeType(rs["PortName"], typeof(string))));
				}
				// if value from the recordset, to the BaudRate _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("BaudRate")) == false))
				{
					BaudRate = ((short)(Convert.ChangeType(rs["BaudRate"], typeof(short))));
				}
				// if value from the recordset, to the Parity _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Parity")) == false))
				{
					Parity = ((string)(Convert.ChangeType(rs["Parity"], typeof(string))));
				}
				// if value from the recordset, to the StopBit _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("StopBit")) == false))
				{
					StopBit = ((short)(Convert.ChangeType(rs["StopBit"], typeof(short))));
				}
				// if value from the recordset, to the DataSize _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("DataSize")) == false))
				{
					DataSize = ((short)(Convert.ChangeType(rs["DataSize"], typeof(short))));
				}
				// if value from the recordset, to the Redundant _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Redundant")) == false))
				{
					Redundant = ((short)(Convert.ChangeType(rs["Redundant"], typeof(short))));
				}
				// if value from the recordset, to the IP _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("IP")) == false))
				{
					IP = ((string)(Convert.ChangeType(rs["IP"], typeof(string))));
				}
				// if value from the recordset, to the PortNumber _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("PortNumber")) == false))
				{
					PortNumber = ((short)(Convert.ChangeType(rs["PortNumber"], typeof(short))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		
		public override void AddFromString(string[] _strs, string arg1, ref string _log)
		{
			try
			{
				this.PreAddFromString(ref _log);
				int i;
				i = this.ColumnExistInHeader("MobusClientID");
				if ((i >= 0))
				{
					MobusClientID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("StaNo");
				if ((i >= 0))
				{
					StaNo = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("LinkName");
				if ((i >= 0))
				{
					LinkName = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("LinkType");
				if ((i >= 0))
				{
					LinkType = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("PortName");
				if ((i >= 0))
				{
					PortName = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("BaudRate");
				if ((i >= 0))
				{
					BaudRate = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("Parity");
				if ((i >= 0))
				{
					Parity = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("StopBit");
				if ((i >= 0))
				{
					StopBit = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("DataSize");
				if ((i >= 0))
				{
					DataSize = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("Redundant");
				if ((i >= 0))
				{
					Redundant = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("IP");
				if ((i >= 0))
				{
					IP = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("PortNumber");
				if ((i >= 0))
				{
					PortNumber = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				this.PostAddFromString(ref _log);
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblModbusClientDataChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblModbusClientDataCollection : SQLiteTableCollection
	{
		
		/// <remarks>SQL Type:tblModbusClientDataChangedEventHandler</remarks>
		public event tblModbusClientDataChangedEventHandler tblModbusClientDataChanged;
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblModbusClient _ModbusClientID_tblModbusClient;
		
		[Description("Represents the foreign key object of the type ModbusClientID")]
		public tblModbusClient m_ModbusClientID_tblModbusClient
		{
			get
			{
				return _ModbusClientID_tblModbusClient;
			}
			set
			{
				_ModbusClientID_tblModbusClient = value;
			}
		}
		
		[Description("Constructor")]
		public tblModbusClientDataCollection(tblModbusClient _parent)
		{
			_ModbusClientID_tblModbusClient = _parent;
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblModbusClientDataChanged(System.EventArgs e)
		{
			if (tblModbusClientDataChanged != null)
			{
				this.tblModbusClientDataChanged(this, e);
			}
		}
		
		[Description("Gets a  tblModbusClientData from the collection.")]
		public tblModbusClientData this[int index]
		{
			get
			{
				return ((tblModbusClientData)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblModbusClientDataChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblModbusClientData from the collection.")]
		public tblModbusClientData Get(int index)
		{
			return ((tblModbusClientData)(List[index]));
		}
		
		[Description("Adds a new tblModbusClientData to the collection.")]
		public void Add(tblModbusClientData item)
		{
			List.Add(item);
			this.OntblModbusClientDataChanged(EventArgs.Empty);
		}
		
		[Description("Removes a tblModbusClientData from the collection.")]
		public void Remove(tblModbusClientData item)
		{
			List.Remove(item);
			this.OntblModbusClientDataChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblModbusClientData into the collection at the specified index.")]
		public void Insert(int index, tblModbusClientData item)
		{
			List.Insert(index, item);
			this.OntblModbusClientDataChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblModbusClientData class in the collection.")]
		public int IndexOf(tblModbusClientData item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblModbusClientData class is present in the collection.")]
		public bool Contains(tblModbusClientData item)
		{
			return List.Contains(item);
		}
	}
}
