//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;


namespace DCS.DCSTables
{


    public partial class tblInstrumentUnits : SQLiteTable
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblInstrumentUnits.</remarks>
		internal static string SQL_Insert = "INSERT INTO [tblInstrumentUnits] ([UnitName], [GroupID], [ConversionFactor], [Con" +
			"versionIntercept], [Base]) VALUES(@UnitName, @GroupID, @ConversionFactor, @Conve" +
			"rsionIntercept, @Base) ; select last_insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblInstrumentUnits, with the WHERE clause.</remarks>
		internal static string SQL_Update = "UPDATE [tblInstrumentUnits] SET [UnitName] = @UnitName, [GroupID] = @GroupID, [Co" +
			"nversionFactor] = @ConversionFactor, [ConversionIntercept] = @ConversionIntercep" +
			"t, [Base] = @Base WHERE [ID]=@ID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblInstrumentUnits, with the WHERE clause.</remarks>
		internal static string SQL_Select = "SELECT [UnitName], [GroupID], [ConversionFactor], [ConversionIntercept], [Base] F" +
			"ROM [tblInstrumentUnits] WHERE [ID]=@ID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblInstrumentUnits, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblInstrumentUnits] WHERE [ID]=@ID ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _ID = -1;
		
		[DisplayName("ID")]
		[Category("Primary Key")]
		public long ID
		{
			get
			{
				return _ID;
			}
			set
			{
				_ID = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _UnitName = "";
		
		[DisplayName("Unit Name")]
		[Category("Column")]
		public string UnitName
		{
			get
			{
				return _UnitName;
			}
			set
			{
				_UnitName = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _GroupID = -1;
		
		[DisplayName("Group ID")]
		[Category("Foreign Key")]
		public long GroupID
		{
			get
			{
				return _GroupID;
			}
			set
			{
				_GroupID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Double</remarks>
		private double _ConversionFactor;
		
		[DisplayName("Conversion Factor")]
		[Category("Column")]
		public double ConversionFactor
		{
			get
			{
				return _ConversionFactor;
			}
			set
			{
				_ConversionFactor = value;
			}
		}
		
		/// <remarks>SQL Type:System.Double</remarks>
		private double _ConversionIntercept;
		
		[DisplayName("Conversion Intercept")]
		[Category("Column")]
		public double ConversionIntercept
		{
			get
			{
				return _ConversionIntercept;
			}
			set
			{
				_ConversionIntercept = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _Base;
		
		[DisplayName("Base")]
		[Category("Column")]
		public bool Base
		{
			get
			{
				return _Base;
			}
			set
			{
				_Base = value;
			}
		}
		#endregion
		
		#region Related Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblInstrumentUnitsGrp _ID_tblInstrumentUnitsGrp;
		
		[Description("Represents the foreign key object of the type ID")]
		public tblInstrumentUnitsGrp m_ID_tblInstrumentUnitsGrp
		{
			get
			{
				return _ID_tblInstrumentUnitsGrp;
			}
			set
			{
				_ID_tblInstrumentUnitsGrp = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblInstrumentUnits.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblInstrumentUnits.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblInstrumentUnits.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				ID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblInstrumentUnits.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public tblInstrumentUnits()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@ID", ID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@UnitName", UnitName, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@GroupID", GroupID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@ConversionFactor", ConversionFactor, DbType.Double));
				SqlParmColl.Add(CommonDB.AddSqlParm("@ConversionIntercept", ConversionIntercept, DbType.Double));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Base", Base, DbType.Boolean));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		public void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the ID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ID")) == false))
				{
					ID = ((long)(Convert.ChangeType(rs["ID"], typeof(long))));
				}
				// if value from the recordset, to the UnitName _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("UnitName")) == false))
				{
					UnitName = ((string)(Convert.ChangeType(rs["UnitName"], typeof(string))));
				}
				// if value from the recordset, to the GroupID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("GroupID")) == false))
				{
					GroupID = ((long)(Convert.ChangeType(rs["GroupID"], typeof(long))));
				}
				// if value from the recordset, to the ConversionFactor _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ConversionFactor")) == false))
				{
					ConversionFactor = ((double)(Convert.ChangeType(rs["ConversionFactor"], typeof(double))));
				}
				// if value from the recordset, to the ConversionIntercept _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ConversionIntercept")) == false))
				{
					ConversionIntercept = ((double)(Convert.ChangeType(rs["ConversionIntercept"], typeof(double))));
				}
				// if value from the recordset, to the Base _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Base")) == false))
				{
					Base = ((bool)(Convert.ChangeType(rs["Base"], typeof(bool))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		
		public override void AddFromString(string[] _strs, string arg1, ref string _log)
		{
			try
			{
				this.PreAddFromString(ref _log);
				int i;
				i = this.ColumnExistInHeader("UnitName");
				if ((i >= 0))
				{
					UnitName = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("GroupID");
				if ((i >= 0))
				{
					GroupID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("ConversionFactor");
				if ((i >= 0))
				{
					ConversionFactor = ((double)(Convert.ChangeType(_strs[i], typeof(double))));
				}
				i = this.ColumnExistInHeader("ConversionIntercept");
				if ((i >= 0))
				{
					ConversionIntercept = ((double)(Convert.ChangeType(_strs[i], typeof(double))));
				}
				i = this.ColumnExistInHeader("Base");
				if ((i >= 0))
				{
					Base = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				this.PostAddFromString(ref _log);
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblInstrumentUnitsChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblInstrumentUnitsCollection : SQLiteTableCollection
	{
		
		/// <remarks>SQL Type:tblInstrumentUnitsChangedEventHandler</remarks>
		public event tblInstrumentUnitsChangedEventHandler tblInstrumentUnitsChanged;
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblInstrumentUnitsGrp _ID_tblInstrumentUnitsGrp;
		
		[Description("Represents the foreign key object of the type ID")]
		public tblInstrumentUnitsGrp m_ID_tblInstrumentUnitsGrp
		{
			get
			{
				return _ID_tblInstrumentUnitsGrp;
			}
			set
			{
				_ID_tblInstrumentUnitsGrp = value;
			}
		}
		
		[Description("Constructor")]
		public tblInstrumentUnitsCollection(tblInstrumentUnitsGrp _parent)
		{
			_ID_tblInstrumentUnitsGrp = _parent;
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblInstrumentUnitsChanged(System.EventArgs e)
		{
			if (tblInstrumentUnitsChanged != null)
			{
				this.tblInstrumentUnitsChanged(this, e);
			}
		}
		
		[Description("Gets a  tblInstrumentUnits from the collection.")]
		public tblInstrumentUnits this[int index]
		{
			get
			{
				return ((tblInstrumentUnits)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblInstrumentUnitsChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblInstrumentUnits from the collection.")]
		public tblInstrumentUnits Get(int index)
		{
			return ((tblInstrumentUnits)(List[index]));
		}
		
		[Description("Adds a new tblInstrumentUnits to the collection.")]
		public void Add(tblInstrumentUnits item)
		{
			List.Add(item);
			this.OntblInstrumentUnitsChanged(EventArgs.Empty);
		}
		
		[Description("Removes a tblInstrumentUnits from the collection.")]
		public void Remove(tblInstrumentUnits item)
		{
			List.Remove(item);
			this.OntblInstrumentUnitsChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblInstrumentUnits into the collection at the specified index.")]
		public void Insert(int index, tblInstrumentUnits item)
		{
			List.Insert(index, item);
			this.OntblInstrumentUnitsChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblInstrumentUnits class in the collection.")]
		public int IndexOf(tblInstrumentUnits item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblInstrumentUnits class is present in the collection.")]
		public bool Contains(tblInstrumentUnits item)
		{
			return List.Contains(item);
		}
	}
}
