//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;
using System.Data.SqlClient;
using System.Drawing;
using System.Text;
using System.Windows.Forms;


namespace DCS.DCSTables
{
	
	
	public partial class tblUDFBDPinConnection : SQLiteTable
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblUDFBDPinConnection.</remarks>
		internal static string SQL_Insert = @"INSERT INTO [tblUDFBDPinConnection] ([UDFunctionID], [RightObjectID], [LeftObjectID], [RightPinNo], [LeftPinNo], [RightPinName], [LeftPinName], [autodraw], [Page], [X0], [Y0], [X1], [Y1], [X2], [Y2], [X3], [Y3], [X4], [Y4], [X5], [Y5]) VALUES(@UDFunctionID, @RightObjectID, @LeftObjectID, @RightPinNo, @LeftPinNo, @RightPinName, @LeftPinName, @autodraw, @Page, @X0, @Y0, @X1, @Y1, @X2, @Y2, @X3, @Y3, @X4, @Y4, @X5, @Y5) ; select last_insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblUDFBDPinConnection, with the WHERE clause.</remarks>
		internal static string SQL_Update = @"UPDATE [tblUDFBDPinConnection] SET [UDFunctionID] = @UDFunctionID, [RightObjectID] = @RightObjectID, [LeftObjectID] = @LeftObjectID, [RightPinNo] = @RightPinNo, [LeftPinNo] = @LeftPinNo, [RightPinName] = @RightPinName, [LeftPinName] = @LeftPinName, [autodraw] = @autodraw, [Page] = @Page, [X0] = @X0, [Y0] = @Y0, [X1] = @X1, [Y1] = @Y1, [X2] = @X2, [Y2] = @Y2, [X3] = @X3, [Y3] = @Y3, [X4] = @X4, [Y4] = @Y4, [X5] = @X5, [Y5] = @Y5 WHERE [FBDPinConnectionID]=@FBDPinConnectionID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblUDFBDPinConnection, with the WHERE clause.</remarks>
		internal static string SQL_Select = @"SELECT [UDFunctionID], [RightObjectID], [LeftObjectID], [RightPinNo], [LeftPinNo], [RightPinName], [LeftPinName], [autodraw], [Page], [X0], [Y0], [X1], [Y1], [X2], [Y2], [X3], [Y3], [X4], [Y4], [X5], [Y5] FROM [tblUDFBDPinConnection] WHERE [FBDPinConnectionID]=@FBDPinConnectionID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblUDFBDPinConnection, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblUDFBDPinConnection] WHERE [FBDPinConnectionID]=@FBDPinConnectionI" +
			"D ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _FBDPinConnectionID = -1;
		
		[DisplayName("FBDPin Connection ID")]
		[Category("Primary Key")]
		public long FBDPinConnectionID
		{
			get
			{
				return _FBDPinConnectionID;
			}
			set
			{
				_FBDPinConnectionID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _UDFunctionID = -1;
		
		[DisplayName("UDFunction ID")]
		[Category("Foreign Key")]
		public long UDFunctionID
		{
			get
			{
				return _UDFunctionID;
			}
			set
			{
				_UDFunctionID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _RightObjectID = -1;
		
		[DisplayName("Right Object ID")]
		[Category("Column")]
		public long RightObjectID
		{
			get
			{
				return _RightObjectID;
			}
			set
			{
				_RightObjectID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _LeftObjectID = -1;
		
		[DisplayName("Left Object ID")]
		[Category("Column")]
		public long LeftObjectID
		{
			get
			{
				return _LeftObjectID;
			}
			set
			{
				_LeftObjectID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _RightPinNo;
		
		[DisplayName("Right Pin No")]
		[Category("Column")]
		public int RightPinNo
		{
			get
			{
				return _RightPinNo;
			}
			set
			{
				_RightPinNo = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _LeftPinNo;
		
		[DisplayName("Left Pin No")]
		[Category("Column")]
		public int LeftPinNo
		{
			get
			{
				return _LeftPinNo;
			}
			set
			{
				_LeftPinNo = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _RightPinName = "";
		
		[DisplayName("Right Pin Name")]
		[Category("Column")]
		public string RightPinName
		{
			get
			{
				return _RightPinName;
			}
			set
			{
				_RightPinName = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _LeftPinName = "";
		
		[DisplayName("Left Pin Name")]
		[Category("Column")]
		public string LeftPinName
		{
			get
			{
				return _LeftPinName;
			}
			set
			{
				_LeftPinName = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _autodraw;
		
		[DisplayName("autodraw")]
		[Category("Column")]
		public bool autodraw
		{
			get
			{
				return _autodraw;
			}
			set
			{
				_autodraw = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Page;
		
		[DisplayName("Page")]
		[Category("Column")]
		public int Page
		{
			get
			{
				return _Page;
			}
			set
			{
				_Page = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _X0;
		
		[DisplayName("X0")]
		[Category("Column")]
		public int X0
		{
			get
			{
				return _X0;
			}
			set
			{
				_X0 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Y0;
		
		[DisplayName("Y0")]
		[Category("Column")]
		public int Y0
		{
			get
			{
				return _Y0;
			}
			set
			{
				_Y0 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _X1;
		
		[DisplayName("X1")]
		[Category("Column")]
		public int X1
		{
			get
			{
				return _X1;
			}
			set
			{
				_X1 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Y1;
		
		[DisplayName("Y1")]
		[Category("Column")]
		public int Y1
		{
			get
			{
				return _Y1;
			}
			set
			{
				_Y1 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _X2;
		
		[DisplayName("X2")]
		[Category("Column")]
		public int X2
		{
			get
			{
				return _X2;
			}
			set
			{
				_X2 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Y2;
		
		[DisplayName("Y2")]
		[Category("Column")]
		public int Y2
		{
			get
			{
				return _Y2;
			}
			set
			{
				_Y2 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _X3;
		
		[DisplayName("X3")]
		[Category("Column")]
		public int X3
		{
			get
			{
				return _X3;
			}
			set
			{
				_X3 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Y3;
		
		[DisplayName("Y3")]
		[Category("Column")]
		public int Y3
		{
			get
			{
				return _Y3;
			}
			set
			{
				_Y3 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _X4;
		
		[DisplayName("X4")]
		[Category("Column")]
		public int X4
		{
			get
			{
				return _X4;
			}
			set
			{
				_X4 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Y4;
		
		[DisplayName("Y4")]
		[Category("Column")]
		public int Y4
		{
			get
			{
				return _Y4;
			}
			set
			{
				_Y4 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _X5;
		
		[DisplayName("X5")]
		[Category("Column")]
		public int X5
		{
			get
			{
				return _X5;
			}
			set
			{
				_X5 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Y5;
		
		[DisplayName("Y5")]
		[Category("Column")]
		public int Y5
		{
			get
			{
				return _Y5;
			}
			set
			{
				_Y5 = value;
			}
		}
		#endregion
		
		#region Related Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblFunction _FunctionID_tblFunction;
		
		[Description("Represents the foreign key object of the type FunctionID")]
		public tblFunction m_FunctionID_tblFunction
		{
			get
			{
				return _FunctionID_tblFunction;
			}
			set
			{
				_FunctionID_tblFunction = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblUDFBDPinConnection.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblUDFBDPinConnection.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblUDFBDPinConnection.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				FBDPinConnectionID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblUDFBDPinConnection.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public tblUDFBDPinConnection()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@FBDPinConnectionID", FBDPinConnectionID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@UDFunctionID", UDFunctionID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@RightObjectID", RightObjectID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LeftObjectID", LeftObjectID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@RightPinNo", RightPinNo, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LeftPinNo", LeftPinNo, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@RightPinName", RightPinName, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LeftPinName", LeftPinName, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@autodraw", autodraw, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Page", Page, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@X0", X0, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Y0", Y0, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@X1", X1, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Y1", Y1, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@X2", X2, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Y2", Y2, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@X3", X3, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Y3", Y3, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@X4", X4, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Y4", Y4, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@X5", X5, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Y5", Y5, DbType.Int32));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		public void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the FBDPinConnectionID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("FBDPinConnectionID")) == false))
				{
					FBDPinConnectionID = ((long)(Convert.ChangeType(rs["FBDPinConnectionID"], typeof(long))));
				}
				// if value from the recordset, to the UDFunctionID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("UDFunctionID")) == false))
				{
					UDFunctionID = ((long)(Convert.ChangeType(rs["UDFunctionID"], typeof(long))));
				}
				// if value from the recordset, to the RightObjectID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("RightObjectID")) == false))
				{
					RightObjectID = ((long)(Convert.ChangeType(rs["RightObjectID"], typeof(long))));
				}
				// if value from the recordset, to the LeftObjectID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LeftObjectID")) == false))
				{
					LeftObjectID = ((long)(Convert.ChangeType(rs["LeftObjectID"], typeof(long))));
				}
				// if value from the recordset, to the RightPinNo _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("RightPinNo")) == false))
				{
					RightPinNo = ((int)(Convert.ChangeType(rs["RightPinNo"], typeof(int))));
				}
				// if value from the recordset, to the LeftPinNo _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LeftPinNo")) == false))
				{
					LeftPinNo = ((int)(Convert.ChangeType(rs["LeftPinNo"], typeof(int))));
				}
				// if value from the recordset, to the RightPinName _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("RightPinName")) == false))
				{
					RightPinName = ((string)(Convert.ChangeType(rs["RightPinName"], typeof(string))));
				}
				// if value from the recordset, to the LeftPinName _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LeftPinName")) == false))
				{
					LeftPinName = ((string)(Convert.ChangeType(rs["LeftPinName"], typeof(string))));
				}
				// if value from the recordset, to the autodraw _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("autodraw")) == false))
				{
					autodraw = ((bool)(Convert.ChangeType(rs["autodraw"], typeof(bool))));
				}
				// if value from the recordset, to the Page _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Page")) == false))
				{
					Page = ((int)(Convert.ChangeType(rs["Page"], typeof(int))));
				}
				// if value from the recordset, to the X0 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("X0")) == false))
				{
					X0 = ((int)(Convert.ChangeType(rs["X0"], typeof(int))));
				}
				// if value from the recordset, to the Y0 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Y0")) == false))
				{
					Y0 = ((int)(Convert.ChangeType(rs["Y0"], typeof(int))));
				}
				// if value from the recordset, to the X1 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("X1")) == false))
				{
					X1 = ((int)(Convert.ChangeType(rs["X1"], typeof(int))));
				}
				// if value from the recordset, to the Y1 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Y1")) == false))
				{
					Y1 = ((int)(Convert.ChangeType(rs["Y1"], typeof(int))));
				}
				// if value from the recordset, to the X2 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("X2")) == false))
				{
					X2 = ((int)(Convert.ChangeType(rs["X2"], typeof(int))));
				}
				// if value from the recordset, to the Y2 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Y2")) == false))
				{
					Y2 = ((int)(Convert.ChangeType(rs["Y2"], typeof(int))));
				}
				// if value from the recordset, to the X3 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("X3")) == false))
				{
					X3 = ((int)(Convert.ChangeType(rs["X3"], typeof(int))));
				}
				// if value from the recordset, to the Y3 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Y3")) == false))
				{
					Y3 = ((int)(Convert.ChangeType(rs["Y3"], typeof(int))));
				}
				// if value from the recordset, to the X4 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("X4")) == false))
				{
					X4 = ((int)(Convert.ChangeType(rs["X4"], typeof(int))));
				}
				// if value from the recordset, to the Y4 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Y4")) == false))
				{
					Y4 = ((int)(Convert.ChangeType(rs["Y4"], typeof(int))));
				}
				// if value from the recordset, to the X5 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("X5")) == false))
				{
					X5 = ((int)(Convert.ChangeType(rs["X5"], typeof(int))));
				}
				// if value from the recordset, to the Y5 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Y5")) == false))
				{
					Y5 = ((int)(Convert.ChangeType(rs["Y5"], typeof(int))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		
		public override void AddFromString(string[] _strs, string arg1, ref string _log)
		{
			try
			{
				this.PreAddFromString(ref _log);
				int i;
				i = this.ColumnExistInHeader("UDFunctionID");
				if ((i >= 0))
				{
					UDFunctionID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("RightObjectID");
				if ((i >= 0))
				{
					RightObjectID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("LeftObjectID");
				if ((i >= 0))
				{
					LeftObjectID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("RightPinNo");
				if ((i >= 0))
				{
					RightPinNo = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("LeftPinNo");
				if ((i >= 0))
				{
					LeftPinNo = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("RightPinName");
				if ((i >= 0))
				{
					RightPinName = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("LeftPinName");
				if ((i >= 0))
				{
					LeftPinName = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("autodraw");
				if ((i >= 0))
				{
					autodraw = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("Page");
				if ((i >= 0))
				{
					Page = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("X0");
				if ((i >= 0))
				{
					X0 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Y0");
				if ((i >= 0))
				{
					Y0 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("X1");
				if ((i >= 0))
				{
					X1 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Y1");
				if ((i >= 0))
				{
					Y1 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("X2");
				if ((i >= 0))
				{
					X2 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Y2");
				if ((i >= 0))
				{
					Y2 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("X3");
				if ((i >= 0))
				{
					X3 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Y3");
				if ((i >= 0))
				{
					Y3 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("X4");
				if ((i >= 0))
				{
					X4 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Y4");
				if ((i >= 0))
				{
					Y4 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("X5");
				if ((i >= 0))
				{
					X5 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Y5");
				if ((i >= 0))
				{
					Y5 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				this.PostAddFromString(ref _log);
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblUDFBDPinConnectionChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblUDFBDPinConnectionCollection : SQLiteTableCollection
	{
		
		/// <remarks>SQL Type:tblUDFBDPinConnectionChangedEventHandler</remarks>
		public event tblUDFBDPinConnectionChangedEventHandler tblUDFBDPinConnectionChanged;
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblFunction _FunctionID_tblFunction;
		
		[Description("Represents the foreign key object of the type FunctionID")]
		public tblFunction m_FunctionID_tblFunction
		{
			get
			{
				return _FunctionID_tblFunction;
			}
			set
			{
				_FunctionID_tblFunction = value;
			}
		}
		
		[Description("Constructor")]
		public tblUDFBDPinConnectionCollection(tblFunction _parent)
		{
			_FunctionID_tblFunction = _parent;
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblUDFBDPinConnectionChanged(System.EventArgs e)
		{
			if (tblUDFBDPinConnectionChanged != null)
			{
				this.tblUDFBDPinConnectionChanged(this, e);
			}
		}
		
		[Description("Gets a  tblUDFBDPinConnection from the collection.")]
		public tblUDFBDPinConnection this[int index]
		{
			get
			{
				return ((tblUDFBDPinConnection)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblUDFBDPinConnectionChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblUDFBDPinConnection from the collection.")]
		public tblUDFBDPinConnection Get(int index)
		{
			return ((tblUDFBDPinConnection)(List[index]));
		}
		
		[Description("Adds a new tblUDFBDPinConnection to the collection.")]
		public void Add(tblUDFBDPinConnection item)
		{
			List.Add(item);
			this.OntblUDFBDPinConnectionChanged(EventArgs.Empty);
		}
		
		[Description("Removes a tblUDFBDPinConnection from the collection.")]
		public void Remove(tblUDFBDPinConnection item)
		{
			List.Remove(item);
			this.OntblUDFBDPinConnectionChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblUDFBDPinConnection into the collection at the specified index.")]
		public void Insert(int index, tblUDFBDPinConnection item)
		{
			List.Insert(index, item);
			this.OntblUDFBDPinConnectionChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblUDFBDPinConnection class in the collection.")]
		public int IndexOf(tblUDFBDPinConnection item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblUDFBDPinConnection class is present in the collection.")]
		public bool Contains(tblUDFBDPinConnection item)
		{
			return List.Contains(item);
		}
	}
}
