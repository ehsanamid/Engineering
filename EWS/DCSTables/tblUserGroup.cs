//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;


namespace DCS.DCSTables
{


    public partial class tblUserGroup : SQLiteTable
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblUserGroup.</remarks>
		internal static string SQL_Insert = "INSERT INTO [tblUserGroup] ([GroupName], [Description], [ENGAccess], [EWSAccessLe" +
			"vel]) VALUES(@GroupName, @Description, @ENGAccess, @EWSAccessLevel) ; select las" +
			"t_insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblUserGroup, with the WHERE clause.</remarks>
		internal static string SQL_Update = "UPDATE [tblUserGroup] SET [GroupName] = @GroupName, [Description] = @Description," +
			" [ENGAccess] = @ENGAccess, [EWSAccessLevel] = @EWSAccessLevel WHERE [GroupNameID" +
			"]=@GroupNameID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblUserGroup, with the WHERE clause.</remarks>
		internal static string SQL_Select = "SELECT [GroupName], [Description], [ENGAccess], [EWSAccessLevel] FROM [tblUserGro" +
			"up] WHERE [GroupNameID]=@GroupNameID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblUserGroup, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblUserGroup] WHERE [GroupNameID]=@GroupNameID ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.String</remarks>
		private string _GroupName = "";
		
		[DisplayName("Group Name")]
		[Category("Column")]
		public string GroupName
		{
			get
			{
				return _GroupName;
			}
			set
			{
				_GroupName = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Description = "";
		
		[DisplayName("Description")]
		[Category("Column")]
		public string Description
		{
			get
			{
				return _Description;
			}
			set
			{
				_Description = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _ENGAccess;
		
		[DisplayName("ENGAccess")]
		[Category("Column")]
		public bool ENGAccess
		{
			get
			{
				return _ENGAccess;
			}
			set
			{
				_ENGAccess = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _EWSAccessLevel;
		
		[DisplayName("EWSAccess Level")]
		[Category("Column")]
		public int EWSAccessLevel
		{
			get
			{
				return _EWSAccessLevel;
			}
			set
			{
				_EWSAccessLevel = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _GroupNameID = -1;
		
		[DisplayName("Group Name ID")]
		[Category("Primary Key")]
		public long GroupNameID
		{
			get
			{
				return _GroupNameID;
			}
			set
			{
				_GroupNameID = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblUserGroup.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblUserGroup.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblUserGroup.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				GroupNameID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblUserGroup.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public tblUserGroup()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@GroupName", GroupName, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Description", Description, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@ENGAccess", ENGAccess, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@EWSAccessLevel", EWSAccessLevel, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@GroupNameID", GroupNameID, DbType.Int64));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		public void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the GroupName _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("GroupName")) == false))
				{
					GroupName = ((string)(Convert.ChangeType(rs["GroupName"], typeof(string))));
				}
				// if value from the recordset, to the Description _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Description")) == false))
				{
					Description = ((string)(Convert.ChangeType(rs["Description"], typeof(string))));
				}
				// if value from the recordset, to the ENGAccess _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ENGAccess")) == false))
				{
					ENGAccess = ((bool)(Convert.ChangeType(rs["ENGAccess"], typeof(bool))));
				}
				// if value from the recordset, to the EWSAccessLevel _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("EWSAccessLevel")) == false))
				{
					EWSAccessLevel = ((int)(Convert.ChangeType(rs["EWSAccessLevel"], typeof(int))));
				}
				// if value from the recordset, to the GroupNameID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("GroupNameID")) == false))
				{
					GroupNameID = ((long)(Convert.ChangeType(rs["GroupNameID"], typeof(long))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		
		public override void AddFromString(string[] _strs, string arg1, ref string _log)
		{
			try
			{
				this.PreAddFromString(ref _log);
				int i;
				i = this.ColumnExistInHeader("GroupName");
				if ((i >= 0))
				{
					GroupName = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Description");
				if ((i >= 0))
				{
					Description = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("ENGAccess");
				if ((i >= 0))
				{
					ENGAccess = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("EWSAccessLevel");
				if ((i >= 0))
				{
					EWSAccessLevel = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				this.PostAddFromString(ref _log);
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblUserGroupChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblUserGroupCollection : SQLiteTableCollection
	{
		
		/// <remarks>SQL Type:tblUserGroupChangedEventHandler</remarks>
		public event tblUserGroupChangedEventHandler tblUserGroupChanged;
		
		[Description("Constructor")]
		public tblUserGroupCollection()
		{
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblUserGroupChanged(System.EventArgs e)
		{
			if (tblUserGroupChanged != null)
			{
				this.tblUserGroupChanged(this, e);
			}
		}
		
		[Description("Gets a  tblUserGroup from the collection.")]
		public tblUserGroup this[int index]
		{
			get
			{
				return ((tblUserGroup)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblUserGroupChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblUserGroup from the collection.")]
		public tblUserGroup Get(int index)
		{
			return ((tblUserGroup)(List[index]));
		}
		
		[Description("Adds a new tblUserGroup to the collection.")]
		public void Add(tblUserGroup item)
		{
			List.Add(item);
			this.OntblUserGroupChanged(EventArgs.Empty);
		}
		
		[Description("Removes a tblUserGroup from the collection.")]
		public void Remove(tblUserGroup item)
		{
			List.Remove(item);
			this.OntblUserGroupChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblUserGroup into the collection at the specified index.")]
		public void Insert(int index, tblUserGroup item)
		{
			List.Insert(index, item);
			this.OntblUserGroupChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblUserGroup class in the collection.")]
		public int IndexOf(tblUserGroup item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblUserGroup class is present in the collection.")]
		public bool Contains(tblUserGroup item)
		{
			return List.Contains(item);
		}
	}
}
