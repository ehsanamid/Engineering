//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;
using System.Data.SqlClient;
using System.Text;


namespace EWS.DCSTables
{
	
	
	public partial class tblRoundRect : Object
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblRoundRect.</remarks>
		internal static string SQL_Insert = @"INSERT INTO [tblRoundRect] ([DisplayID], [oIndex], [bBrush], [bPen], [LogpenLopnColor], [LogpenLopnStyle], [LogpenLopnWidthX], [LogpenLopnWidthY], [LogbrushLbColor], [LogbrushLbHatch], [LogbrushLbStyle], [Left], [Top], [Right], [Bottom], [RoundnessX], [RoundnessY]) VALUES(@DisplayID, @oIndex, @bBrush, @bPen, @LogpenLopnColor, @LogpenLopnStyle, @LogpenLopnWidthX, @LogpenLopnWidthY, @LogbrushLbColor, @LogbrushLbHatch, @LogbrushLbStyle, @Left, @Top, @Right, @Bottom, @RoundnessX, @RoundnessY) ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblRoundRect, with the WHERE clause.</remarks>
		internal static string SQL_Update = @"UPDATE [tblRoundRect] SET [DisplayID] = @DisplayID, [oIndex] = @oIndex, [bBrush] = @bBrush, [bPen] = @bPen, [LogpenLopnColor] = @LogpenLopnColor, [LogpenLopnStyle] = @LogpenLopnStyle, [LogpenLopnWidthX] = @LogpenLopnWidthX, [LogpenLopnWidthY] = @LogpenLopnWidthY, [LogbrushLbColor] = @LogbrushLbColor, [LogbrushLbHatch] = @LogbrushLbHatch, [LogbrushLbStyle] = @LogbrushLbStyle, [Left] = @Left, [Top] = @Top, [Right] = @Right, [Bottom] = @Bottom, [RoundnessX] = @RoundnessX, [RoundnessY] = @RoundnessY WHERE [RoundRectID]=@RoundRectID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblRoundRect, with the WHERE clause.</remarks>
		internal static string SQL_Select = @"SELECT [DisplayID], [oIndex], [bBrush], [bPen], [LogpenLopnColor], [LogpenLopnStyle], [LogpenLopnWidthX], [LogpenLopnWidthY], [LogbrushLbColor], [LogbrushLbHatch], [LogbrushLbStyle], [Left], [Top], [Right], [Bottom], [RoundnessX], [RoundnessY] FROM [tblRoundRect] WHERE [RoundRectID]=@RoundRectID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblRoundRect, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblRoundRect] WHERE [RoundRectID]=@RoundRectID ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _RoundRectID;
		
		[DisplayName("Round Rect ID")]
		[Category("Primary Key")]
		public long RoundRectID
		{
			get
			{
				return _RoundRectID;
			}
			set
			{
				_RoundRectID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _DisplayID;
		
		[DisplayName("Display ID")]
		[Category("Foreign Key")]
		public long DisplayID
		{
			get
			{
				return _DisplayID;
			}
			set
			{
				_DisplayID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _oIndex;
		
		[DisplayName("o Index")]
		[Category("Column")]
		public int oIndex
		{
			get
			{
				return _oIndex;
			}
			set
			{
				_oIndex = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _bBrush;
		
		[DisplayName("b Brush")]
		[Category("Column")]
		public bool bBrush
		{
			get
			{
				return _bBrush;
			}
			set
			{
				_bBrush = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _bPen;
		
		[DisplayName("b Pen")]
		[Category("Column")]
		public bool bPen
		{
			get
			{
				return _bPen;
			}
			set
			{
				_bPen = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _LogpenLopnColor;
		
		[DisplayName("Logpen Lopn Color")]
		[Category("Column")]
		public int LogpenLopnColor
		{
			get
			{
				return _LogpenLopnColor;
			}
			set
			{
				_LogpenLopnColor = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _LogpenLopnStyle;
		
		[DisplayName("Logpen Lopn Style")]
		[Category("Column")]
		public int LogpenLopnStyle
		{
			get
			{
				return _LogpenLopnStyle;
			}
			set
			{
				_LogpenLopnStyle = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _LogpenLopnWidthX;
		
		[DisplayName("Logpen Lopn Width X")]
		[Category("Column")]
		public int LogpenLopnWidthX
		{
			get
			{
				return _LogpenLopnWidthX;
			}
			set
			{
				_LogpenLopnWidthX = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _LogpenLopnWidthY;
		
		[DisplayName("Logpen Lopn Width Y")]
		[Category("Column")]
		public int LogpenLopnWidthY
		{
			get
			{
				return _LogpenLopnWidthY;
			}
			set
			{
				_LogpenLopnWidthY = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _LogbrushLbColor;
		
		[DisplayName("Logbrush Lb Color")]
		[Category("Column")]
		public int LogbrushLbColor
		{
			get
			{
				return _LogbrushLbColor;
			}
			set
			{
				_LogbrushLbColor = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _LogbrushLbHatch;
		
		[DisplayName("Logbrush Lb Hatch")]
		[Category("Column")]
		public int LogbrushLbHatch
		{
			get
			{
				return _LogbrushLbHatch;
			}
			set
			{
				_LogbrushLbHatch = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _LogbrushLbStyle;
		
		[DisplayName("Logbrush Lb Style")]
		[Category("Column")]
		public int LogbrushLbStyle
		{
			get
			{
				return _LogbrushLbStyle;
			}
			set
			{
				_LogbrushLbStyle = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Left;
		
		[DisplayName("Left")]
		[Category("Column")]
		public int Left
		{
			get
			{
				return _Left;
			}
			set
			{
				_Left = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Top;
		
		[DisplayName("Top")]
		[Category("Column")]
		public int Top
		{
			get
			{
				return _Top;
			}
			set
			{
				_Top = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Right;
		
		[DisplayName("Right")]
		[Category("Column")]
		public int Right
		{
			get
			{
				return _Right;
			}
			set
			{
				_Right = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Bottom;
		
		[DisplayName("Bottom")]
		[Category("Column")]
		public int Bottom
		{
			get
			{
				return _Bottom;
			}
			set
			{
				_Bottom = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _RoundnessX;
		
		[DisplayName("Roundness X")]
		[Category("Column")]
		public int RoundnessX
		{
			get
			{
				return _RoundnessX;
			}
			set
			{
				_RoundnessX = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _RoundnessY;
		
		[DisplayName("Roundness Y")]
		[Category("Column")]
		public int RoundnessY
		{
			get
			{
				return _RoundnessY;
			}
			set
			{
				_RoundnessY = value;
			}
		}
		#endregion
		
		#region Related Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblDisplay _DisplayID_tblDisplay;
		
		[Description("Represents the foreign key object of the type DisplayID")]
		public tblDisplay m_DisplayID_tblDisplay
		{
			get
			{
				return _DisplayID_tblDisplay;
			}
			set
			{
				_DisplayID_tblDisplay = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				SQLiteConnection Conn = new SQLiteConnection(Common.ConnectionString);
				SQLiteCommand Com = Conn.CreateCommand();
				SQLiteCommand ComSync = Conn.CreateCommand();
				Com.CommandText = tblRoundRect.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				Conn.Open();
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				Conn.Close();
				ComSync.Dispose();
				Com.Dispose();
				Conn.Dispose();
				return rowseffected;
			}
			catch (System.Exception )
			{
				throw;
			}
		}
		
		public void Select()
		{
			try
			{
				SQLiteConnection Conn = new SQLiteConnection(Common.ConnectionString);
				SQLiteCommand Com = Conn.CreateCommand();
				Com.CommandText = tblRoundRect.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				Conn.Open();
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				Conn.Close();
				rs.Dispose();
				Com.Dispose();
				Conn.Dispose();
			}
			catch (System.Exception )
			{
				throw;
			}
		}
		
		public int Insert()
		{
			try
			{
				SQLiteConnection Conn = new SQLiteConnection(Common.ConnectionString);
				SQLiteCommand Com = Conn.CreateCommand();
				Com.CommandText = tblRoundRect.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				Conn.Open();
				int rowseffected = Com.ExecuteNonQuery();
				Conn.Close();
				Com.Dispose();
				Conn.Dispose();
				return rowseffected;
			}
			catch (System.Exception )
			{
				throw;
			}
		}
		
		public int Update()
		{
			try
			{
				SQLiteConnection Conn = new SQLiteConnection(Common.ConnectionString);
				SQLiteCommand Com = Conn.CreateCommand();
				Com.CommandText = tblRoundRect.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				Conn.Open();
				int rowseffected = Com.ExecuteNonQuery();
				Conn.Close();
				Com.Dispose();
				Conn.Dispose();
				return rowseffected;
			}
			catch (System.Exception )
			{
				throw;
			}
		}
		
		public tblRoundRect()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@RoundRectID", RoundRectID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@DisplayID", DisplayID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@oIndex", oIndex, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@bBrush", bBrush, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@bPen", bPen, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LogpenLopnColor", LogpenLopnColor, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LogpenLopnStyle", LogpenLopnStyle, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LogpenLopnWidthX", LogpenLopnWidthX, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LogpenLopnWidthY", LogpenLopnWidthY, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LogbrushLbColor", LogbrushLbColor, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LogbrushLbHatch", LogbrushLbHatch, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LogbrushLbStyle", LogbrushLbStyle, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Left", Left, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Top", Top, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Right", Right, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Bottom", Bottom, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@RoundnessX", RoundnessX, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@RoundnessY", RoundnessY, DbType.Int32));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		private void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the RoundRectID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("RoundRectID")) == false))
				{
					RoundRectID = ((long)(rs["RoundRectID"]));
				}
				// if value from the recordset, to the DisplayID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("DisplayID")) == false))
				{
					DisplayID = (long)((int)(rs["DisplayID"]));
				}
				// if value from the recordset, to the oIndex _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("oIndex")) == false))
				{
					oIndex = ((int)(rs["oIndex"]));
				}
				// if value from the recordset, to the bBrush _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("bBrush")) == false))
				{
					bBrush = ((bool)(rs["bBrush"]));
				}
				// if value from the recordset, to the bPen _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("bPen")) == false))
				{
					bPen = ((bool)(rs["bPen"]));
				}
				// if value from the recordset, to the LogpenLopnColor _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LogpenLopnColor")) == false))
				{
					LogpenLopnColor = ((int)(rs["LogpenLopnColor"]));
				}
				// if value from the recordset, to the LogpenLopnStyle _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LogpenLopnStyle")) == false))
				{
					LogpenLopnStyle = ((int)(rs["LogpenLopnStyle"]));
				}
				// if value from the recordset, to the LogpenLopnWidthX _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LogpenLopnWidthX")) == false))
				{
					LogpenLopnWidthX = ((int)(rs["LogpenLopnWidthX"]));
				}
				// if value from the recordset, to the LogpenLopnWidthY _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LogpenLopnWidthY")) == false))
				{
					LogpenLopnWidthY = ((int)(rs["LogpenLopnWidthY"]));
				}
				// if value from the recordset, to the LogbrushLbColor _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LogbrushLbColor")) == false))
				{
					LogbrushLbColor = ((int)(rs["LogbrushLbColor"]));
				}
				// if value from the recordset, to the LogbrushLbHatch _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LogbrushLbHatch")) == false))
				{
					LogbrushLbHatch = ((int)(rs["LogbrushLbHatch"]));
				}
				// if value from the recordset, to the LogbrushLbStyle _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LogbrushLbStyle")) == false))
				{
					LogbrushLbStyle = ((int)(rs["LogbrushLbStyle"]));
				}
				// if value from the recordset, to the Left _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Left")) == false))
				{
					Left = ((int)(rs["Left"]));
				}
				// if value from the recordset, to the Top _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Top")) == false))
				{
					Top = ((int)(rs["Top"]));
				}
				// if value from the recordset, to the Right _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Right")) == false))
				{
					Right = ((int)(rs["Right"]));
				}
				// if value from the recordset, to the Bottom _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Bottom")) == false))
				{
					Bottom = ((int)(rs["Bottom"]));
				}
				// if value from the recordset, to the RoundnessX _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("RoundnessX")) == false))
				{
					RoundnessX = ((int)(rs["RoundnessX"]));
				}
				// if value from the recordset, to the RoundnessY _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("RoundnessY")) == false))
				{
					RoundnessY = ((int)(rs["RoundnessY"]));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblRoundRectChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblRoundRectCollection : System.Collections.CollectionBase
	{
		
		/// <remarks>SQL Type:tblRoundRectChangedEventHandler</remarks>
		public event tblRoundRectChangedEventHandler tblRoundRectChanged;
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblDisplay _DisplayID_tblDisplay;
		
		[Description("Represents the foreign key object of the type DisplayID")]
		public tblDisplay m_DisplayID_tblDisplay
		{
			get
			{
				return _DisplayID_tblDisplay;
			}
			set
			{
				_DisplayID_tblDisplay = value;
			}
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblRoundRectChanged(System.EventArgs e)
		{
			if (tblRoundRectChanged != null)
			{
				this.tblRoundRectChanged(this, e);
			}
		}
		
		[Description("Gets a  tblRoundRect from the collection.")]
		public tblRoundRect this[int index]
		{
			get
			{
				return ((tblRoundRect)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblRoundRectChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblRoundRect from the collection.")]
		public tblRoundRect Get(int index)
		{
			return ((tblRoundRect)(List[index]));
		}
		
		[Description("Adds a new tblRoundRect to the collection.")]
		public int Add(tblRoundRect item)
		{
			int newindex = List.Add(item);
			this.OntblRoundRectChanged(EventArgs.Empty);
			return newindex;
		}
		
		[Description("Removes a tblRoundRect from the collection.")]
		public void Remove(tblRoundRect item)
		{
			List.Remove(item);
			this.OntblRoundRectChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblRoundRect into the collection at the specified index.")]
		public void Insert(int index, tblRoundRect item)
		{
			List.Insert(index, item);
			this.OntblRoundRectChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblRoundRect class in the collection.")]
		public int IndexOf(tblRoundRect item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblRoundRect class is present in the collection.")]
		public bool Contains(tblRoundRect item)
		{
			return List.Contains(item);
		}
	}
}
