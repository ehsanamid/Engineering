//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;
using System.Drawing;


namespace DCS.DCSTables
{


    public partial class tblDisplay : SQLiteTable
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblDisplay.</remarks>
		internal static string SQL_Insert = "INSERT INTO [tblDisplay] ([DisplayName], [SolutionID], [ParrentDisplay], [IsDispl" +
			"ay], [oIndex], [BackColor], [Grid], [Grid_X], [Grid_Y], [Snap], [Snap_X], [Snap_" +
			"Y], [Footer], [Prepair], [Approved], [DocNo], [SheetNo], [Description], [Revisio" +
			"n], [LastUpdate], [Layer1], [Layer1Desc], [Layer1Enable], [Layer1Lock], [Layer2]" +
			", [Layer2Desc], [Layer2Enable], [Layer2Lock], [Layer3], [Layer3Desc], [Layer3Ena" +
			"ble], [Layer3Lock], [Layer4], [Layer4Desc], [Layer4Enable], [Layer4Lock], [Layer" +
			"5], [Layer5Desc], [Layer5Enable], [Layer5Lock], [Layer6], [Layer6Desc], [Layer6E" +
			"nable], [Layer6Lock], [Layer7], [Layer7Desc], [Layer7Enable], [Layer7Lock], [Lay" +
			"er8], [Layer8Desc], [Layer8Enable], [Layer8Lock], [TopPageID], [DownPageID], [Le" +
			"ftPageID], [RightPageID], [Height], [Width], [TopDisplayID], [LeftDisplayID], [R" +
			"ightDisplayID], [DownDisplayID]) VALUES(@DisplayName, @SolutionID, @ParrentDispl" +
			"ay, @IsDisplay, @oIndex, @BackColor, @Grid, @Grid_X, @Grid_Y, @Snap, @Snap_X, @S" +
			"nap_Y, @Footer, @Prepair, @Approved, @DocNo, @SheetNo, @Description, @Revision, " +
			"@LastUpdate, @Layer1, @Layer1Desc, @Layer1Enable, @Layer1Lock, @Layer2, @Layer2D" +
			"esc, @Layer2Enable, @Layer2Lock, @Layer3, @Layer3Desc, @Layer3Enable, @Layer3Loc" +
			"k, @Layer4, @Layer4Desc, @Layer4Enable, @Layer4Lock, @Layer5, @Layer5Desc, @Laye" +
			"r5Enable, @Layer5Lock, @Layer6, @Layer6Desc, @Layer6Enable, @Layer6Lock, @Layer7" +
			", @Layer7Desc, @Layer7Enable, @Layer7Lock, @Layer8, @Layer8Desc, @Layer8Enable, " +
			"@Layer8Lock, @TopPageID, @DownPageID, @LeftPageID, @RightPageID, @Height, @Width" +
			", @TopDisplayID, @LeftDisplayID, @RightDisplayID, @DownDisplayID) ; select last_" +
			"insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblDisplay, with the WHERE clause.</remarks>
		internal static string SQL_Update = "UPDATE [tblDisplay] SET [DisplayName] = @DisplayName, [SolutionID] = @SolutionID," +
			" [ParrentDisplay] = @ParrentDisplay, [IsDisplay] = @IsDisplay, [oIndex] = @oInde" +
			"x, [BackColor] = @BackColor, [Grid] = @Grid, [Grid_X] = @Grid_X, [Grid_Y] = @Gri" +
			"d_Y, [Snap] = @Snap, [Snap_X] = @Snap_X, [Snap_Y] = @Snap_Y, [Footer] = @Footer," +
			" [Prepair] = @Prepair, [Approved] = @Approved, [DocNo] = @DocNo, [SheetNo] = @Sh" +
			"eetNo, [Description] = @Description, [Revision] = @Revision, [LastUpdate] = @Las" +
			"tUpdate, [Layer1] = @Layer1, [Layer1Desc] = @Layer1Desc, [Layer1Enable] = @Layer" +
			"1Enable, [Layer1Lock] = @Layer1Lock, [Layer2] = @Layer2, [Layer2Desc] = @Layer2D" +
			"esc, [Layer2Enable] = @Layer2Enable, [Layer2Lock] = @Layer2Lock, [Layer3] = @Lay" +
			"er3, [Layer3Desc] = @Layer3Desc, [Layer3Enable] = @Layer3Enable, [Layer3Lock] = " +
			"@Layer3Lock, [Layer4] = @Layer4, [Layer4Desc] = @Layer4Desc, [Layer4Enable] = @L" +
			"ayer4Enable, [Layer4Lock] = @Layer4Lock, [Layer5] = @Layer5, [Layer5Desc] = @Lay" +
			"er5Desc, [Layer5Enable] = @Layer5Enable, [Layer5Lock] = @Layer5Lock, [Layer6] = " +
			"@Layer6, [Layer6Desc] = @Layer6Desc, [Layer6Enable] = @Layer6Enable, [Layer6Lock" +
			"] = @Layer6Lock, [Layer7] = @Layer7, [Layer7Desc] = @Layer7Desc, [Layer7Enable] " +
			"= @Layer7Enable, [Layer7Lock] = @Layer7Lock, [Layer8] = @Layer8, [Layer8Desc] = " +
			"@Layer8Desc, [Layer8Enable] = @Layer8Enable, [Layer8Lock] = @Layer8Lock, [TopPag" +
			"eID] = @TopPageID, [DownPageID] = @DownPageID, [LeftPageID] = @LeftPageID, [Righ" +
			"tPageID] = @RightPageID, [Height] = @Height, [Width] = @Width, [TopDisplayID] = " +
			"@TopDisplayID, [LeftDisplayID] = @LeftDisplayID, [RightDisplayID] = @RightDispla" +
			"yID, [DownDisplayID] = @DownDisplayID WHERE [DisplayID]=@DisplayID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblDisplay, with the WHERE clause.</remarks>
		internal static string SQL_Select = @"SELECT [DisplayName], [SolutionID], [ParrentDisplay], [IsDisplay], [oIndex], [BackColor], [Grid], [Grid_X], [Grid_Y], [Snap], [Snap_X], [Snap_Y], [Footer], [Prepair], [Approved], [DocNo], [SheetNo], [Description], [Revision], [LastUpdate], [Layer1], [Layer1Desc], [Layer1Enable], [Layer1Lock], [Layer2], [Layer2Desc], [Layer2Enable], [Layer2Lock], [Layer3], [Layer3Desc], [Layer3Enable], [Layer3Lock], [Layer4], [Layer4Desc], [Layer4Enable], [Layer4Lock], [Layer5], [Layer5Desc], [Layer5Enable], [Layer5Lock], [Layer6], [Layer6Desc], [Layer6Enable], [Layer6Lock], [Layer7], [Layer7Desc], [Layer7Enable], [Layer7Lock], [Layer8], [Layer8Desc], [Layer8Enable], [Layer8Lock], [TopPageID], [DownPageID], [LeftPageID], [RightPageID], [Height], [Width], [TopDisplayID], [LeftDisplayID], [RightDisplayID], [DownDisplayID] FROM [tblDisplay] WHERE [DisplayID]=@DisplayID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblDisplay, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblDisplay] WHERE [DisplayID]=@DisplayID ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.String</remarks>
		private string _DisplayName = "";
		
		[DisplayName("Display Name")]
		[Category("Column")]
		public string DisplayName
		{
			get
			{
				return _DisplayName;
			}
			set
			{
				_DisplayName = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _DisplayID = -1;
		
		[DisplayName("Display ID")]
		[Category("Primary Key")]
		public long DisplayID
		{
			get
			{
				return _DisplayID;
			}
			set
			{
				_DisplayID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _SolutionID = -1;
		
		[DisplayName("Solution ID")]
		[Category("Foreign Key")]
		public long SolutionID
		{
			get
			{
				return _SolutionID;
			}
			set
			{
				_SolutionID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _ParrentDisplay = -1;
		
		[DisplayName("Parrent Display")]
		[Category("Column")]
		public long ParrentDisplay
		{
			get
			{
				return _ParrentDisplay;
			}
			set
			{
				_ParrentDisplay = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _IsDisplay;
		
		[DisplayName("Is Display")]
		[Category("Column")]
		public bool IsDisplay
		{
			get
			{
				return _IsDisplay;
			}
			set
			{
				_IsDisplay = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _oIndex;
		
		[DisplayName("o Index")]
		[Category("Column")]
		public int oIndex
		{
			get
			{
				return _oIndex;
			}
			set
			{
				_oIndex = value;
			}
		}
		
		/// <remarks>SQL Type:System.Drawing.Color</remarks>
		private System.Drawing.Color _BackColor;
		
		[DisplayName("Back Color")]
		[Category("Column")]
		public System.Drawing.Color BackColor
		{
			get
			{
				return _BackColor;
			}
			set
			{
				_BackColor = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _Grid;
		
		[DisplayName("Grid")]
		[Category("Column")]
		public bool Grid
		{
			get
			{
				return _Grid;
			}
			set
			{
				_Grid = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _Grid_X;
		
		[DisplayName("Grid_X")]
		[Category("Column")]
		public short Grid_X
		{
			get
			{
				return _Grid_X;
			}
			set
			{
				_Grid_X = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _Grid_Y;
		
		[DisplayName("Grid_Y")]
		[Category("Column")]
		public short Grid_Y
		{
			get
			{
				return _Grid_Y;
			}
			set
			{
				_Grid_Y = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _Snap;
		
		[DisplayName("Snap")]
		[Category("Column")]
		public bool Snap
		{
			get
			{
				return _Snap;
			}
			set
			{
				_Snap = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _Snap_X;
		
		[DisplayName("Snap_X")]
		[Category("Column")]
		public short Snap_X
		{
			get
			{
				return _Snap_X;
			}
			set
			{
				_Snap_X = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _Snap_Y;
		
		[DisplayName("Snap_Y")]
		[Category("Column")]
		public short Snap_Y
		{
			get
			{
				return _Snap_Y;
			}
			set
			{
				_Snap_Y = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _Footer;
		
		[DisplayName("Footer")]
		[Category("Column")]
		public bool Footer
		{
			get
			{
				return _Footer;
			}
			set
			{
				_Footer = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Prepair = "";
		
		[DisplayName("Prepair")]
		[Category("Column")]
		public string Prepair
		{
			get
			{
				return _Prepair;
			}
			set
			{
				_Prepair = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Approved = "";
		
		[DisplayName("Approved")]
		[Category("Column")]
		public string Approved
		{
			get
			{
				return _Approved;
			}
			set
			{
				_Approved = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _DocNo = "";
		
		[DisplayName("Doc No")]
		[Category("Column")]
		public string DocNo
		{
			get
			{
				return _DocNo;
			}
			set
			{
				_DocNo = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _SheetNo = "";
		
		[DisplayName("Sheet No")]
		[Category("Column")]
		public string SheetNo
		{
			get
			{
				return _SheetNo;
			}
			set
			{
				_SheetNo = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Description = "";
		
		[DisplayName("Description")]
		[Category("Column")]
		public string Description
		{
			get
			{
				return _Description;
			}
			set
			{
				_Description = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Revision;
		
		[DisplayName("Revision")]
		[Category("Column")]
		public int Revision
		{
			get
			{
				return _Revision;
			}
			set
			{
				_Revision = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _LastUpdate = -1;
		
		[DisplayName("Last Update")]
		[Category("Column")]
		public long LastUpdate
		{
			get
			{
				return _LastUpdate;
			}
			set
			{
				_LastUpdate = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Layer1 = "";
		
		[DisplayName("Layer 1")]
		[Category("Column")]
		public string Layer1
		{
			get
			{
				return _Layer1;
			}
			set
			{
				_Layer1 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Layer1Desc = "";
		
		[DisplayName("Layer 1Desc")]
		[Category("Column")]
		public string Layer1Desc
		{
			get
			{
				return _Layer1Desc;
			}
			set
			{
				_Layer1Desc = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _Layer1Enable;
		
		[DisplayName("Layer 1Enable")]
		[Category("Column")]
		public bool Layer1Enable
		{
			get
			{
				return _Layer1Enable;
			}
			set
			{
				_Layer1Enable = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _Layer1Lock;
		
		[DisplayName("Layer 1Lock")]
		[Category("Column")]
		public bool Layer1Lock
		{
			get
			{
				return _Layer1Lock;
			}
			set
			{
				_Layer1Lock = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Layer2 = "";
		
		[DisplayName("Layer 2")]
		[Category("Column")]
		public string Layer2
		{
			get
			{
				return _Layer2;
			}
			set
			{
				_Layer2 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Layer2Desc = "";
		
		[DisplayName("Layer 2Desc")]
		[Category("Column")]
		public string Layer2Desc
		{
			get
			{
				return _Layer2Desc;
			}
			set
			{
				_Layer2Desc = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _Layer2Enable;
		
		[DisplayName("Layer 2Enable")]
		[Category("Column")]
		public bool Layer2Enable
		{
			get
			{
				return _Layer2Enable;
			}
			set
			{
				_Layer2Enable = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _Layer2Lock;
		
		[DisplayName("Layer 2Lock")]
		[Category("Column")]
		public bool Layer2Lock
		{
			get
			{
				return _Layer2Lock;
			}
			set
			{
				_Layer2Lock = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Layer3 = "";
		
		[DisplayName("Layer 3")]
		[Category("Column")]
		public string Layer3
		{
			get
			{
				return _Layer3;
			}
			set
			{
				_Layer3 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Layer3Desc = "";
		
		[DisplayName("Layer 3Desc")]
		[Category("Column")]
		public string Layer3Desc
		{
			get
			{
				return _Layer3Desc;
			}
			set
			{
				_Layer3Desc = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _Layer3Enable;
		
		[DisplayName("Layer 3Enable")]
		[Category("Column")]
		public bool Layer3Enable
		{
			get
			{
				return _Layer3Enable;
			}
			set
			{
				_Layer3Enable = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _Layer3Lock;
		
		[DisplayName("Layer 3Lock")]
		[Category("Column")]
		public bool Layer3Lock
		{
			get
			{
				return _Layer3Lock;
			}
			set
			{
				_Layer3Lock = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Layer4 = "";
		
		[DisplayName("Layer 4")]
		[Category("Column")]
		public string Layer4
		{
			get
			{
				return _Layer4;
			}
			set
			{
				_Layer4 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Layer4Desc = "";
		
		[DisplayName("Layer 4Desc")]
		[Category("Column")]
		public string Layer4Desc
		{
			get
			{
				return _Layer4Desc;
			}
			set
			{
				_Layer4Desc = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _Layer4Enable;
		
		[DisplayName("Layer 4Enable")]
		[Category("Column")]
		public bool Layer4Enable
		{
			get
			{
				return _Layer4Enable;
			}
			set
			{
				_Layer4Enable = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _Layer4Lock;
		
		[DisplayName("Layer 4Lock")]
		[Category("Column")]
		public bool Layer4Lock
		{
			get
			{
				return _Layer4Lock;
			}
			set
			{
				_Layer4Lock = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Layer5 = "";
		
		[DisplayName("Layer 5")]
		[Category("Column")]
		public string Layer5
		{
			get
			{
				return _Layer5;
			}
			set
			{
				_Layer5 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Layer5Desc = "";
		
		[DisplayName("Layer 5Desc")]
		[Category("Column")]
		public string Layer5Desc
		{
			get
			{
				return _Layer5Desc;
			}
			set
			{
				_Layer5Desc = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _Layer5Enable;
		
		[DisplayName("Layer 5Enable")]
		[Category("Column")]
		public bool Layer5Enable
		{
			get
			{
				return _Layer5Enable;
			}
			set
			{
				_Layer5Enable = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _Layer5Lock;
		
		[DisplayName("Layer 5Lock")]
		[Category("Column")]
		public bool Layer5Lock
		{
			get
			{
				return _Layer5Lock;
			}
			set
			{
				_Layer5Lock = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Layer6 = "";
		
		[DisplayName("Layer 6")]
		[Category("Column")]
		public string Layer6
		{
			get
			{
				return _Layer6;
			}
			set
			{
				_Layer6 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Layer6Desc = "";
		
		[DisplayName("Layer 6Desc")]
		[Category("Column")]
		public string Layer6Desc
		{
			get
			{
				return _Layer6Desc;
			}
			set
			{
				_Layer6Desc = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _Layer6Enable;
		
		[DisplayName("Layer 6Enable")]
		[Category("Column")]
		public bool Layer6Enable
		{
			get
			{
				return _Layer6Enable;
			}
			set
			{
				_Layer6Enable = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _Layer6Lock;
		
		[DisplayName("Layer 6Lock")]
		[Category("Column")]
		public bool Layer6Lock
		{
			get
			{
				return _Layer6Lock;
			}
			set
			{
				_Layer6Lock = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Layer7 = "";
		
		[DisplayName("Layer 7")]
		[Category("Column")]
		public string Layer7
		{
			get
			{
				return _Layer7;
			}
			set
			{
				_Layer7 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Layer7Desc = "";
		
		[DisplayName("Layer 7Desc")]
		[Category("Column")]
		public string Layer7Desc
		{
			get
			{
				return _Layer7Desc;
			}
			set
			{
				_Layer7Desc = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _Layer7Enable;
		
		[DisplayName("Layer 7Enable")]
		[Category("Column")]
		public bool Layer7Enable
		{
			get
			{
				return _Layer7Enable;
			}
			set
			{
				_Layer7Enable = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _Layer7Lock;
		
		[DisplayName("Layer 7Lock")]
		[Category("Column")]
		public bool Layer7Lock
		{
			get
			{
				return _Layer7Lock;
			}
			set
			{
				_Layer7Lock = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Layer8 = "";
		
		[DisplayName("Layer 8")]
		[Category("Column")]
		public string Layer8
		{
			get
			{
				return _Layer8;
			}
			set
			{
				_Layer8 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Layer8Desc = "";
		
		[DisplayName("Layer 8Desc")]
		[Category("Column")]
		public string Layer8Desc
		{
			get
			{
				return _Layer8Desc;
			}
			set
			{
				_Layer8Desc = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _Layer8Enable;
		
		[DisplayName("Layer 8Enable")]
		[Category("Column")]
		public bool Layer8Enable
		{
			get
			{
				return _Layer8Enable;
			}
			set
			{
				_Layer8Enable = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _Layer8Lock;
		
		[DisplayName("Layer 8Lock")]
		[Category("Column")]
		public bool Layer8Lock
		{
			get
			{
				return _Layer8Lock;
			}
			set
			{
				_Layer8Lock = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _TopPageID = -1;
		
		[DisplayName("Top Page ID")]
		[Category("Column")]
		public long TopPageID
		{
			get
			{
				return _TopPageID;
			}
			set
			{
				_TopPageID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _DownPageID = -1;
		
		[DisplayName("Down Page ID")]
		[Category("Column")]
		public long DownPageID
		{
			get
			{
				return _DownPageID;
			}
			set
			{
				_DownPageID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _LeftPageID = -1;
		
		[DisplayName("Left Page ID")]
		[Category("Column")]
		public long LeftPageID
		{
			get
			{
				return _LeftPageID;
			}
			set
			{
				_LeftPageID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _RightPageID = -1;
		
		[DisplayName("Right Page ID")]
		[Category("Column")]
		public long RightPageID
		{
			get
			{
				return _RightPageID;
			}
			set
			{
				_RightPageID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Height;
		
		[DisplayName("Height")]
		[Category("Column")]
		public int Height
		{
			get
			{
				return _Height;
			}
			set
			{
				_Height = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Width;
		
		[DisplayName("Width")]
		[Category("Column")]
		public int Width
		{
			get
			{
				return _Width;
			}
			set
			{
				_Width = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _TopDisplayID = -1;
		
		[DisplayName("Top Display ID")]
		[Category("Column")]
		public long TopDisplayID
		{
			get
			{
				return _TopDisplayID;
			}
			set
			{
				_TopDisplayID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _LeftDisplayID = -1;
		
		[DisplayName("Left Display ID")]
		[Category("Column")]
		public long LeftDisplayID
		{
			get
			{
				return _LeftDisplayID;
			}
			set
			{
				_LeftDisplayID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _RightDisplayID = -1;
		
		[DisplayName("Right Display ID")]
		[Category("Column")]
		public long RightDisplayID
		{
			get
			{
				return _RightDisplayID;
			}
			set
			{
				_RightDisplayID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _DownDisplayID = -1;
		
		[DisplayName("Down Display ID")]
		[Category("Column")]
		public long DownDisplayID
		{
			get
			{
				return _DownDisplayID;
			}
			set
			{
				_DownDisplayID = value;
			}
		}
		#endregion
		
		#region Related Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblSolution _SolutionID_tblSolution;
		
		[Description("Represents the foreign key object of the type SolutionID")]
		public tblSolution m_SolutionID_tblSolution
		{
			get
			{
				return _SolutionID_tblSolution;
			}
			set
			{
				_SolutionID_tblSolution = value;
			}
		}
		#endregion
		
		#region Collection Objects
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblADTextCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblADTextCollection _tblADTextCollection;
		
		[Description("Represents the foreign key object of the type DisplayID")]
		public tblADTextCollection m_tblADTextCollection
		{
			get
			{
              lock(_tblADTextCollectionLock)
              {
				if (_tblADTextCollection == null)
				{
					_tblADTextCollection =  new tblADTextCollection(this);
					_tblADTextCollection.Load();
				}
				return _tblADTextCollection;
              }
			}
			set
			{
				_tblADTextCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblBargraphCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblBargraphCollection _tblBargraphCollection;
		
		[Description("Represents the foreign key object of the type DisplayID")]
		public tblBargraphCollection m_tblBargraphCollection
		{
			get
			{
              lock(_tblBargraphCollectionLock)
              {
				if (_tblBargraphCollection == null)
				{
					_tblBargraphCollection =  new tblBargraphCollection(this);
					_tblBargraphCollection.Load();
				}
				return _tblBargraphCollection;
              }
			}
			set
			{
				_tblBargraphCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblBiasCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblBiasCollection _tblBiasCollection;
		
		[Description("Represents the foreign key object of the type DisplayID")]
		public tblBiasCollection m_tblBiasCollection
		{
			get
			{
              lock(_tblBiasCollectionLock)
              {
				if (_tblBiasCollection == null)
				{
					_tblBiasCollection =  new tblBiasCollection(this);
					_tblBiasCollection.Load();
				}
				return _tblBiasCollection;
              }
			}
			set
			{
				_tblBiasCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblBitmapCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblBitmapCollection _tblBitmapCollection;
		
		[Description("Represents the foreign key object of the type DisplayID")]
		public tblBitmapCollection m_tblBitmapCollection
		{
			get
			{
              lock(_tblBitmapCollectionLock)
              {
				if (_tblBitmapCollection == null)
				{
					_tblBitmapCollection =  new tblBitmapCollection(this);
					_tblBitmapCollection.Load();
				}
				return _tblBitmapCollection;
              }
			}
			set
			{
				_tblBitmapCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblBlockCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblBlockCollection _tblBlockCollection;
		
		[Description("Represents the foreign key object of the type DisplayID")]
		public tblBlockCollection m_tblBlockCollection
		{
			get
			{
              lock(_tblBlockCollectionLock)
              {
				if (_tblBlockCollection == null)
				{
					_tblBlockCollection =  new tblBlockCollection(this);
					_tblBlockCollection.Load();
				}
				return _tblBlockCollection;
              }
			}
			set
			{
				_tblBlockCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblButtonCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblButtonCollection _tblButtonCollection;
		
		[Description("Represents the foreign key object of the type DisplayID")]
		public tblButtonCollection m_tblButtonCollection
		{
			get
			{
              lock(_tblButtonCollectionLock)
              {
				if (_tblButtonCollection == null)
				{
					_tblButtonCollection =  new tblButtonCollection(this);
					_tblButtonCollection.Load();
				}
				return _tblButtonCollection;
              }
			}
			set
			{
				_tblButtonCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblCurveCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblCurveCollection _tblCurveCollection;
		
		[Description("Represents the foreign key object of the type DisplayID")]
		public tblCurveCollection m_tblCurveCollection
		{
			get
			{
              lock(_tblCurveCollectionLock)
              {
				if (_tblCurveCollection == null)
				{
					_tblCurveCollection =  new tblCurveCollection(this);
					_tblCurveCollection.Load();
				}
				return _tblCurveCollection;
              }
			}
			set
			{
				_tblCurveCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblEditBoxCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblEditBoxCollection _tblEditBoxCollection;
		
		[Description("Represents the foreign key object of the type DisplayID")]
		public tblEditBoxCollection m_tblEditBoxCollection
		{
			get
			{
              lock(_tblEditBoxCollectionLock)
              {
				if (_tblEditBoxCollection == null)
				{
					_tblEditBoxCollection =  new tblEditBoxCollection(this);
					_tblEditBoxCollection.Load();
				}
				return _tblEditBoxCollection;
              }
			}
			set
			{
				_tblEditBoxCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblEllipseCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblEllipseCollection _tblEllipseCollection;
		
		[Description("Represents the foreign key object of the type DisplayID")]
		public tblEllipseCollection m_tblEllipseCollection
		{
			get
			{
              lock(_tblEllipseCollectionLock)
              {
				if (_tblEllipseCollection == null)
				{
					_tblEllipseCollection =  new tblEllipseCollection(this);
					_tblEllipseCollection.Load();
				}
				return _tblEllipseCollection;
              }
			}
			set
			{
				_tblEllipseCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblLineCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblLineCollection _tblLineCollection;
		
		[Description("Represents the foreign key object of the type DisplayID")]
		public tblLineCollection m_tblLineCollection
		{
			get
			{
              lock(_tblLineCollectionLock)
              {
				if (_tblLineCollection == null)
				{
					_tblLineCollection =  new tblLineCollection(this);
					_tblLineCollection.Load();
				}
				return _tblLineCollection;
              }
			}
			set
			{
				_tblLineCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblMeterCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblMeterCollection _tblMeterCollection;
		
		[Description("Represents the foreign key object of the type DisplayID")]
		public tblMeterCollection m_tblMeterCollection
		{
			get
			{
              lock(_tblMeterCollectionLock)
              {
				if (_tblMeterCollection == null)
				{
					_tblMeterCollection =  new tblMeterCollection(this);
					_tblMeterCollection.Load();
				}
				return _tblMeterCollection;
              }
			}
			set
			{
				_tblMeterCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblNavigationCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblNavigationCollection _tblNavigationCollection;
		
		[Description("Represents the foreign key object of the type DisplayID")]
		public tblNavigationCollection m_tblNavigationCollection
		{
			get
			{
              lock(_tblNavigationCollectionLock)
              {
				if (_tblNavigationCollection == null)
				{
					_tblNavigationCollection =  new tblNavigationCollection(this);
					_tblNavigationCollection.Load();
				}
				return _tblNavigationCollection;
              }
			}
			set
			{
				_tblNavigationCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblPolygonCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblPolygonCollection _tblPolygonCollection;
		
		[Description("Represents the foreign key object of the type DisplayID")]
		public tblPolygonCollection m_tblPolygonCollection
		{
			get
			{
              lock(_tblPolygonCollectionLock)
              {
				if (_tblPolygonCollection == null)
				{
					_tblPolygonCollection =  new tblPolygonCollection(this);
					_tblPolygonCollection.Load();
				}
				return _tblPolygonCollection;
              }
			}
			set
			{
				_tblPolygonCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblPolylineCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblPolylineCollection _tblPolylineCollection;
		
		[Description("Represents the foreign key object of the type DisplayID")]
		public tblPolylineCollection m_tblPolylineCollection
		{
			get
			{
              lock(_tblPolylineCollectionLock)
              {
				if (_tblPolylineCollection == null)
				{
					_tblPolylineCollection =  new tblPolylineCollection(this);
					_tblPolylineCollection.Load();
				}
				return _tblPolylineCollection;
              }
			}
			set
			{
				_tblPolylineCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblRectCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblRectCollection _tblRectCollection;
		
		[Description("Represents the foreign key object of the type DisplayID")]
		public tblRectCollection m_tblRectCollection
		{
			get
			{
              lock(_tblRectCollectionLock)
              {
				if (_tblRectCollection == null)
				{
					_tblRectCollection =  new tblRectCollection(this);
					_tblRectCollection.Load();
				}
				return _tblRectCollection;
              }
			}
			set
			{
				_tblRectCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblTextCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblTextCollection _tblTextCollection;
		
		[Description("Represents the foreign key object of the type DisplayID")]
		public tblTextCollection m_tblTextCollection
		{
			get
			{
              lock(_tblTextCollectionLock)
              {
				if (_tblTextCollection == null)
				{
					_tblTextCollection =  new tblTextCollection(this);
					_tblTextCollection.Load();
				}
				return _tblTextCollection;
              }
			}
			set
			{
				_tblTextCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblTrendCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblTrendCollection _tblTrendCollection;
		
		[Description("Represents the foreign key object of the type DisplayID")]
		public tblTrendCollection m_tblTrendCollection
		{
			get
			{
              lock(_tblTrendCollectionLock)
              {
				if (_tblTrendCollection == null)
				{
					_tblTrendCollection =  new tblTrendCollection(this);
					_tblTrendCollection.Load();
				}
				return _tblTrendCollection;
              }
			}
			set
			{
				_tblTrendCollection = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblDisplay.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblDisplay.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblDisplay.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				DisplayID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblDisplay.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public tblDisplay()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@DisplayName", DisplayName, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@DisplayID", DisplayID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@SolutionID", SolutionID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@ParrentDisplay", ParrentDisplay, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@IsDisplay", IsDisplay, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@oIndex", oIndex, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@BackColor", BackColor.ToArgb(), DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Grid", Grid, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Grid_X", Grid_X, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Grid_Y", Grid_Y, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Snap", Snap, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Snap_X", Snap_X, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Snap_Y", Snap_Y, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Footer", Footer, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Prepair", Prepair, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Approved", Approved, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@DocNo", DocNo, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@SheetNo", SheetNo, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Description", Description, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Revision", Revision, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LastUpdate", LastUpdate, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer1", Layer1, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer1Desc", Layer1Desc, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer1Enable", Layer1Enable, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer1Lock", Layer1Lock, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer2", Layer2, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer2Desc", Layer2Desc, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer2Enable", Layer2Enable, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer2Lock", Layer2Lock, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer3", Layer3, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer3Desc", Layer3Desc, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer3Enable", Layer3Enable, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer3Lock", Layer3Lock, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer4", Layer4, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer4Desc", Layer4Desc, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer4Enable", Layer4Enable, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer4Lock", Layer4Lock, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer5", Layer5, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer5Desc", Layer5Desc, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer5Enable", Layer5Enable, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer5Lock", Layer5Lock, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer6", Layer6, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer6Desc", Layer6Desc, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer6Enable", Layer6Enable, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer6Lock", Layer6Lock, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer7", Layer7, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer7Desc", Layer7Desc, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer7Enable", Layer7Enable, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer7Lock", Layer7Lock, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer8", Layer8, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer8Desc", Layer8Desc, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer8Enable", Layer8Enable, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer8Lock", Layer8Lock, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@TopPageID", TopPageID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@DownPageID", DownPageID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LeftPageID", LeftPageID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@RightPageID", RightPageID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Height", Height, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Width", Width, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@TopDisplayID", TopDisplayID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LeftDisplayID", LeftDisplayID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@RightDisplayID", RightDisplayID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@DownDisplayID", DownDisplayID, DbType.Int64));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		public void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the DisplayName _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("DisplayName")) == false))
				{
					DisplayName = ((string)(Convert.ChangeType(rs["DisplayName"], typeof(string))));
				}
				// if value from the recordset, to the DisplayID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("DisplayID")) == false))
				{
					DisplayID = ((long)(Convert.ChangeType(rs["DisplayID"], typeof(long))));
				}
				// if value from the recordset, to the SolutionID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("SolutionID")) == false))
				{
					SolutionID = ((long)(Convert.ChangeType(rs["SolutionID"], typeof(long))));
				}
				// if value from the recordset, to the ParrentDisplay _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ParrentDisplay")) == false))
				{
					ParrentDisplay = ((long)(Convert.ChangeType(rs["ParrentDisplay"], typeof(long))));
				}
				// if value from the recordset, to the IsDisplay _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("IsDisplay")) == false))
				{
					IsDisplay = ((bool)(Convert.ChangeType(rs["IsDisplay"], typeof(bool))));
				}
				// if value from the recordset, to the oIndex _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("oIndex")) == false))
				{
					oIndex = ((int)(Convert.ChangeType(rs["oIndex"], typeof(int))));
				}
				// if value from the recordset, to the BackColor _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("BackColor")) == false))
				{
					BackColor = Color.FromArgb(((int)(Convert.ChangeType(rs["BackColor"], typeof(int)))));
				}
				// if value from the recordset, to the Grid _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Grid")) == false))
				{
					Grid = ((bool)(Convert.ChangeType(rs["Grid"], typeof(bool))));
				}
				// if value from the recordset, to the Grid_X _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Grid_X")) == false))
				{
					Grid_X = ((short)(Convert.ChangeType(rs["Grid_X"], typeof(short))));
				}
				// if value from the recordset, to the Grid_Y _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Grid_Y")) == false))
				{
					Grid_Y = ((short)(Convert.ChangeType(rs["Grid_Y"], typeof(short))));
				}
				// if value from the recordset, to the Snap _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Snap")) == false))
				{
					Snap = ((bool)(Convert.ChangeType(rs["Snap"], typeof(bool))));
				}
				// if value from the recordset, to the Snap_X _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Snap_X")) == false))
				{
					Snap_X = ((short)(Convert.ChangeType(rs["Snap_X"], typeof(short))));
				}
				// if value from the recordset, to the Snap_Y _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Snap_Y")) == false))
				{
					Snap_Y = ((short)(Convert.ChangeType(rs["Snap_Y"], typeof(short))));
				}
				// if value from the recordset, to the Footer _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Footer")) == false))
				{
					Footer = ((bool)(Convert.ChangeType(rs["Footer"], typeof(bool))));
				}
				// if value from the recordset, to the Prepair _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Prepair")) == false))
				{
					Prepair = ((string)(Convert.ChangeType(rs["Prepair"], typeof(string))));
				}
				// if value from the recordset, to the Approved _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Approved")) == false))
				{
					Approved = ((string)(Convert.ChangeType(rs["Approved"], typeof(string))));
				}
				// if value from the recordset, to the DocNo _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("DocNo")) == false))
				{
					DocNo = ((string)(Convert.ChangeType(rs["DocNo"], typeof(string))));
				}
				// if value from the recordset, to the SheetNo _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("SheetNo")) == false))
				{
					SheetNo = ((string)(Convert.ChangeType(rs["SheetNo"], typeof(string))));
				}
				// if value from the recordset, to the Description _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Description")) == false))
				{
					Description = ((string)(Convert.ChangeType(rs["Description"], typeof(string))));
				}
				// if value from the recordset, to the Revision _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Revision")) == false))
				{
					Revision = ((int)(Convert.ChangeType(rs["Revision"], typeof(int))));
				}
				// if value from the recordset, to the LastUpdate _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LastUpdate")) == false))
				{
					LastUpdate = ((long)(Convert.ChangeType(rs["LastUpdate"], typeof(long))));
				}
				// if value from the recordset, to the Layer1 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer1")) == false))
				{
					Layer1 = ((string)(Convert.ChangeType(rs["Layer1"], typeof(string))));
				}
				// if value from the recordset, to the Layer1Desc _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer1Desc")) == false))
				{
					Layer1Desc = ((string)(Convert.ChangeType(rs["Layer1Desc"], typeof(string))));
				}
				// if value from the recordset, to the Layer1Enable _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer1Enable")) == false))
				{
					Layer1Enable = ((bool)(Convert.ChangeType(rs["Layer1Enable"], typeof(bool))));
				}
				// if value from the recordset, to the Layer1Lock _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer1Lock")) == false))
				{
					Layer1Lock = ((bool)(Convert.ChangeType(rs["Layer1Lock"], typeof(bool))));
				}
				// if value from the recordset, to the Layer2 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer2")) == false))
				{
					Layer2 = ((string)(Convert.ChangeType(rs["Layer2"], typeof(string))));
				}
				// if value from the recordset, to the Layer2Desc _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer2Desc")) == false))
				{
					Layer2Desc = ((string)(Convert.ChangeType(rs["Layer2Desc"], typeof(string))));
				}
				// if value from the recordset, to the Layer2Enable _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer2Enable")) == false))
				{
					Layer2Enable = ((bool)(Convert.ChangeType(rs["Layer2Enable"], typeof(bool))));
				}
				// if value from the recordset, to the Layer2Lock _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer2Lock")) == false))
				{
					Layer2Lock = ((bool)(Convert.ChangeType(rs["Layer2Lock"], typeof(bool))));
				}
				// if value from the recordset, to the Layer3 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer3")) == false))
				{
					Layer3 = ((string)(Convert.ChangeType(rs["Layer3"], typeof(string))));
				}
				// if value from the recordset, to the Layer3Desc _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer3Desc")) == false))
				{
					Layer3Desc = ((string)(Convert.ChangeType(rs["Layer3Desc"], typeof(string))));
				}
				// if value from the recordset, to the Layer3Enable _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer3Enable")) == false))
				{
					Layer3Enable = ((bool)(Convert.ChangeType(rs["Layer3Enable"], typeof(bool))));
				}
				// if value from the recordset, to the Layer3Lock _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer3Lock")) == false))
				{
					Layer3Lock = ((bool)(Convert.ChangeType(rs["Layer3Lock"], typeof(bool))));
				}
				// if value from the recordset, to the Layer4 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer4")) == false))
				{
					Layer4 = ((string)(Convert.ChangeType(rs["Layer4"], typeof(string))));
				}
				// if value from the recordset, to the Layer4Desc _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer4Desc")) == false))
				{
					Layer4Desc = ((string)(Convert.ChangeType(rs["Layer4Desc"], typeof(string))));
				}
				// if value from the recordset, to the Layer4Enable _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer4Enable")) == false))
				{
					Layer4Enable = ((bool)(Convert.ChangeType(rs["Layer4Enable"], typeof(bool))));
				}
				// if value from the recordset, to the Layer4Lock _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer4Lock")) == false))
				{
					Layer4Lock = ((bool)(Convert.ChangeType(rs["Layer4Lock"], typeof(bool))));
				}
				// if value from the recordset, to the Layer5 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer5")) == false))
				{
					Layer5 = ((string)(Convert.ChangeType(rs["Layer5"], typeof(string))));
				}
				// if value from the recordset, to the Layer5Desc _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer5Desc")) == false))
				{
					Layer5Desc = ((string)(Convert.ChangeType(rs["Layer5Desc"], typeof(string))));
				}
				// if value from the recordset, to the Layer5Enable _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer5Enable")) == false))
				{
					Layer5Enable = ((bool)(Convert.ChangeType(rs["Layer5Enable"], typeof(bool))));
				}
				// if value from the recordset, to the Layer5Lock _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer5Lock")) == false))
				{
					Layer5Lock = ((bool)(Convert.ChangeType(rs["Layer5Lock"], typeof(bool))));
				}
				// if value from the recordset, to the Layer6 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer6")) == false))
				{
					Layer6 = ((string)(Convert.ChangeType(rs["Layer6"], typeof(string))));
				}
				// if value from the recordset, to the Layer6Desc _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer6Desc")) == false))
				{
					Layer6Desc = ((string)(Convert.ChangeType(rs["Layer6Desc"], typeof(string))));
				}
				// if value from the recordset, to the Layer6Enable _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer6Enable")) == false))
				{
					Layer6Enable = ((bool)(Convert.ChangeType(rs["Layer6Enable"], typeof(bool))));
				}
				// if value from the recordset, to the Layer6Lock _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer6Lock")) == false))
				{
					Layer6Lock = ((bool)(Convert.ChangeType(rs["Layer6Lock"], typeof(bool))));
				}
				// if value from the recordset, to the Layer7 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer7")) == false))
				{
					Layer7 = ((string)(Convert.ChangeType(rs["Layer7"], typeof(string))));
				}
				// if value from the recordset, to the Layer7Desc _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer7Desc")) == false))
				{
					Layer7Desc = ((string)(Convert.ChangeType(rs["Layer7Desc"], typeof(string))));
				}
				// if value from the recordset, to the Layer7Enable _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer7Enable")) == false))
				{
					Layer7Enable = ((bool)(Convert.ChangeType(rs["Layer7Enable"], typeof(bool))));
				}
				// if value from the recordset, to the Layer7Lock _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer7Lock")) == false))
				{
					Layer7Lock = ((bool)(Convert.ChangeType(rs["Layer7Lock"], typeof(bool))));
				}
				// if value from the recordset, to the Layer8 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer8")) == false))
				{
					Layer8 = ((string)(Convert.ChangeType(rs["Layer8"], typeof(string))));
				}
				// if value from the recordset, to the Layer8Desc _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer8Desc")) == false))
				{
					Layer8Desc = ((string)(Convert.ChangeType(rs["Layer8Desc"], typeof(string))));
				}
				// if value from the recordset, to the Layer8Enable _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer8Enable")) == false))
				{
					Layer8Enable = ((bool)(Convert.ChangeType(rs["Layer8Enable"], typeof(bool))));
				}
				// if value from the recordset, to the Layer8Lock _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer8Lock")) == false))
				{
					Layer8Lock = ((bool)(Convert.ChangeType(rs["Layer8Lock"], typeof(bool))));
				}
				// if value from the recordset, to the TopPageID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("TopPageID")) == false))
				{
					TopPageID = ((long)(Convert.ChangeType(rs["TopPageID"], typeof(long))));
				}
				// if value from the recordset, to the DownPageID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("DownPageID")) == false))
				{
					DownPageID = ((long)(Convert.ChangeType(rs["DownPageID"], typeof(long))));
				}
				// if value from the recordset, to the LeftPageID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LeftPageID")) == false))
				{
					LeftPageID = ((long)(Convert.ChangeType(rs["LeftPageID"], typeof(long))));
				}
				// if value from the recordset, to the RightPageID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("RightPageID")) == false))
				{
					RightPageID = ((long)(Convert.ChangeType(rs["RightPageID"], typeof(long))));
				}
				// if value from the recordset, to the Height _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Height")) == false))
				{
					Height = ((int)(Convert.ChangeType(rs["Height"], typeof(int))));
				}
				// if value from the recordset, to the Width _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Width")) == false))
				{
					Width = ((int)(Convert.ChangeType(rs["Width"], typeof(int))));
				}
				// if value from the recordset, to the TopDisplayID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("TopDisplayID")) == false))
				{
					TopDisplayID = ((long)(Convert.ChangeType(rs["TopDisplayID"], typeof(long))));
				}
				// if value from the recordset, to the LeftDisplayID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LeftDisplayID")) == false))
				{
					LeftDisplayID = ((long)(Convert.ChangeType(rs["LeftDisplayID"], typeof(long))));
				}
				// if value from the recordset, to the RightDisplayID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("RightDisplayID")) == false))
				{
					RightDisplayID = ((long)(Convert.ChangeType(rs["RightDisplayID"], typeof(long))));
				}
				// if value from the recordset, to the DownDisplayID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("DownDisplayID")) == false))
				{
					DownDisplayID = ((long)(Convert.ChangeType(rs["DownDisplayID"], typeof(long))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		
		public override void AddFromString(string[] _strs, string arg1, ref string _log)
		{
			try
			{
				this.PreAddFromString(ref _log);
				int i;
				i = this.ColumnExistInHeader("DisplayName");
				if ((i >= 0))
				{
					DisplayName = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("SolutionID");
				if ((i >= 0))
				{
					SolutionID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("ParrentDisplay");
				if ((i >= 0))
				{
					ParrentDisplay = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("IsDisplay");
				if ((i >= 0))
				{
					IsDisplay = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("oIndex");
				if ((i >= 0))
				{
					oIndex = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("BackColor");
				if ((i >= 0))
				{
					BackColor = Color.FromArgb(((int)(Convert.ChangeType(_strs[i], typeof(int)))));
				}
				i = this.ColumnExistInHeader("Grid");
				if ((i >= 0))
				{
					Grid = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("Grid_X");
				if ((i >= 0))
				{
					Grid_X = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("Grid_Y");
				if ((i >= 0))
				{
					Grid_Y = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("Snap");
				if ((i >= 0))
				{
					Snap = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("Snap_X");
				if ((i >= 0))
				{
					Snap_X = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("Snap_Y");
				if ((i >= 0))
				{
					Snap_Y = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("Footer");
				if ((i >= 0))
				{
					Footer = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("Prepair");
				if ((i >= 0))
				{
					Prepair = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Approved");
				if ((i >= 0))
				{
					Approved = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("DocNo");
				if ((i >= 0))
				{
					DocNo = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("SheetNo");
				if ((i >= 0))
				{
					SheetNo = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Description");
				if ((i >= 0))
				{
					Description = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Revision");
				if ((i >= 0))
				{
					Revision = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("LastUpdate");
				if ((i >= 0))
				{
					LastUpdate = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("Layer1");
				if ((i >= 0))
				{
					Layer1 = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Layer1Desc");
				if ((i >= 0))
				{
					Layer1Desc = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Layer1Enable");
				if ((i >= 0))
				{
					Layer1Enable = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("Layer1Lock");
				if ((i >= 0))
				{
					Layer1Lock = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("Layer2");
				if ((i >= 0))
				{
					Layer2 = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Layer2Desc");
				if ((i >= 0))
				{
					Layer2Desc = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Layer2Enable");
				if ((i >= 0))
				{
					Layer2Enable = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("Layer2Lock");
				if ((i >= 0))
				{
					Layer2Lock = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("Layer3");
				if ((i >= 0))
				{
					Layer3 = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Layer3Desc");
				if ((i >= 0))
				{
					Layer3Desc = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Layer3Enable");
				if ((i >= 0))
				{
					Layer3Enable = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("Layer3Lock");
				if ((i >= 0))
				{
					Layer3Lock = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("Layer4");
				if ((i >= 0))
				{
					Layer4 = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Layer4Desc");
				if ((i >= 0))
				{
					Layer4Desc = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Layer4Enable");
				if ((i >= 0))
				{
					Layer4Enable = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("Layer4Lock");
				if ((i >= 0))
				{
					Layer4Lock = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("Layer5");
				if ((i >= 0))
				{
					Layer5 = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Layer5Desc");
				if ((i >= 0))
				{
					Layer5Desc = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Layer5Enable");
				if ((i >= 0))
				{
					Layer5Enable = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("Layer5Lock");
				if ((i >= 0))
				{
					Layer5Lock = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("Layer6");
				if ((i >= 0))
				{
					Layer6 = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Layer6Desc");
				if ((i >= 0))
				{
					Layer6Desc = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Layer6Enable");
				if ((i >= 0))
				{
					Layer6Enable = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("Layer6Lock");
				if ((i >= 0))
				{
					Layer6Lock = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("Layer7");
				if ((i >= 0))
				{
					Layer7 = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Layer7Desc");
				if ((i >= 0))
				{
					Layer7Desc = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Layer7Enable");
				if ((i >= 0))
				{
					Layer7Enable = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("Layer7Lock");
				if ((i >= 0))
				{
					Layer7Lock = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("Layer8");
				if ((i >= 0))
				{
					Layer8 = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Layer8Desc");
				if ((i >= 0))
				{
					Layer8Desc = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Layer8Enable");
				if ((i >= 0))
				{
					Layer8Enable = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("Layer8Lock");
				if ((i >= 0))
				{
					Layer8Lock = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("TopPageID");
				if ((i >= 0))
				{
					TopPageID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("DownPageID");
				if ((i >= 0))
				{
					DownPageID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("LeftPageID");
				if ((i >= 0))
				{
					LeftPageID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("RightPageID");
				if ((i >= 0))
				{
					RightPageID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("Height");
				if ((i >= 0))
				{
					Height = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Width");
				if ((i >= 0))
				{
					Width = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("TopDisplayID");
				if ((i >= 0))
				{
					TopDisplayID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("LeftDisplayID");
				if ((i >= 0))
				{
					LeftDisplayID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("RightDisplayID");
				if ((i >= 0))
				{
					RightDisplayID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("DownDisplayID");
				if ((i >= 0))
				{
					DownDisplayID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				this.PostAddFromString(ref _log);
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblDisplayChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblDisplayCollection : SQLiteTableCollection
	{
		
		/// <remarks>SQL Type:tblDisplayChangedEventHandler</remarks>
		public event tblDisplayChangedEventHandler tblDisplayChanged;
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblSolution _SolutionID_tblSolution;
		
		[Description("Represents the foreign key object of the type SolutionID")]
		public tblSolution m_SolutionID_tblSolution
		{
			get
			{
				return _SolutionID_tblSolution;
			}
			set
			{
				_SolutionID_tblSolution = value;
			}
		}
		
		[Description("Constructor")]
		public tblDisplayCollection(tblSolution _parent)
		{
			_SolutionID_tblSolution = _parent;
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblDisplayChanged(System.EventArgs e)
		{
			if (tblDisplayChanged != null)
			{
				this.tblDisplayChanged(this, e);
			}
		}
		
		[Description("Gets a  tblDisplay from the collection.")]
		public tblDisplay this[int index]
		{
			get
			{
				return ((tblDisplay)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblDisplayChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblDisplay from the collection.")]
		public tblDisplay Get(int index)
		{
			return ((tblDisplay)(List[index]));
		}
		
		[Description("Adds a new tblDisplay to the collection.")]
		public void Add(tblDisplay item)
		{
			List.Add(item);
			this.OntblDisplayChanged(EventArgs.Empty);
		}
		
		[Description("Removes a tblDisplay from the collection.")]
		public void Remove(tblDisplay item)
		{
			List.Remove(item);
			this.OntblDisplayChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblDisplay into the collection at the specified index.")]
		public void Insert(int index, tblDisplay item)
		{
			List.Insert(index, item);
			this.OntblDisplayChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblDisplay class in the collection.")]
		public int IndexOf(tblDisplay item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblDisplay class is present in the collection.")]
		public bool Contains(tblDisplay item)
		{
			return List.Contains(item);
		}
	}
}
