//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;


namespace DCS.DCSTables
{


    public partial class tblModbusClientMap : SQLiteTable
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblModbusClientMap.</remarks>
		internal static string SQL_Insert = "INSERT INTO [tblModbusClientMap] ([ModbusClientID], [VarNameID], [Number], [Type]" +
			", [Multiplier], [ReadOnly]) VALUES(@ModbusClientID, @VarNameID, @Number, @Type, " +
			"@Multiplier, @ReadOnly) ; select last_insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblModbusClientMap, with the WHERE clause.</remarks>
		internal static string SQL_Update = "UPDATE [tblModbusClientMap] SET [ModbusClientID] = @ModbusClientID, [VarNameID] =" +
			" @VarNameID, [Number] = @Number, [Type] = @Type, [Multiplier] = @Multiplier, [Re" +
			"adOnly] = @ReadOnly WHERE [ID]=@ID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblModbusClientMap, with the WHERE clause.</remarks>
		internal static string SQL_Select = "SELECT [ModbusClientID], [VarNameID], [Number], [Type], [Multiplier], [ReadOnly] " +
			"FROM [tblModbusClientMap] WHERE [ID]=@ID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblModbusClientMap, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblModbusClientMap] WHERE [ID]=@ID ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _ID = -1;
		
		[DisplayName("ID")]
		[Category("Primary Key")]
		public long ID
		{
			get
			{
				return _ID;
			}
			set
			{
				_ID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _ModbusClientID = -1;
		
		[DisplayName("Modbus Client ID")]
		[Category("Foreign Key")]
		public long ModbusClientID
		{
			get
			{
				return _ModbusClientID;
			}
			set
			{
				_ModbusClientID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _VarNameID = -1;
		
		[DisplayName("Var Name ID")]
		[Category("Column")]
		public long VarNameID
		{
			get
			{
				return _VarNameID;
			}
			set
			{
				_VarNameID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _Number;
		
		[DisplayName("Number")]
		[Category("Column")]
		public short Number
		{
			get
			{
				return _Number;
			}
			set
			{
				_Number = value;
			}
		}
		
		/// <remarks>SQL Type:System.Byte</remarks>
		private byte _Type;
		
		[DisplayName("Type")]
		[Category("Column")]
		public byte Type
		{
			get
			{
				return _Type;
			}
			set
			{
				_Type = value;
			}
		}
		
		/// <remarks>SQL Type:System.Byte</remarks>
		private byte _Multiplier;
		
		[DisplayName("Multiplier")]
		[Category("Column")]
		public byte Multiplier
		{
			get
			{
				return _Multiplier;
			}
			set
			{
				_Multiplier = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _ReadOnly;
		
		[DisplayName("Read Only")]
		[Category("Column")]
		public bool ReadOnly
		{
			get
			{
				return _ReadOnly;
			}
			set
			{
				_ReadOnly = value;
			}
		}
		#endregion
		
		#region Related Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblModbusClient _ModbusClientID_tblModbusClient;
		
		[Description("Represents the foreign key object of the type ModbusClientID")]
		public tblModbusClient m_ModbusClientID_tblModbusClient
		{
			get
			{
				return _ModbusClientID_tblModbusClient;
			}
			set
			{
				_ModbusClientID_tblModbusClient = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblModbusClientMap.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblModbusClientMap.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblModbusClientMap.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				ID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblModbusClientMap.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public tblModbusClientMap()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@ID", ID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@ModbusClientID", ModbusClientID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID", VarNameID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Number", Number, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Type", Type, DbType.Byte));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Multiplier", Multiplier, DbType.Byte));
				SqlParmColl.Add(CommonDB.AddSqlParm("@ReadOnly", ReadOnly, DbType.Boolean));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		public void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the ID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ID")) == false))
				{
					ID = ((long)(Convert.ChangeType(rs["ID"], typeof(long))));
				}
				// if value from the recordset, to the ModbusClientID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ModbusClientID")) == false))
				{
					ModbusClientID = ((long)(Convert.ChangeType(rs["ModbusClientID"], typeof(long))));
				}
				// if value from the recordset, to the VarNameID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID")) == false))
				{
					VarNameID = ((long)(Convert.ChangeType(rs["VarNameID"], typeof(long))));
				}
				// if value from the recordset, to the Number _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Number")) == false))
				{
					Number = ((short)(Convert.ChangeType(rs["Number"], typeof(short))));
				}
				// if value from the recordset, to the Type _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Type")) == false))
				{
					Type = ((byte)(Convert.ChangeType(rs["Type"], typeof(byte))));
				}
				// if value from the recordset, to the Multiplier _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Multiplier")) == false))
				{
					Multiplier = ((byte)(Convert.ChangeType(rs["Multiplier"], typeof(byte))));
				}
				// if value from the recordset, to the ReadOnly _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ReadOnly")) == false))
				{
					ReadOnly = ((bool)(Convert.ChangeType(rs["ReadOnly"], typeof(bool))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		
		public override void AddFromString(string[] _strs, string arg1, ref string _log)
		{
			try
			{
				this.PreAddFromString(ref _log);
				int i;
				i = this.ColumnExistInHeader("ModbusClientID");
				if ((i >= 0))
				{
					ModbusClientID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("VarNameID");
				if ((i >= 0))
				{
					VarNameID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("Number");
				if ((i >= 0))
				{
					Number = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("Type");
				if ((i >= 0))
				{
					Type = ((byte)(Convert.ChangeType(_strs[i], typeof(byte))));
				}
				i = this.ColumnExistInHeader("Multiplier");
				if ((i >= 0))
				{
					Multiplier = ((byte)(Convert.ChangeType(_strs[i], typeof(byte))));
				}
				i = this.ColumnExistInHeader("ReadOnly");
				if ((i >= 0))
				{
					ReadOnly = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				this.PostAddFromString(ref _log);
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblModbusClientMapChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblModbusClientMapCollection : SQLiteTableCollection
	{
		
		/// <remarks>SQL Type:tblModbusClientMapChangedEventHandler</remarks>
		public event tblModbusClientMapChangedEventHandler tblModbusClientMapChanged;
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblModbusClient _ModbusClientID_tblModbusClient;
		
		[Description("Represents the foreign key object of the type ModbusClientID")]
		public tblModbusClient m_ModbusClientID_tblModbusClient
		{
			get
			{
				return _ModbusClientID_tblModbusClient;
			}
			set
			{
				_ModbusClientID_tblModbusClient = value;
			}
		}
		
		[Description("Constructor")]
		public tblModbusClientMapCollection(tblModbusClient _parent)
		{
			_ModbusClientID_tblModbusClient = _parent;
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblModbusClientMapChanged(System.EventArgs e)
		{
			if (tblModbusClientMapChanged != null)
			{
				this.tblModbusClientMapChanged(this, e);
			}
		}
		
		[Description("Gets a  tblModbusClientMap from the collection.")]
		public tblModbusClientMap this[int index]
		{
			get
			{
				return ((tblModbusClientMap)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblModbusClientMapChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblModbusClientMap from the collection.")]
		public tblModbusClientMap Get(int index)
		{
			return ((tblModbusClientMap)(List[index]));
		}
		
		[Description("Adds a new tblModbusClientMap to the collection.")]
		public void Add(tblModbusClientMap item)
		{
			List.Add(item);
			this.OntblModbusClientMapChanged(EventArgs.Empty);
		}
		
		[Description("Removes a tblModbusClientMap from the collection.")]
		public void Remove(tblModbusClientMap item)
		{
			List.Remove(item);
			this.OntblModbusClientMapChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblModbusClientMap into the collection at the specified index.")]
		public void Insert(int index, tblModbusClientMap item)
		{
			List.Insert(index, item);
			this.OntblModbusClientMapChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblModbusClientMap class in the collection.")]
		public int IndexOf(tblModbusClientMap item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblModbusClientMap class is present in the collection.")]
		public bool Contains(tblModbusClientMap item)
		{
			return List.Contains(item);
		}
	}
}
