//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;
using System.Drawing;


namespace DCS.DCSTables
{


    public partial class tblAlarmGroup : SQLiteTable
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblAlarmGroup.</remarks>
		internal static string SQL_Insert = @"INSERT INTO [tblAlarmGroup] ([Name], [SolutionID], [Type], [Archive], [Retrigger], [Print], [Readonly], [oIndex], [Color], [Audio]) VALUES(@Name, @SolutionID, @Type, @Archive, @Retrigger, @Print, @Readonly, @oIndex, @Color, @Audio) ; select last_insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblAlarmGroup, with the WHERE clause.</remarks>
		internal static string SQL_Update = "UPDATE [tblAlarmGroup] SET [Name] = @Name, [SolutionID] = @SolutionID, [Type] = @" +
			"Type, [Archive] = @Archive, [Retrigger] = @Retrigger, [Print] = @Print, [Readonl" +
			"y] = @Readonly, [oIndex] = @oIndex, [Color] = @Color, [Audio] = @Audio WHERE [ID" +
			"]=@ID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblAlarmGroup, with the WHERE clause.</remarks>
		internal static string SQL_Select = "SELECT [Name], [SolutionID], [Type], [Archive], [Retrigger], [Print], [Readonly]," +
			" [oIndex], [Color], [Audio] FROM [tblAlarmGroup] WHERE [ID]=@ID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblAlarmGroup, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblAlarmGroup] WHERE [ID]=@ID ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _ID = -1;
		
		[DisplayName("ID")]
		[Category("Primary Key")]
		public long ID
		{
			get
			{
				return _ID;
			}
			set
			{
				_ID = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Name = "";
		
		[DisplayName("Name")]
		[Category("Column")]
		public string Name
		{
			get
			{
				return _Name;
			}
			set
			{
				_Name = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _SolutionID = -1;
		
		[DisplayName("Solution ID")]
		[Category("Foreign Key")]
		public long SolutionID
		{
			get
			{
				return _SolutionID;
			}
			set
			{
				_SolutionID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Type;
		
		[DisplayName("Type")]
		[Category("Column")]
		public int Type
		{
			get
			{
				return _Type;
			}
			set
			{
				_Type = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _Archive;
		
		[DisplayName("Archive")]
		[Category("Column")]
		public bool Archive
		{
			get
			{
				return _Archive;
			}
			set
			{
				_Archive = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Retrigger;
		
		[DisplayName("Retrigger")]
		[Category("Column")]
		public int Retrigger
		{
			get
			{
				return _Retrigger;
			}
			set
			{
				_Retrigger = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _Print;
		
		[DisplayName("Print")]
		[Category("Column")]
		public bool Print
		{
			get
			{
				return _Print;
			}
			set
			{
				_Print = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _Readonly;
		
		[DisplayName("Readonly")]
		[Category("Column")]
		public bool Readonly
		{
			get
			{
				return _Readonly;
			}
			set
			{
				_Readonly = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _oIndex;
		
		[DisplayName("o Index")]
		[Category("Column")]
		public int oIndex
		{
			get
			{
				return _oIndex;
			}
			set
			{
				_oIndex = value;
			}
		}
		
		/// <remarks>SQL Type:System.Drawing.Color</remarks>
		private System.Drawing.Color _Color;
		
		[DisplayName("Color")]
		[Category("Column")]
		public System.Drawing.Color Color
		{
			get
			{
				return _Color;
			}
			set
			{
				_Color = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Audio = "";
		
		[DisplayName("Audio")]
		[Category("Column")]
		public string Audio
		{
			get
			{
				return _Audio;
			}
			set
			{
				_Audio = value;
			}
		}
		#endregion
		
		#region Related Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblSolution _SolutionID_tblSolution;
		
		[Description("Represents the foreign key object of the type SolutionID")]
		public tblSolution m_SolutionID_tblSolution
		{
			get
			{
				return _SolutionID_tblSolution;
			}
			set
			{
				_SolutionID_tblSolution = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblAlarmGroup.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblAlarmGroup.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblAlarmGroup.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				ID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblAlarmGroup.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public tblAlarmGroup()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@ID", ID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Name", Name, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@SolutionID", SolutionID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Type", Type, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Archive", Archive, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Retrigger", Retrigger, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Print", Print, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Readonly", Readonly, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@oIndex", oIndex, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Color", Color.ToArgb(), DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Audio", Audio, DbType.String));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		public void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the ID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ID")) == false))
				{
					ID = ((long)(Convert.ChangeType(rs["ID"], typeof(long))));
				}
				// if value from the recordset, to the Name _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Name")) == false))
				{
					Name = ((string)(Convert.ChangeType(rs["Name"], typeof(string))));
				}
				// if value from the recordset, to the SolutionID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("SolutionID")) == false))
				{
					SolutionID = ((long)(Convert.ChangeType(rs["SolutionID"], typeof(long))));
				}
				// if value from the recordset, to the Type _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Type")) == false))
				{
					Type = ((int)(Convert.ChangeType(rs["Type"], typeof(int))));
				}
				// if value from the recordset, to the Archive _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Archive")) == false))
				{
					Archive = ((bool)(Convert.ChangeType(rs["Archive"], typeof(bool))));
				}
				// if value from the recordset, to the Retrigger _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Retrigger")) == false))
				{
					Retrigger = ((int)(Convert.ChangeType(rs["Retrigger"], typeof(int))));
				}
				// if value from the recordset, to the Print _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Print")) == false))
				{
					Print = ((bool)(Convert.ChangeType(rs["Print"], typeof(bool))));
				}
				// if value from the recordset, to the Readonly _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Readonly")) == false))
				{
					Readonly = ((bool)(Convert.ChangeType(rs["Readonly"], typeof(bool))));
				}
				// if value from the recordset, to the oIndex _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("oIndex")) == false))
				{
					oIndex = ((int)(Convert.ChangeType(rs["oIndex"], typeof(int))));
				}
				// if value from the recordset, to the Color _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Color")) == false))
				{
					Color = Color.FromArgb(((int)(Convert.ChangeType(rs["Color"], typeof(int)))));
				}
				// if value from the recordset, to the Audio _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Audio")) == false))
				{
					Audio = ((string)(Convert.ChangeType(rs["Audio"], typeof(string))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		
		public override void AddFromString(string[] _strs, string arg1, ref string _log)
		{
			try
			{
				this.PreAddFromString(ref _log);
				int i;
				i = this.ColumnExistInHeader("Name");
				if ((i >= 0))
				{
					Name = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("SolutionID");
				if ((i >= 0))
				{
					SolutionID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("Type");
				if ((i >= 0))
				{
					Type = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Archive");
				if ((i >= 0))
				{
					Archive = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("Retrigger");
				if ((i >= 0))
				{
					Retrigger = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Print");
				if ((i >= 0))
				{
					Print = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("Readonly");
				if ((i >= 0))
				{
					Readonly = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("oIndex");
				if ((i >= 0))
				{
					oIndex = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Color");
				if ((i >= 0))
				{
					Color = Color.FromArgb(((int)(Convert.ChangeType(_strs[i], typeof(int)))));
				}
				i = this.ColumnExistInHeader("Audio");
				if ((i >= 0))
				{
					Audio = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				this.PostAddFromString(ref _log);
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblAlarmGroupChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblAlarmGroupCollection : SQLiteTableCollection
	{
		
		/// <remarks>SQL Type:tblAlarmGroupChangedEventHandler</remarks>
		public event tblAlarmGroupChangedEventHandler tblAlarmGroupChanged;
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblSolution _SolutionID_tblSolution;
		
		[Description("Represents the foreign key object of the type SolutionID")]
		public tblSolution m_SolutionID_tblSolution
		{
			get
			{
				return _SolutionID_tblSolution;
			}
			set
			{
				_SolutionID_tblSolution = value;
			}
		}
		
		[Description("Constructor")]
		public tblAlarmGroupCollection(tblSolution _parent)
		{
			_SolutionID_tblSolution = _parent;
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblAlarmGroupChanged(System.EventArgs e)
		{
			if (tblAlarmGroupChanged != null)
			{
				this.tblAlarmGroupChanged(this, e);
			}
		}
		
		[Description("Gets a  tblAlarmGroup from the collection.")]
		public tblAlarmGroup this[int index]
		{
			get
			{
				return ((tblAlarmGroup)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblAlarmGroupChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblAlarmGroup from the collection.")]
		public tblAlarmGroup Get(int index)
		{
			return ((tblAlarmGroup)(List[index]));
		}
		
		[Description("Adds a new tblAlarmGroup to the collection.")]
		public void Add(tblAlarmGroup item)
		{
			List.Add(item);
			this.OntblAlarmGroupChanged(EventArgs.Empty);
		}
		
		[Description("Removes a tblAlarmGroup from the collection.")]
		public void Remove(tblAlarmGroup item)
		{
			List.Remove(item);
			this.OntblAlarmGroupChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblAlarmGroup into the collection at the specified index.")]
		public void Insert(int index, tblAlarmGroup item)
		{
			List.Insert(index, item);
			this.OntblAlarmGroupChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblAlarmGroup class in the collection.")]
		public int IndexOf(tblAlarmGroup item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblAlarmGroup class is present in the collection.")]
		public bool Contains(tblAlarmGroup item)
		{
			return List.Contains(item);
		}
	}
}
