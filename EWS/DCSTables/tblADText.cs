//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;
using System.Drawing;


namespace DCS.DCSTables
{


    public partial class tblADText : SQLiteTable
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblADText.</remarks>
		internal static string SQL_Insert = @"INSERT INTO [tblADText] ([DisplayID], [oIndex], [DlgType], [DlgIndex], [Left], [Right], [Top], [Bottom], [Format], [Alignment], [TextValue], [TextValueID], [TextColor], [TextBlinking], [Font], [UnitShow], [UnitFont], [UnitColor], [UnitText], [isfix], [Orientation], [LastRev], [LockPosition], [LockEdit], [Layer], [FillColor], [LineStyle], [Visible], [Expression], [Action], [Argument], [CompiledExp], [validexpression]) VALUES(@DisplayID, @oIndex, @DlgType, @DlgIndex, @Left, @Right, @Top, @Bottom, @Format, @Alignment, @TextValue, @TextValueID, @TextColor, @TextBlinking, @Font, @UnitShow, @UnitFont, @UnitColor, @UnitText, @isfix, @Orientation, @LastRev, @LockPosition, @LockEdit, @Layer, @FillColor, @LineStyle, @Visible, @Expression, @Action, @Argument, @CompiledExp, @validexpression) ; select last_insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblADText, with the WHERE clause.</remarks>
		internal static string SQL_Update = @"UPDATE [tblADText] SET [DisplayID] = @DisplayID, [oIndex] = @oIndex, [DlgType] = @DlgType, [DlgIndex] = @DlgIndex, [Left] = @Left, [Right] = @Right, [Top] = @Top, [Bottom] = @Bottom, [Format] = @Format, [Alignment] = @Alignment, [TextValue] = @TextValue, [TextValueID] = @TextValueID, [TextColor] = @TextColor, [TextBlinking] = @TextBlinking, [Font] = @Font, [UnitShow] = @UnitShow, [UnitFont] = @UnitFont, [UnitColor] = @UnitColor, [UnitText] = @UnitText, [isfix] = @isfix, [Orientation] = @Orientation, [LastRev] = @LastRev, [LockPosition] = @LockPosition, [LockEdit] = @LockEdit, [Layer] = @Layer, [FillColor] = @FillColor, [LineStyle] = @LineStyle, [Visible] = @Visible, [Expression] = @Expression, [Action] = @Action, [Argument] = @Argument, [CompiledExp] = @CompiledExp, [validexpression] = @validexpression WHERE [ID]=@ID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblADText, with the WHERE clause.</remarks>
		internal static string SQL_Select = @"SELECT [DisplayID], [oIndex], [DlgType], [DlgIndex], [Left], [Right], [Top], [Bottom], [Format], [Alignment], [TextValue], [TextValueID], [TextColor], [TextBlinking], [Font], [UnitShow], [UnitFont], [UnitColor], [UnitText], [isfix], [Orientation], [LastRev], [LockPosition], [LockEdit], [Layer], [FillColor], [LineStyle], [Visible], [Expression], [Action], [Argument], [CompiledExp], [validexpression] FROM [tblADText] WHERE [ID]=@ID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblADText, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblADText] WHERE [ID]=@ID ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _ID = -1;
		
		[DisplayName("ID")]
		[Category("Primary Key")]
		public long ID
		{
			get
			{
				return _ID;
			}
			set
			{
				_ID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _DisplayID = -1;
		
		[DisplayName("Display ID")]
		[Category("Foreign Key")]
		public long DisplayID
		{
			get
			{
				return _DisplayID;
			}
			set
			{
				_DisplayID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _oIndex;
		
		[DisplayName("o Index")]
		[Category("Column")]
		public int oIndex
		{
			get
			{
				return _oIndex;
			}
			set
			{
				_oIndex = value;
			}
		}
		
		/// <remarks>SQL Type:System.Byte</remarks>
		private byte _DlgType;
		
		[DisplayName("Dlg Type")]
		[Category("Column")]
		public byte DlgType
		{
			get
			{
				return _DlgType;
			}
			set
			{
				_DlgType = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _DlgIndex;
		
		[DisplayName("Dlg Index")]
		[Category("Column")]
		public int DlgIndex
		{
			get
			{
				return _DlgIndex;
			}
			set
			{
				_DlgIndex = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Left;
		
		[DisplayName("Left")]
		[Category("Column")]
		public int Left
		{
			get
			{
				return _Left;
			}
			set
			{
				_Left = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Right;
		
		[DisplayName("Right")]
		[Category("Column")]
		public int Right
		{
			get
			{
				return _Right;
			}
			set
			{
				_Right = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Top;
		
		[DisplayName("Top")]
		[Category("Column")]
		public int Top
		{
			get
			{
				return _Top;
			}
			set
			{
				_Top = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Bottom;
		
		[DisplayName("Bottom")]
		[Category("Column")]
		public int Bottom
		{
			get
			{
				return _Bottom;
			}
			set
			{
				_Bottom = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Format;
		
		[DisplayName("Format")]
		[Category("Column")]
		public int Format
		{
			get
			{
				return _Format;
			}
			set
			{
				_Format = value;
			}
		}
		
		/// <remarks>SQL Type:System.Byte</remarks>
		private byte _Alignment;
		
		[DisplayName("Alignment")]
		[Category("Column")]
		public byte Alignment
		{
			get
			{
				return _Alignment;
			}
			set
			{
				_Alignment = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _TextValue = "";
		
		[DisplayName("Text Value")]
		[Category("Column")]
		public string TextValue
		{
			get
			{
				return _TextValue;
			}
			set
			{
				_TextValue = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _TextValueID;
		
		[DisplayName("Text Value ID")]
		[Category("Column")]
		public int TextValueID
		{
			get
			{
				return _TextValueID;
			}
			set
			{
				_TextValueID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Drawing.Color</remarks>
		private System.Drawing.Color _TextColor;
		
		[DisplayName("Text Color")]
		[Category("Column")]
		public System.Drawing.Color TextColor
		{
			get
			{
				return _TextColor;
			}
			set
			{
				_TextColor = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _TextBlinking;
		
		[DisplayName("Text Blinking")]
		[Category("Column")]
		public bool TextBlinking
		{
			get
			{
				return _TextBlinking;
			}
			set
			{
				_TextBlinking = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Font = "";
		
		[DisplayName("Font")]
		[Category("Column")]
		public string Font
		{
			get
			{
				return _Font;
			}
			set
			{
				_Font = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _UnitShow;
		
		[DisplayName("Unit Show")]
		[Category("Column")]
		public bool UnitShow
		{
			get
			{
				return _UnitShow;
			}
			set
			{
				_UnitShow = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _UnitFont = "";
		
		[DisplayName("Unit Font")]
		[Category("Column")]
		public string UnitFont
		{
			get
			{
				return _UnitFont;
			}
			set
			{
				_UnitFont = value;
			}
		}
		
		/// <remarks>SQL Type:System.Drawing.Color</remarks>
		private System.Drawing.Color _UnitColor;
		
		[DisplayName("Unit Color")]
		[Category("Column")]
		public System.Drawing.Color UnitColor
		{
			get
			{
				return _UnitColor;
			}
			set
			{
				_UnitColor = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _UnitText = "";
		
		[DisplayName("Unit Text")]
		[Category("Column")]
		public string UnitText
		{
			get
			{
				return _UnitText;
			}
			set
			{
				_UnitText = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _isfix;
		
		[DisplayName("isfix")]
		[Category("Column")]
		public bool isfix
		{
			get
			{
				return _isfix;
			}
			set
			{
				_isfix = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Orientation;
		
		[DisplayName("Orientation")]
		[Category("Column")]
		public int Orientation
		{
			get
			{
				return _Orientation;
			}
			set
			{
				_Orientation = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _LastRev;
		
		[DisplayName("Last Rev")]
		[Category("Column")]
		public bool LastRev
		{
			get
			{
				return _LastRev;
			}
			set
			{
				_LastRev = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _LockPosition;
		
		[DisplayName("Lock Position")]
		[Category("Column")]
		public bool LockPosition
		{
			get
			{
				return _LockPosition;
			}
			set
			{
				_LockPosition = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _LockEdit;
		
		[DisplayName("Lock Edit")]
		[Category("Column")]
		public bool LockEdit
		{
			get
			{
				return _LockEdit;
			}
			set
			{
				_LockEdit = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Layer;
		
		[DisplayName("Layer")]
		[Category("Column")]
		public int Layer
		{
			get
			{
				return _Layer;
			}
			set
			{
				_Layer = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _FillColor = "";
		
		[DisplayName("Fill Color")]
		[Category("Column")]
		public string FillColor
		{
			get
			{
				return _FillColor;
			}
			set
			{
				_FillColor = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _LineStyle = "";
		
		[DisplayName("Line Style")]
		[Category("Column")]
		public string LineStyle
		{
			get
			{
				return _LineStyle;
			}
			set
			{
				_LineStyle = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _Visible;
		
		[DisplayName("Visible")]
		[Category("Column")]
		public bool Visible
		{
			get
			{
				return _Visible;
			}
			set
			{
				_Visible = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Expression = "";
		
		[DisplayName("Expression")]
		[Category("Column")]
		public string Expression
		{
			get
			{
				return _Expression;
			}
			set
			{
				_Expression = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Action = "";
		
		[DisplayName("Action")]
		[Category("Column")]
		public string Action
		{
			get
			{
				return _Action;
			}
			set
			{
				_Action = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Argument = "";
		
		[DisplayName("Argument")]
		[Category("Column")]
		public string Argument
		{
			get
			{
				return _Argument;
			}
			set
			{
				_Argument = value;
			}
		}
		
		/// <remarks>SQL Type:System.Byte[]</remarks>
		private byte[] _CompiledExp;
		
		[DisplayName("Compiled Exp")]
		[Category("Column")]
		public byte[] CompiledExp
		{
			get
			{
				return _CompiledExp;
			}
			set
			{
				_CompiledExp = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _validexpression;
		
		[DisplayName("validexpression")]
		[Category("Column")]
		public bool validexpression
		{
			get
			{
				return _validexpression;
			}
			set
			{
				_validexpression = value;
			}
		}
		#endregion
		
		#region Related Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblDisplay _DisplayID_tblDisplay;
		
		[Description("Represents the foreign key object of the type DisplayID")]
		public tblDisplay m_DisplayID_tblDisplay
		{
			get
			{
				return _DisplayID_tblDisplay;
			}
			set
			{
				_DisplayID_tblDisplay = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblADText.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblADText.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblADText.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				ID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblADText.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public tblADText()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@ID", ID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@DisplayID", DisplayID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@oIndex", oIndex, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@DlgType", DlgType, DbType.Byte));
				SqlParmColl.Add(CommonDB.AddSqlParm("@DlgIndex", DlgIndex, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Left", Left, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Right", Right, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Top", Top, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Bottom", Bottom, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Format", Format, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Alignment", Alignment, DbType.Byte));
				SqlParmColl.Add(CommonDB.AddSqlParm("@TextValue", TextValue, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@TextValueID", TextValueID, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@TextColor", TextColor.ToArgb(), DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@TextBlinking", TextBlinking, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Font", Font, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@UnitShow", UnitShow, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@UnitFont", UnitFont, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@UnitColor", UnitColor.ToArgb(), DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@UnitText", UnitText, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@isfix", isfix, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Orientation", Orientation, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LastRev", LastRev, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LockPosition", LockPosition, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LockEdit", LockEdit, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Layer", Layer, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@FillColor", FillColor, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@LineStyle", LineStyle, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Visible", Visible, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Expression", Expression, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Action", Action, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Argument", Argument, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@CompiledExp", CompiledExp, DbType.Binary));
				SqlParmColl.Add(CommonDB.AddSqlParm("@validexpression", validexpression, DbType.Boolean));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		public void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the ID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ID")) == false))
				{
					ID = ((long)(Convert.ChangeType(rs["ID"], typeof(long))));
				}
				// if value from the recordset, to the DisplayID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("DisplayID")) == false))
				{
					DisplayID = ((long)(Convert.ChangeType(rs["DisplayID"], typeof(long))));
				}
				// if value from the recordset, to the oIndex _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("oIndex")) == false))
				{
					oIndex = ((int)(Convert.ChangeType(rs["oIndex"], typeof(int))));
				}
				// if value from the recordset, to the DlgType _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("DlgType")) == false))
				{
					DlgType = ((byte)(Convert.ChangeType(rs["DlgType"], typeof(byte))));
				}
				// if value from the recordset, to the DlgIndex _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("DlgIndex")) == false))
				{
					DlgIndex = ((int)(Convert.ChangeType(rs["DlgIndex"], typeof(int))));
				}
				// if value from the recordset, to the Left _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Left")) == false))
				{
					Left = ((int)(Convert.ChangeType(rs["Left"], typeof(int))));
				}
				// if value from the recordset, to the Right _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Right")) == false))
				{
					Right = ((int)(Convert.ChangeType(rs["Right"], typeof(int))));
				}
				// if value from the recordset, to the Top _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Top")) == false))
				{
					Top = ((int)(Convert.ChangeType(rs["Top"], typeof(int))));
				}
				// if value from the recordset, to the Bottom _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Bottom")) == false))
				{
					Bottom = ((int)(Convert.ChangeType(rs["Bottom"], typeof(int))));
				}
				// if value from the recordset, to the Format _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Format")) == false))
				{
					Format = ((int)(Convert.ChangeType(rs["Format"], typeof(int))));
				}
				// if value from the recordset, to the Alignment _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Alignment")) == false))
				{
					Alignment = ((byte)(Convert.ChangeType(rs["Alignment"], typeof(byte))));
				}
				// if value from the recordset, to the TextValue _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("TextValue")) == false))
				{
					TextValue = ((string)(Convert.ChangeType(rs["TextValue"], typeof(string))));
				}
				// if value from the recordset, to the TextValueID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("TextValueID")) == false))
				{
					TextValueID = ((int)(Convert.ChangeType(rs["TextValueID"], typeof(int))));
				}
				// if value from the recordset, to the TextColor _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("TextColor")) == false))
				{
					TextColor = Color.FromArgb(((int)(Convert.ChangeType(rs["TextColor"], typeof(int)))));
				}
				// if value from the recordset, to the TextBlinking _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("TextBlinking")) == false))
				{
					TextBlinking = ((bool)(Convert.ChangeType(rs["TextBlinking"], typeof(bool))));
				}
				// if value from the recordset, to the Font _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Font")) == false))
				{
					Font = ((string)(Convert.ChangeType(rs["Font"], typeof(string))));
				}
				// if value from the recordset, to the UnitShow _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("UnitShow")) == false))
				{
					UnitShow = ((bool)(Convert.ChangeType(rs["UnitShow"], typeof(bool))));
				}
				// if value from the recordset, to the UnitFont _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("UnitFont")) == false))
				{
					UnitFont = ((string)(Convert.ChangeType(rs["UnitFont"], typeof(string))));
				}
				// if value from the recordset, to the UnitColor _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("UnitColor")) == false))
				{
					UnitColor = Color.FromArgb(((int)(Convert.ChangeType(rs["UnitColor"], typeof(int)))));
				}
				// if value from the recordset, to the UnitText _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("UnitText")) == false))
				{
					UnitText = ((string)(Convert.ChangeType(rs["UnitText"], typeof(string))));
				}
				// if value from the recordset, to the isfix _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("isfix")) == false))
				{
					isfix = ((bool)(Convert.ChangeType(rs["isfix"], typeof(bool))));
				}
				// if value from the recordset, to the Orientation _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Orientation")) == false))
				{
					Orientation = ((int)(Convert.ChangeType(rs["Orientation"], typeof(int))));
				}
				// if value from the recordset, to the LastRev _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LastRev")) == false))
				{
					LastRev = ((bool)(Convert.ChangeType(rs["LastRev"], typeof(bool))));
				}
				// if value from the recordset, to the LockPosition _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LockPosition")) == false))
				{
					LockPosition = ((bool)(Convert.ChangeType(rs["LockPosition"], typeof(bool))));
				}
				// if value from the recordset, to the LockEdit _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LockEdit")) == false))
				{
					LockEdit = ((bool)(Convert.ChangeType(rs["LockEdit"], typeof(bool))));
				}
				// if value from the recordset, to the Layer _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Layer")) == false))
				{
					Layer = ((int)(Convert.ChangeType(rs["Layer"], typeof(int))));
				}
				// if value from the recordset, to the FillColor _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("FillColor")) == false))
				{
					FillColor = ((string)(Convert.ChangeType(rs["FillColor"], typeof(string))));
				}
				// if value from the recordset, to the LineStyle _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("LineStyle")) == false))
				{
					LineStyle = ((string)(Convert.ChangeType(rs["LineStyle"], typeof(string))));
				}
				// if value from the recordset, to the Visible _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Visible")) == false))
				{
					Visible = ((bool)(Convert.ChangeType(rs["Visible"], typeof(bool))));
				}
				// if value from the recordset, to the Expression _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Expression")) == false))
				{
					Expression = ((string)(Convert.ChangeType(rs["Expression"], typeof(string))));
				}
				// if value from the recordset, to the Action _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Action")) == false))
				{
					Action = ((string)(Convert.ChangeType(rs["Action"], typeof(string))));
				}
				// if value from the recordset, to the Argument _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Argument")) == false))
				{
					Argument = ((string)(Convert.ChangeType(rs["Argument"], typeof(string))));
				}
				// if value from the recordset, to the CompiledExp _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("CompiledExp")) == false))
				{
					CompiledExp = ((byte[])(Convert.ChangeType(rs["CompiledExp"], typeof(byte[]))));
				}
				// if value from the recordset, to the validexpression _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("validexpression")) == false))
				{
					validexpression = ((bool)(Convert.ChangeType(rs["validexpression"], typeof(bool))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		
		public override void AddFromString(string[] _strs, string arg1, ref string _log)
		{
			try
			{
				this.PreAddFromString(ref _log);
				int i;
				i = this.ColumnExistInHeader("DisplayID");
				if ((i >= 0))
				{
					DisplayID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("oIndex");
				if ((i >= 0))
				{
					oIndex = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("DlgType");
				if ((i >= 0))
				{
					DlgType = ((byte)(Convert.ChangeType(_strs[i], typeof(byte))));
				}
				i = this.ColumnExistInHeader("DlgIndex");
				if ((i >= 0))
				{
					DlgIndex = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Left");
				if ((i >= 0))
				{
					Left = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Right");
				if ((i >= 0))
				{
					Right = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Top");
				if ((i >= 0))
				{
					Top = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Bottom");
				if ((i >= 0))
				{
					Bottom = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Format");
				if ((i >= 0))
				{
					Format = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Alignment");
				if ((i >= 0))
				{
					Alignment = ((byte)(Convert.ChangeType(_strs[i], typeof(byte))));
				}
				i = this.ColumnExistInHeader("TextValue");
				if ((i >= 0))
				{
					TextValue = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("TextValueID");
				if ((i >= 0))
				{
					TextValueID = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("TextColor");
				if ((i >= 0))
				{
					TextColor = Color.FromArgb(((int)(Convert.ChangeType(_strs[i], typeof(int)))));
				}
				i = this.ColumnExistInHeader("TextBlinking");
				if ((i >= 0))
				{
					TextBlinking = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("Font");
				if ((i >= 0))
				{
					Font = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("UnitShow");
				if ((i >= 0))
				{
					UnitShow = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("UnitFont");
				if ((i >= 0))
				{
					UnitFont = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("UnitColor");
				if ((i >= 0))
				{
					UnitColor = Color.FromArgb(((int)(Convert.ChangeType(_strs[i], typeof(int)))));
				}
				i = this.ColumnExistInHeader("UnitText");
				if ((i >= 0))
				{
					UnitText = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("isfix");
				if ((i >= 0))
				{
					isfix = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("Orientation");
				if ((i >= 0))
				{
					Orientation = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("LastRev");
				if ((i >= 0))
				{
					LastRev = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("LockPosition");
				if ((i >= 0))
				{
					LockPosition = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("LockEdit");
				if ((i >= 0))
				{
					LockEdit = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("Layer");
				if ((i >= 0))
				{
					Layer = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("FillColor");
				if ((i >= 0))
				{
					FillColor = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("LineStyle");
				if ((i >= 0))
				{
					LineStyle = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Visible");
				if ((i >= 0))
				{
					Visible = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("Expression");
				if ((i >= 0))
				{
					Expression = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Action");
				if ((i >= 0))
				{
					Action = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Argument");
				if ((i >= 0))
				{
					Argument = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("CompiledExp");
				if ((i >= 0))
				{
					CompiledExp = ((byte[])(Convert.ChangeType(_strs[i], typeof(byte[]))));
				}
				i = this.ColumnExistInHeader("validexpression");
				if ((i >= 0))
				{
					validexpression = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				this.PostAddFromString(ref _log);
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblADTextChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblADTextCollection : SQLiteTableCollection
	{
		
		/// <remarks>SQL Type:tblADTextChangedEventHandler</remarks>
		public event tblADTextChangedEventHandler tblADTextChanged;
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblDisplay _DisplayID_tblDisplay;
		
		[Description("Represents the foreign key object of the type DisplayID")]
		public tblDisplay m_DisplayID_tblDisplay
		{
			get
			{
				return _DisplayID_tblDisplay;
			}
			set
			{
				_DisplayID_tblDisplay = value;
			}
		}
		
		[Description("Constructor")]
		public tblADTextCollection(tblDisplay _parent)
		{
			_DisplayID_tblDisplay = _parent;
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblADTextChanged(System.EventArgs e)
		{
			if (tblADTextChanged != null)
			{
				this.tblADTextChanged(this, e);
			}
		}
		
		[Description("Gets a  tblADText from the collection.")]
		public tblADText this[int index]
		{
			get
			{
				return ((tblADText)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblADTextChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblADText from the collection.")]
		public tblADText Get(int index)
		{
			return ((tblADText)(List[index]));
		}
		
		[Description("Adds a new tblADText to the collection.")]
		public void Add(tblADText item)
		{
			List.Add(item);
			this.OntblADTextChanged(EventArgs.Empty);
		}
		
		[Description("Removes a tblADText from the collection.")]
		public void Remove(tblADText item)
		{
			List.Remove(item);
			this.OntblADTextChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblADText into the collection at the specified index.")]
		public void Insert(int index, tblADText item)
		{
			List.Insert(index, item);
			this.OntblADTextChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblADText class in the collection.")]
		public int IndexOf(tblADText item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblADText class is present in the collection.")]
		public bool Contains(tblADText item)
		{
			return List.Contains(item);
		}
	}
}
