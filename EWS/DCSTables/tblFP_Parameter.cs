//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;


namespace DCS.DCSTables
{


    public partial class tblFP_Parameter : SQLiteTable
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblFP_Parameter.</remarks>
		internal static string SQL_Insert = @"INSERT INTO [tblFP_Parameter] ([FP_TypeID], [FP_Name], [VarNameID1], [VarNameID2], [VarNameID3], [VarNameID4], [VarNameID5], [VarNameID6], [VarNameID7], [VarNameID8], [VarNameID9], [VarNameID10], [VarNameID11], [VarNameID12], [VarNameID13], [VarNameID14], [VarNameID15], [VarNameID16]) VALUES(@FP_TypeID, @FP_Name, @VarNameID1, @VarNameID2, @VarNameID3, @VarNameID4, @VarNameID5, @VarNameID6, @VarNameID7, @VarNameID8, @VarNameID9, @VarNameID10, @VarNameID11, @VarNameID12, @VarNameID13, @VarNameID14, @VarNameID15, @VarNameID16) ; select last_insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblFP_Parameter, with the WHERE clause.</remarks>
		internal static string SQL_Update = @"UPDATE [tblFP_Parameter] SET [FP_TypeID] = @FP_TypeID, [FP_Name] = @FP_Name, [VarNameID1] = @VarNameID1, [VarNameID2] = @VarNameID2, [VarNameID3] = @VarNameID3, [VarNameID4] = @VarNameID4, [VarNameID5] = @VarNameID5, [VarNameID6] = @VarNameID6, [VarNameID7] = @VarNameID7, [VarNameID8] = @VarNameID8, [VarNameID9] = @VarNameID9, [VarNameID10] = @VarNameID10, [VarNameID11] = @VarNameID11, [VarNameID12] = @VarNameID12, [VarNameID13] = @VarNameID13, [VarNameID14] = @VarNameID14, [VarNameID15] = @VarNameID15, [VarNameID16] = @VarNameID16 WHERE [FP_ParaID]=@FP_ParaID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblFP_Parameter, with the WHERE clause.</remarks>
		internal static string SQL_Select = @"SELECT [FP_TypeID], [FP_Name], [VarNameID1], [VarNameID2], [VarNameID3], [VarNameID4], [VarNameID5], [VarNameID6], [VarNameID7], [VarNameID8], [VarNameID9], [VarNameID10], [VarNameID11], [VarNameID12], [VarNameID13], [VarNameID14], [VarNameID15], [VarNameID16] FROM [tblFP_Parameter] WHERE [FP_ParaID]=@FP_ParaID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblFP_Parameter, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblFP_Parameter] WHERE [FP_ParaID]=@FP_ParaID ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _FP_ParaID = -1;
		
		[DisplayName("FP_Para ID")]
		[Category("Primary Key")]
		public long FP_ParaID
		{
			get
			{
				return _FP_ParaID;
			}
			set
			{
				_FP_ParaID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _FP_TypeID = -1;
		
		[DisplayName("FP_Type ID")]
		[Category("Foreign Key")]
		public long FP_TypeID
		{
			get
			{
				return _FP_TypeID;
			}
			set
			{
				_FP_TypeID = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _FP_Name = "";
		
		[DisplayName("FP_Name")]
		[Category("Column")]
		public string FP_Name
		{
			get
			{
				return _FP_Name;
			}
			set
			{
				_FP_Name = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _VarNameID1;
		
		[DisplayName("Var Name ID1")]
		[Category("Column")]
		public int VarNameID1
		{
			get
			{
				return _VarNameID1;
			}
			set
			{
				_VarNameID1 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _VarNameID2;
		
		[DisplayName("Var Name ID2")]
		[Category("Column")]
		public int VarNameID2
		{
			get
			{
				return _VarNameID2;
			}
			set
			{
				_VarNameID2 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _VarNameID3;
		
		[DisplayName("Var Name ID3")]
		[Category("Column")]
		public int VarNameID3
		{
			get
			{
				return _VarNameID3;
			}
			set
			{
				_VarNameID3 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _VarNameID4;
		
		[DisplayName("Var Name ID4")]
		[Category("Column")]
		public int VarNameID4
		{
			get
			{
				return _VarNameID4;
			}
			set
			{
				_VarNameID4 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _VarNameID5;
		
		[DisplayName("Var Name ID5")]
		[Category("Column")]
		public int VarNameID5
		{
			get
			{
				return _VarNameID5;
			}
			set
			{
				_VarNameID5 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _VarNameID6;
		
		[DisplayName("Var Name ID6")]
		[Category("Column")]
		public int VarNameID6
		{
			get
			{
				return _VarNameID6;
			}
			set
			{
				_VarNameID6 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _VarNameID7;
		
		[DisplayName("Var Name ID7")]
		[Category("Column")]
		public int VarNameID7
		{
			get
			{
				return _VarNameID7;
			}
			set
			{
				_VarNameID7 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _VarNameID8;
		
		[DisplayName("Var Name ID8")]
		[Category("Column")]
		public int VarNameID8
		{
			get
			{
				return _VarNameID8;
			}
			set
			{
				_VarNameID8 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _VarNameID9;
		
		[DisplayName("Var Name ID9")]
		[Category("Column")]
		public int VarNameID9
		{
			get
			{
				return _VarNameID9;
			}
			set
			{
				_VarNameID9 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _VarNameID10;
		
		[DisplayName("Var Name ID1 0")]
		[Category("Column")]
		public int VarNameID10
		{
			get
			{
				return _VarNameID10;
			}
			set
			{
				_VarNameID10 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _VarNameID11;
		
		[DisplayName("Var Name ID1 1")]
		[Category("Column")]
		public int VarNameID11
		{
			get
			{
				return _VarNameID11;
			}
			set
			{
				_VarNameID11 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _VarNameID12;
		
		[DisplayName("Var Name ID1 2")]
		[Category("Column")]
		public int VarNameID12
		{
			get
			{
				return _VarNameID12;
			}
			set
			{
				_VarNameID12 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _VarNameID13;
		
		[DisplayName("Var Name ID1 3")]
		[Category("Column")]
		public int VarNameID13
		{
			get
			{
				return _VarNameID13;
			}
			set
			{
				_VarNameID13 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _VarNameID14;
		
		[DisplayName("Var Name ID1 4")]
		[Category("Column")]
		public int VarNameID14
		{
			get
			{
				return _VarNameID14;
			}
			set
			{
				_VarNameID14 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _VarNameID15;
		
		[DisplayName("Var Name ID1 5")]
		[Category("Column")]
		public int VarNameID15
		{
			get
			{
				return _VarNameID15;
			}
			set
			{
				_VarNameID15 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _VarNameID16;
		
		[DisplayName("Var Name ID1 6")]
		[Category("Column")]
		public int VarNameID16
		{
			get
			{
				return _VarNameID16;
			}
			set
			{
				_VarNameID16 = value;
			}
		}
		#endregion
		
		#region Related Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblFP_Types _FP_ID_tblFP_Types;
		
		[Description("Represents the foreign key object of the type FP_ID")]
		public tblFP_Types m_FP_ID_tblFP_Types
		{
			get
			{
				return _FP_ID_tblFP_Types;
			}
			set
			{
				_FP_ID_tblFP_Types = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblFP_Parameter.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblFP_Parameter.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblFP_Parameter.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				FP_ParaID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblFP_Parameter.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public tblFP_Parameter()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@FP_ParaID", FP_ParaID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@FP_TypeID", FP_TypeID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@FP_Name", FP_Name, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID1", VarNameID1, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID2", VarNameID2, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID3", VarNameID3, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID4", VarNameID4, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID5", VarNameID5, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID6", VarNameID6, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID7", VarNameID7, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID8", VarNameID8, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID9", VarNameID9, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID10", VarNameID10, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID11", VarNameID11, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID12", VarNameID12, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID13", VarNameID13, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID14", VarNameID14, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID15", VarNameID15, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID16", VarNameID16, DbType.Int32));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		public void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the FP_ParaID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("FP_ParaID")) == false))
				{
					FP_ParaID = ((long)(Convert.ChangeType(rs["FP_ParaID"], typeof(long))));
				}
				// if value from the recordset, to the FP_TypeID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("FP_TypeID")) == false))
				{
					FP_TypeID = ((long)(Convert.ChangeType(rs["FP_TypeID"], typeof(long))));
				}
				// if value from the recordset, to the FP_Name _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("FP_Name")) == false))
				{
					FP_Name = ((string)(Convert.ChangeType(rs["FP_Name"], typeof(string))));
				}
				// if value from the recordset, to the VarNameID1 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID1")) == false))
				{
					VarNameID1 = ((int)(Convert.ChangeType(rs["VarNameID1"], typeof(int))));
				}
				// if value from the recordset, to the VarNameID2 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID2")) == false))
				{
					VarNameID2 = ((int)(Convert.ChangeType(rs["VarNameID2"], typeof(int))));
				}
				// if value from the recordset, to the VarNameID3 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID3")) == false))
				{
					VarNameID3 = ((int)(Convert.ChangeType(rs["VarNameID3"], typeof(int))));
				}
				// if value from the recordset, to the VarNameID4 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID4")) == false))
				{
					VarNameID4 = ((int)(Convert.ChangeType(rs["VarNameID4"], typeof(int))));
				}
				// if value from the recordset, to the VarNameID5 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID5")) == false))
				{
					VarNameID5 = ((int)(Convert.ChangeType(rs["VarNameID5"], typeof(int))));
				}
				// if value from the recordset, to the VarNameID6 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID6")) == false))
				{
					VarNameID6 = ((int)(Convert.ChangeType(rs["VarNameID6"], typeof(int))));
				}
				// if value from the recordset, to the VarNameID7 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID7")) == false))
				{
					VarNameID7 = ((int)(Convert.ChangeType(rs["VarNameID7"], typeof(int))));
				}
				// if value from the recordset, to the VarNameID8 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID8")) == false))
				{
					VarNameID8 = ((int)(Convert.ChangeType(rs["VarNameID8"], typeof(int))));
				}
				// if value from the recordset, to the VarNameID9 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID9")) == false))
				{
					VarNameID9 = ((int)(Convert.ChangeType(rs["VarNameID9"], typeof(int))));
				}
				// if value from the recordset, to the VarNameID10 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID10")) == false))
				{
					VarNameID10 = ((int)(Convert.ChangeType(rs["VarNameID10"], typeof(int))));
				}
				// if value from the recordset, to the VarNameID11 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID11")) == false))
				{
					VarNameID11 = ((int)(Convert.ChangeType(rs["VarNameID11"], typeof(int))));
				}
				// if value from the recordset, to the VarNameID12 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID12")) == false))
				{
					VarNameID12 = ((int)(Convert.ChangeType(rs["VarNameID12"], typeof(int))));
				}
				// if value from the recordset, to the VarNameID13 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID13")) == false))
				{
					VarNameID13 = ((int)(Convert.ChangeType(rs["VarNameID13"], typeof(int))));
				}
				// if value from the recordset, to the VarNameID14 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID14")) == false))
				{
					VarNameID14 = ((int)(Convert.ChangeType(rs["VarNameID14"], typeof(int))));
				}
				// if value from the recordset, to the VarNameID15 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID15")) == false))
				{
					VarNameID15 = ((int)(Convert.ChangeType(rs["VarNameID15"], typeof(int))));
				}
				// if value from the recordset, to the VarNameID16 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID16")) == false))
				{
					VarNameID16 = ((int)(Convert.ChangeType(rs["VarNameID16"], typeof(int))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		
		public override void AddFromString(string[] _strs, string arg1, ref string _log)
		{
			try
			{
				this.PreAddFromString(ref _log);
				int i;
				i = this.ColumnExistInHeader("FP_TypeID");
				if ((i >= 0))
				{
					FP_TypeID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("FP_Name");
				if ((i >= 0))
				{
					FP_Name = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("VarNameID1");
				if ((i >= 0))
				{
					VarNameID1 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("VarNameID2");
				if ((i >= 0))
				{
					VarNameID2 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("VarNameID3");
				if ((i >= 0))
				{
					VarNameID3 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("VarNameID4");
				if ((i >= 0))
				{
					VarNameID4 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("VarNameID5");
				if ((i >= 0))
				{
					VarNameID5 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("VarNameID6");
				if ((i >= 0))
				{
					VarNameID6 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("VarNameID7");
				if ((i >= 0))
				{
					VarNameID7 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("VarNameID8");
				if ((i >= 0))
				{
					VarNameID8 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("VarNameID9");
				if ((i >= 0))
				{
					VarNameID9 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("VarNameID10");
				if ((i >= 0))
				{
					VarNameID10 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("VarNameID11");
				if ((i >= 0))
				{
					VarNameID11 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("VarNameID12");
				if ((i >= 0))
				{
					VarNameID12 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("VarNameID13");
				if ((i >= 0))
				{
					VarNameID13 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("VarNameID14");
				if ((i >= 0))
				{
					VarNameID14 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("VarNameID15");
				if ((i >= 0))
				{
					VarNameID15 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("VarNameID16");
				if ((i >= 0))
				{
					VarNameID16 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				this.PostAddFromString(ref _log);
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblFP_ParameterChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblFP_ParameterCollection : SQLiteTableCollection
	{
		
		/// <remarks>SQL Type:tblFP_ParameterChangedEventHandler</remarks>
		public event tblFP_ParameterChangedEventHandler tblFP_ParameterChanged;
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblFP_Types _FP_ID_tblFP_Types;
		
		[Description("Represents the foreign key object of the type FP_ID")]
		public tblFP_Types m_FP_ID_tblFP_Types
		{
			get
			{
				return _FP_ID_tblFP_Types;
			}
			set
			{
				_FP_ID_tblFP_Types = value;
			}
		}
		
		[Description("Constructor")]
		public tblFP_ParameterCollection(tblFP_Types _parent)
		{
			_FP_ID_tblFP_Types = _parent;
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblFP_ParameterChanged(System.EventArgs e)
		{
			if (tblFP_ParameterChanged != null)
			{
				this.tblFP_ParameterChanged(this, e);
			}
		}
		
		[Description("Gets a  tblFP_Parameter from the collection.")]
		public tblFP_Parameter this[int index]
		{
			get
			{
				return ((tblFP_Parameter)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblFP_ParameterChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblFP_Parameter from the collection.")]
		public tblFP_Parameter Get(int index)
		{
			return ((tblFP_Parameter)(List[index]));
		}
		
		[Description("Adds a new tblFP_Parameter to the collection.")]
		public void Add(tblFP_Parameter item)
		{
			List.Add(item);
			this.OntblFP_ParameterChanged(EventArgs.Empty);
		}
		
		[Description("Removes a tblFP_Parameter from the collection.")]
		public void Remove(tblFP_Parameter item)
		{
			List.Remove(item);
			this.OntblFP_ParameterChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblFP_Parameter into the collection at the specified index.")]
		public void Insert(int index, tblFP_Parameter item)
		{
			List.Insert(index, item);
			this.OntblFP_ParameterChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblFP_Parameter class in the collection.")]
		public int IndexOf(tblFP_Parameter item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblFP_Parameter class is present in the collection.")]
		public bool Contains(tblFP_Parameter item)
		{
			return List.Contains(item);
		}
	}
}
