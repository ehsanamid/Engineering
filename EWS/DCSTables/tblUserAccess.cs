//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;


namespace DCS.DCSTables
{


    public partial class tblUserAccess : SQLiteTable
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblUserAccess.</remarks>
		internal static string SQL_Insert = "INSERT INTO [tblUserAccess] ([UserGroupID], [ControllerID], [OWSAccessLevel], [Co" +
			"mmandAccessLevel]) VALUES(@UserGroupID, @ControllerID, @OWSAccessLevel, @Command" +
			"AccessLevel) ; select last_insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblUserAccess, with the WHERE clause.</remarks>
		internal static string SQL_Update = "UPDATE [tblUserAccess] SET [UserGroupID] = @UserGroupID, [ControllerID] = @Contro" +
			"llerID, [OWSAccessLevel] = @OWSAccessLevel, [CommandAccessLevel] = @CommandAcces" +
			"sLevel WHERE [UserAccessID]=@UserAccessID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblUserAccess, with the WHERE clause.</remarks>
		internal static string SQL_Select = "SELECT [UserGroupID], [ControllerID], [OWSAccessLevel], [CommandAccessLevel] FROM" +
			" [tblUserAccess] WHERE [UserAccessID]=@UserAccessID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblUserAccess, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblUserAccess] WHERE [UserAccessID]=@UserAccessID ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _UserAccessID = -1;
		
		[DisplayName("User Access ID")]
		[Category("Primary Key")]
		public long UserAccessID
		{
			get
			{
				return _UserAccessID;
			}
			set
			{
				_UserAccessID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _UserGroupID = -1;
		
		[DisplayName("User Group ID")]
		[Category("Column")]
		public long UserGroupID
		{
			get
			{
				return _UserGroupID;
			}
			set
			{
				_UserGroupID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _ControllerID = -1;
		
		[DisplayName("Controller ID")]
		[Category("Foreign Key")]
		public long ControllerID
		{
			get
			{
				return _ControllerID;
			}
			set
			{
				_ControllerID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _OWSAccessLevel;
		
		[DisplayName("OWSAccess Level")]
		[Category("Column")]
		public int OWSAccessLevel
		{
			get
			{
				return _OWSAccessLevel;
			}
			set
			{
				_OWSAccessLevel = value;
			}
		}
		
		/// <remarks>SQL Type:System.Byte</remarks>
		private byte _CommandAccessLevel;
		
		[DisplayName("Command Access Level")]
		[Category("Column")]
		public byte CommandAccessLevel
		{
			get
			{
				return _CommandAccessLevel;
			}
			set
			{
				_CommandAccessLevel = value;
			}
		}
		#endregion
		
		#region Related Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblController _ControllerID_tblController;
		
		[Description("Represents the foreign key object of the type ControllerID")]
		public tblController m_ControllerID_tblController
		{
			get
			{
				return _ControllerID_tblController;
			}
			set
			{
				_ControllerID_tblController = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblUserAccess.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblUserAccess.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblUserAccess.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				UserAccessID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblUserAccess.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public tblUserAccess()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@UserAccessID", UserAccessID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@UserGroupID", UserGroupID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@ControllerID", ControllerID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@OWSAccessLevel", OWSAccessLevel, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@CommandAccessLevel", CommandAccessLevel, DbType.Byte));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		public void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the UserAccessID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("UserAccessID")) == false))
				{
					UserAccessID = ((long)(Convert.ChangeType(rs["UserAccessID"], typeof(long))));
				}
				// if value from the recordset, to the UserGroupID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("UserGroupID")) == false))
				{
					UserGroupID = ((long)(Convert.ChangeType(rs["UserGroupID"], typeof(long))));
				}
				// if value from the recordset, to the ControllerID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ControllerID")) == false))
				{
					ControllerID = ((long)(Convert.ChangeType(rs["ControllerID"], typeof(long))));
				}
				// if value from the recordset, to the OWSAccessLevel _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("OWSAccessLevel")) == false))
				{
					OWSAccessLevel = ((int)(Convert.ChangeType(rs["OWSAccessLevel"], typeof(int))));
				}
				// if value from the recordset, to the CommandAccessLevel _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("CommandAccessLevel")) == false))
				{
					CommandAccessLevel = ((byte)(Convert.ChangeType(rs["CommandAccessLevel"], typeof(byte))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		
		public override void AddFromString(string[] _strs, string arg1, ref string _log)
		{
			try
			{
				this.PreAddFromString(ref _log);
				int i;
				i = this.ColumnExistInHeader("UserGroupID");
				if ((i >= 0))
				{
					UserGroupID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("ControllerID");
				if ((i >= 0))
				{
					ControllerID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("OWSAccessLevel");
				if ((i >= 0))
				{
					OWSAccessLevel = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("CommandAccessLevel");
				if ((i >= 0))
				{
					CommandAccessLevel = ((byte)(Convert.ChangeType(_strs[i], typeof(byte))));
				}
				this.PostAddFromString(ref _log);
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblUserAccessChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblUserAccessCollection : SQLiteTableCollection
	{
		
		/// <remarks>SQL Type:tblUserAccessChangedEventHandler</remarks>
		public event tblUserAccessChangedEventHandler tblUserAccessChanged;
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblController _ControllerID_tblController;
		
		[Description("Represents the foreign key object of the type ControllerID")]
		public tblController m_ControllerID_tblController
		{
			get
			{
				return _ControllerID_tblController;
			}
			set
			{
				_ControllerID_tblController = value;
			}
		}
		
		[Description("Constructor")]
		public tblUserAccessCollection(tblController _parent)
		{
			_ControllerID_tblController = _parent;
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblUserAccessChanged(System.EventArgs e)
		{
			if (tblUserAccessChanged != null)
			{
				this.tblUserAccessChanged(this, e);
			}
		}
		
		[Description("Gets a  tblUserAccess from the collection.")]
		public tblUserAccess this[int index]
		{
			get
			{
				return ((tblUserAccess)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblUserAccessChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblUserAccess from the collection.")]
		public tblUserAccess Get(int index)
		{
			return ((tblUserAccess)(List[index]));
		}
		
		[Description("Adds a new tblUserAccess to the collection.")]
		public void Add(tblUserAccess item)
		{
			List.Add(item);
			this.OntblUserAccessChanged(EventArgs.Empty);
		}
		
		[Description("Removes a tblUserAccess from the collection.")]
		public void Remove(tblUserAccess item)
		{
			List.Remove(item);
			this.OntblUserAccessChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblUserAccess into the collection at the specified index.")]
		public void Insert(int index, tblUserAccess item)
		{
			List.Insert(index, item);
			this.OntblUserAccessChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblUserAccess class in the collection.")]
		public int IndexOf(tblUserAccess item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblUserAccess class is present in the collection.")]
		public bool Contains(tblUserAccess item)
		{
			return List.Contains(item);
		}
	}
}
