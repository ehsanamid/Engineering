//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;


namespace DCS.DCSTables
{


    public partial class tblBOOL : SQLiteTable
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblBOOL.</remarks>
		internal static string SQL_Insert = "INSERT INTO [tblBOOL] ([VarNameID], [Text0], [Text1]) VALUES(@VarNameID, @Text0, " +
			"@Text1) ; select last_insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblBOOL, with the WHERE clause.</remarks>
		internal static string SQL_Update = "UPDATE [tblBOOL] SET [VarNameID] = @VarNameID, [Text0] = @Text0, [Text1] = @Text1" +
			" WHERE [ID]=@ID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblBOOL, with the WHERE clause.</remarks>
		internal static string SQL_Select = "SELECT [VarNameID], [Text0], [Text1] FROM [tblBOOL] WHERE [ID]=@ID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblBOOL, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblBOOL] WHERE [ID]=@ID ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _ID = -1;
		
		[DisplayName("ID")]
		[Category("Primary Key")]
		public long ID
		{
			get
			{
				return _ID;
			}
			set
			{
				_ID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _VarNameID = -1;
		
		[DisplayName("Var Name ID")]
		[Category("Foreign Key")]
		public long VarNameID
		{
			get
			{
				return _VarNameID;
			}
			set
			{
				_VarNameID = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Text0 = "";
		
		[DisplayName("Text 0")]
		[Category("Column")]
		public string Text0
		{
			get
			{
				return _Text0;
			}
			set
			{
				_Text0 = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Text1 = "";
		
		[DisplayName("Text 1")]
		[Category("Column")]
		public string Text1
		{
			get
			{
				return _Text1;
			}
			set
			{
				_Text1 = value;
			}
		}
		#endregion
		
		#region Related Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblVariable _VarNameID_tblVariable;
		
		[Description("Represents the foreign key object of the type VarNameID")]
		public tblVariable m_VarNameID_tblVariable
		{
			get
			{
				return _VarNameID_tblVariable;
			}
			set
			{
				_VarNameID_tblVariable = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblBOOL.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblBOOL.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblBOOL.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				ID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblBOOL.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public tblBOOL()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@ID", ID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@VarNameID", VarNameID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Text0", Text0, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Text1", Text1, DbType.String));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		public void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the ID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ID")) == false))
				{
					ID = ((long)(Convert.ChangeType(rs["ID"], typeof(long))));
				}
				// if value from the recordset, to the VarNameID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("VarNameID")) == false))
				{
					VarNameID = ((long)(Convert.ChangeType(rs["VarNameID"], typeof(long))));
				}
				// if value from the recordset, to the Text0 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Text0")) == false))
				{
					Text0 = ((string)(Convert.ChangeType(rs["Text0"], typeof(string))));
				}
				// if value from the recordset, to the Text1 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Text1")) == false))
				{
					Text1 = ((string)(Convert.ChangeType(rs["Text1"], typeof(string))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		
		public override void AddFromString(string[] _strs, string arg1, ref string _log)
		{
			try
			{
				this.PreAddFromString(ref _log);
				int i;
				i = this.ColumnExistInHeader("VarNameID");
				if ((i >= 0))
				{
					VarNameID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("Text0");
				if ((i >= 0))
				{
					Text0 = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Text1");
				if ((i >= 0))
				{
					Text1 = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				this.PostAddFromString(ref _log);
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblBOOLChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblBOOLCollection : SQLiteTableCollection
	{
		
		/// <remarks>SQL Type:tblBOOLChangedEventHandler</remarks>
		public event tblBOOLChangedEventHandler tblBOOLChanged;
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblVariable _VarNameID_tblVariable;
		
		[Description("Represents the foreign key object of the type VarNameID")]
		public tblVariable m_VarNameID_tblVariable
		{
			get
			{
				return _VarNameID_tblVariable;
			}
			set
			{
				_VarNameID_tblVariable = value;
			}
		}
		
		[Description("Constructor")]
		public tblBOOLCollection(tblVariable _parent)
		{
			_VarNameID_tblVariable = _parent;
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblBOOLChanged(System.EventArgs e)
		{
			if (tblBOOLChanged != null)
			{
				this.tblBOOLChanged(this, e);
			}
		}
		
		[Description("Gets a  tblBOOL from the collection.")]
		public tblBOOL this[int index]
		{
			get
			{
				return ((tblBOOL)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblBOOLChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblBOOL from the collection.")]
		public tblBOOL Get(int index)
		{
			return ((tblBOOL)(List[index]));
		}
		
		[Description("Adds a new tblBOOL to the collection.")]
		public void Add(tblBOOL item)
		{
			List.Add(item);
			this.OntblBOOLChanged(EventArgs.Empty);
		}
		
		[Description("Removes a tblBOOL from the collection.")]
		public void Remove(tblBOOL item)
		{
			List.Remove(item);
			this.OntblBOOLChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblBOOL into the collection at the specified index.")]
		public void Insert(int index, tblBOOL item)
		{
			List.Insert(index, item);
			this.OntblBOOLChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblBOOL class in the collection.")]
		public int IndexOf(tblBOOL item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblBOOL class is present in the collection.")]
		public bool Contains(tblBOOL item)
		{
			return List.Contains(item);
		}
	}
}
