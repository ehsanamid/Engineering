//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;


namespace DCS.DCSTables
{


    public partial class tblFunction : SQLiteTable
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblFunction.</remarks>
		internal static string SQL_Insert = @"INSERT INTO [tblFunction] ([FunctionName], [SolutionID], [Description], [Type], [IsStandard], [FunctionGroup], [Extensible], [IsFunction], [Language], [Overloaded], [Width], [Mode], [Status], [statement], [state]) VALUES(@FunctionName, @SolutionID, @Description, @Type, @IsStandard, @FunctionGroup, @Extensible, @IsFunction, @Language, @Overloaded, @Width, @Mode, @Status, @statement, @state) ; select last_insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblFunction, with the WHERE clause.</remarks>
		internal static string SQL_Update = @"UPDATE [tblFunction] SET [FunctionName] = @FunctionName, [SolutionID] = @SolutionID, [Description] = @Description, [Type] = @Type, [IsStandard] = @IsStandard, [FunctionGroup] = @FunctionGroup, [Extensible] = @Extensible, [IsFunction] = @IsFunction, [Language] = @Language, [Overloaded] = @Overloaded, [Width] = @Width, [Mode] = @Mode, [Status] = @Status, [statement] = @statement, [state] = @state WHERE [FunctionID]=@FunctionID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblFunction, with the WHERE clause.</remarks>
		internal static string SQL_Select = "SELECT [FunctionName], [SolutionID], [Description], [Type], [IsStandard], [Functi" +
			"onGroup], [Extensible], [IsFunction], [Language], [Overloaded], [Width], [Mode]," +
			" [Status], [statement], [state] FROM [tblFunction] WHERE [FunctionID]=@FunctionI" +
			"D ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblFunction, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblFunction] WHERE [FunctionID]=@FunctionID ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _FunctionID = -1;
		
		[DisplayName("Function ID")]
		[Category("Primary Key")]
		public long FunctionID
		{
			get
			{
				return _FunctionID;
			}
			set
			{
				_FunctionID = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _FunctionName = "";
		
		[DisplayName("Function Name")]
		[Category("Column")]
		public string FunctionName
		{
			get
			{
				return _FunctionName;
			}
			set
			{
				_FunctionName = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _SolutionID = -1;
		
		[DisplayName("Solution ID")]
		[Category("Foreign Key")]
		public long SolutionID
		{
			get
			{
				return _SolutionID;
			}
			set
			{
				_SolutionID = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Description = "";
		
		[DisplayName("Description")]
		[Category("Column")]
		public string Description
		{
			get
			{
				return _Description;
			}
			set
			{
				_Description = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Type;
		
		[DisplayName("Type")]
		[Category("Column")]
		public int Type
		{
			get
			{
				return _Type;
			}
			set
			{
				_Type = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _IsStandard;
		
		[DisplayName("Is Standard")]
		[Category("Column")]
		public bool IsStandard
		{
			get
			{
				return _IsStandard;
			}
			set
			{
				_IsStandard = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _FunctionGroup;
		
		[DisplayName("Function Group")]
		[Category("Column")]
		public int FunctionGroup
		{
			get
			{
				return _FunctionGroup;
			}
			set
			{
				_FunctionGroup = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _Extensible;
		
		[DisplayName("Extensible")]
		[Category("Column")]
		public bool Extensible
		{
			get
			{
				return _Extensible;
			}
			set
			{
				_Extensible = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _IsFunction;
		
		[DisplayName("Is Function")]
		[Category("Column")]
		public bool IsFunction
		{
			get
			{
				return _IsFunction;
			}
			set
			{
				_IsFunction = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Language;
		
		[DisplayName("Language")]
		[Category("Column")]
		public int Language
		{
			get
			{
				return _Language;
			}
			set
			{
				_Language = value;
			}
		}
		
		/// <remarks>SQL Type:System.Boolean</remarks>
		private bool _Overloaded;
		
		[DisplayName("Overloaded")]
		[Category("Column")]
		public bool Overloaded
		{
			get
			{
				return _Overloaded;
			}
			set
			{
				_Overloaded = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Width;
		
		[DisplayName("Width")]
		[Category("Column")]
		public int Width
		{
			get
			{
				return _Width;
			}
			set
			{
				_Width = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Mode;
		
		[DisplayName("Mode")]
		[Category("Column")]
		public int Mode
		{
			get
			{
				return _Mode;
			}
			set
			{
				_Mode = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Status;
		
		[DisplayName("Status")]
		[Category("Column")]
		public int Status
		{
			get
			{
				return _Status;
			}
			set
			{
				_Status = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _statement;
		
		[DisplayName("statement")]
		[Category("Column")]
		public int statement
		{
			get
			{
				return _statement;
			}
			set
			{
				_statement = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _state;
		
		[DisplayName("state")]
		[Category("Column")]
		public int state
		{
			get
			{
				return _state;
			}
			set
			{
				_state = value;
			}
		}
		#endregion
		
		#region Related Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblSolution _SolutionID_tblSolution;
		
		[Description("Represents the foreign key object of the type SolutionID")]
		public tblSolution m_SolutionID_tblSolution
		{
			get
			{
				return _SolutionID_tblSolution;
			}
			set
			{
				_SolutionID_tblSolution = value;
			}
		}
		#endregion
		
		#region Collection Objects
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblFBDAlarmOrderCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblFBDAlarmOrderCollection _tblFBDAlarmOrderCollection;
		
		[Description("Represents the foreign key object of the type FunctionID")]
		public tblFBDAlarmOrderCollection m_tblFBDAlarmOrderCollection
		{
			get
			{
              lock(_tblFBDAlarmOrderCollectionLock)
              {
				if (_tblFBDAlarmOrderCollection == null)
				{
					_tblFBDAlarmOrderCollection =  new tblFBDAlarmOrderCollection(this);
					_tblFBDAlarmOrderCollection.Load();
				}
				return _tblFBDAlarmOrderCollection;
              }
			}
			set
			{
				_tblFBDAlarmOrderCollection = value;
			}
		}
		
		/// <remarks>Lock for accessing collection</remarks>
		private readonly object _tblFormalParameterCollectionLock = new object();
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblFormalParameterCollection _tblFormalParameterCollection;
		
		[Description("Represents the foreign key object of the type FunctionID")]
		public tblFormalParameterCollection m_tblFormalParameterCollection
		{
			get
			{
              lock(_tblFormalParameterCollectionLock)
              {
				if (_tblFormalParameterCollection == null)
				{
					_tblFormalParameterCollection =  new tblFormalParameterCollection(this);
					_tblFormalParameterCollection.Load();
				}
				return _tblFormalParameterCollection;
              }
			}
			set
			{
				_tblFormalParameterCollection = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblFunction.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblFunction.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblFunction.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				FunctionID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblFunction.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public tblFunction()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@FunctionID", FunctionID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@FunctionName", FunctionName, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@SolutionID", SolutionID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Description", Description, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Type", Type, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@IsStandard", IsStandard, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@FunctionGroup", FunctionGroup, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Extensible", Extensible, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@IsFunction", IsFunction, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Language", Language, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Overloaded", Overloaded, DbType.Boolean));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Width", Width, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Mode", Mode, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Status", Status, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@statement", statement, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@state", state, DbType.Int32));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		public void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the FunctionID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("FunctionID")) == false))
				{
					FunctionID = ((long)(Convert.ChangeType(rs["FunctionID"], typeof(long))));
				}
				// if value from the recordset, to the FunctionName _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("FunctionName")) == false))
				{
					FunctionName = ((string)(Convert.ChangeType(rs["FunctionName"], typeof(string))));
				}
				// if value from the recordset, to the SolutionID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("SolutionID")) == false))
				{
					SolutionID = ((long)(Convert.ChangeType(rs["SolutionID"], typeof(long))));
				}
				// if value from the recordset, to the Description _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Description")) == false))
				{
					Description = ((string)(Convert.ChangeType(rs["Description"], typeof(string))));
				}
				// if value from the recordset, to the Type _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Type")) == false))
				{
					Type = ((int)(Convert.ChangeType(rs["Type"], typeof(int))));
				}
				// if value from the recordset, to the IsStandard _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("IsStandard")) == false))
				{
					IsStandard = ((bool)(Convert.ChangeType(rs["IsStandard"], typeof(bool))));
				}
				// if value from the recordset, to the FunctionGroup _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("FunctionGroup")) == false))
				{
					FunctionGroup = ((int)(Convert.ChangeType(rs["FunctionGroup"], typeof(int))));
				}
				// if value from the recordset, to the Extensible _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Extensible")) == false))
				{
					Extensible = ((bool)(Convert.ChangeType(rs["Extensible"], typeof(bool))));
				}
				// if value from the recordset, to the IsFunction _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("IsFunction")) == false))
				{
					IsFunction = ((bool)(Convert.ChangeType(rs["IsFunction"], typeof(bool))));
				}
				// if value from the recordset, to the Language _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Language")) == false))
				{
					Language = ((int)(Convert.ChangeType(rs["Language"], typeof(int))));
				}
				// if value from the recordset, to the Overloaded _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Overloaded")) == false))
				{
					Overloaded = ((bool)(Convert.ChangeType(rs["Overloaded"], typeof(bool))));
				}
				// if value from the recordset, to the Width _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Width")) == false))
				{
					Width = ((int)(Convert.ChangeType(rs["Width"], typeof(int))));
				}
				// if value from the recordset, to the Mode _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Mode")) == false))
				{
					Mode = ((int)(Convert.ChangeType(rs["Mode"], typeof(int))));
				}
				// if value from the recordset, to the Status _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Status")) == false))
				{
					Status = ((int)(Convert.ChangeType(rs["Status"], typeof(int))));
				}
				// if value from the recordset, to the statement _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("statement")) == false))
				{
					statement = ((int)(Convert.ChangeType(rs["statement"], typeof(int))));
				}
				// if value from the recordset, to the state _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("state")) == false))
				{
					state = ((int)(Convert.ChangeType(rs["state"], typeof(int))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		
		public override void AddFromString(string[] _strs, string arg1, ref string _log)
		{
			try
			{
				this.PreAddFromString(ref _log);
				int i;
				i = this.ColumnExistInHeader("FunctionName");
				if ((i >= 0))
				{
					FunctionName = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("SolutionID");
				if ((i >= 0))
				{
					SolutionID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("Description");
				if ((i >= 0))
				{
					Description = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("Type");
				if ((i >= 0))
				{
					Type = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("IsStandard");
				if ((i >= 0))
				{
					IsStandard = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("FunctionGroup");
				if ((i >= 0))
				{
					FunctionGroup = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Extensible");
				if ((i >= 0))
				{
					Extensible = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("IsFunction");
				if ((i >= 0))
				{
					IsFunction = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("Language");
				if ((i >= 0))
				{
					Language = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Overloaded");
				if ((i >= 0))
				{
					Overloaded = ((bool)(Convert.ChangeType(_strs[i], typeof(bool))));
				}
				i = this.ColumnExistInHeader("Width");
				if ((i >= 0))
				{
					Width = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Mode");
				if ((i >= 0))
				{
					Mode = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Status");
				if ((i >= 0))
				{
					Status = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("statement");
				if ((i >= 0))
				{
					statement = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("state");
				if ((i >= 0))
				{
					state = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				this.PostAddFromString(ref _log);
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblFunctionChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblFunctionCollection : SQLiteTableCollection
	{
		
		/// <remarks>SQL Type:tblFunctionChangedEventHandler</remarks>
		public event tblFunctionChangedEventHandler tblFunctionChanged;
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblSolution _SolutionID_tblSolution;
		
		[Description("Represents the foreign key object of the type SolutionID")]
		public tblSolution m_SolutionID_tblSolution
		{
			get
			{
				return _SolutionID_tblSolution;
			}
			set
			{
				_SolutionID_tblSolution = value;
			}
		}
		
		[Description("Constructor")]
		public tblFunctionCollection(tblSolution _parent)
		{
			_SolutionID_tblSolution = _parent;
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblFunctionChanged(System.EventArgs e)
		{
			if (tblFunctionChanged != null)
			{
				this.tblFunctionChanged(this, e);
			}
		}
		
		[Description("Gets a  tblFunction from the collection.")]
		public tblFunction this[int index]
		{
			get
			{
				return ((tblFunction)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblFunctionChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblFunction from the collection.")]
		public tblFunction Get(int index)
		{
			return ((tblFunction)(List[index]));
		}
		
		[Description("Adds a new tblFunction to the collection.")]
		public void Add(tblFunction item)
		{
			List.Add(item);
			this.OntblFunctionChanged(EventArgs.Empty);
		}
		
		[Description("Removes a tblFunction from the collection.")]
		public void Remove(tblFunction item)
		{
			List.Remove(item);
			this.OntblFunctionChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblFunction into the collection at the specified index.")]
		public void Insert(int index, tblFunction item)
		{
			List.Insert(index, item);
			this.OntblFunctionChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblFunction class in the collection.")]
		public int IndexOf(tblFunction item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblFunction class is present in the collection.")]
		public bool Contains(tblFunction item)
		{
			return List.Contains(item);
		}
	}
}
