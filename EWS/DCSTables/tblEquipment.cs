//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;


namespace DCS.DCSTables
{


    public partial class tblEquipment : SQLiteTable
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblEquipment.</remarks>
		internal static string SQL_Insert = "INSERT INTO [tblEquipment] ([EquipmentName], [PlantStructureID], [Description]) V" +
			"ALUES(@EquipmentName, @PlantStructureID, @Description) ; select last_insert_rowi" +
			"d(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblEquipment, with the WHERE clause.</remarks>
		internal static string SQL_Update = "UPDATE [tblEquipment] SET [EquipmentName] = @EquipmentName, [PlantStructureID] = " +
			"@PlantStructureID, [Description] = @Description WHERE [ID]=@ID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblEquipment, with the WHERE clause.</remarks>
		internal static string SQL_Select = "SELECT [EquipmentName], [PlantStructureID], [Description] FROM [tblEquipment] WHE" +
			"RE [ID]=@ID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblEquipment, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblEquipment] WHERE [ID]=@ID ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _ID = -1;
		
		[DisplayName("ID")]
		[Category("Primary Key")]
		public long ID
		{
			get
			{
				return _ID;
			}
			set
			{
				_ID = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _EquipmentName = "";
		
		[DisplayName("Equipment Name")]
		[Category("Column")]
		public string EquipmentName
		{
			get
			{
				return _EquipmentName;
			}
			set
			{
				_EquipmentName = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _PlantStructureID = -1;
		
		[DisplayName("Plant Structure ID")]
		[Category("Foreign Key")]
		public long PlantStructureID
		{
			get
			{
				return _PlantStructureID;
			}
			set
			{
				_PlantStructureID = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Description = "";
		
		[DisplayName("Description")]
		[Category("Column")]
		public string Description
		{
			get
			{
				return _Description;
			}
			set
			{
				_Description = value;
			}
		}
		#endregion
		
		#region Related Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblPlantStructure _ID_tblPlantStructure;
		
		[Description("Represents the foreign key object of the type ID")]
		public tblPlantStructure m_ID_tblPlantStructure
		{
			get
			{
				return _ID_tblPlantStructure;
			}
			set
			{
				_ID_tblPlantStructure = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString+"; Password="+Common.PassString+Common.WordString+";");
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblEquipment.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString+"; Password="+Common.PassString+Common.WordString+";");
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblEquipment.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString+"; Password="+Common.PassString+Common.WordString+";");
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblEquipment.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				ID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString+"; Password="+Common.PassString+Common.WordString+";");
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblEquipment.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public tblEquipment()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@ID", ID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@EquipmentName", EquipmentName, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@PlantStructureID", PlantStructureID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Description", Description, DbType.String));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		public void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the ID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ID")) == false))
				{
					ID = ((long)(Convert.ChangeType(rs["ID"], typeof(long))));
				}
				// if value from the recordset, to the EquipmentName _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("EquipmentName")) == false))
				{
					EquipmentName = ((string)(Convert.ChangeType(rs["EquipmentName"], typeof(string))));
				}
				// if value from the recordset, to the PlantStructureID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("PlantStructureID")) == false))
				{
					PlantStructureID = ((long)(Convert.ChangeType(rs["PlantStructureID"], typeof(long))));
				}
				// if value from the recordset, to the Description _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Description")) == false))
				{
					Description = ((string)(Convert.ChangeType(rs["Description"], typeof(string))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		
		public override void AddFromString(string[] _strs, string arg1, ref string _log)
		{
			try
			{
				this.PreAddFromString(ref _log);
				int i;
				i = this.ColumnExistInHeader("EquipmentName");
				if ((i >= 0))
				{
					EquipmentName = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("PlantStructureID");
				if ((i >= 0))
				{
					PlantStructureID = ((long)(Convert.ChangeType(_strs[i], typeof(long))));
				}
				i = this.ColumnExistInHeader("Description");
				if ((i >= 0))
				{
					Description = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				this.PostAddFromString(ref _log);
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblEquipmentChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblEquipmentCollection : SQLiteTableCollection
	{
		
		/// <remarks>SQL Type:tblEquipmentChangedEventHandler</remarks>
		public event tblEquipmentChangedEventHandler tblEquipmentChanged;
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblPlantStructure _ID_tblPlantStructure;
		
		[Description("Represents the foreign key object of the type ID")]
		public tblPlantStructure m_ID_tblPlantStructure
		{
			get
			{
				return _ID_tblPlantStructure;
			}
			set
			{
				_ID_tblPlantStructure = value;
			}
		}
		
		[Description("Constructor")]
		public tblEquipmentCollection(tblPlantStructure _parent)
		{
			_ID_tblPlantStructure = _parent;
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblEquipmentChanged(System.EventArgs e)
		{
			if (tblEquipmentChanged != null)
			{
				this.tblEquipmentChanged(this, e);
			}
		}
		
		[Description("Gets a  tblEquipment from the collection.")]
		public tblEquipment this[int index]
		{
			get
			{
				return ((tblEquipment)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblEquipmentChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblEquipment from the collection.")]
		public tblEquipment Get(int index)
		{
			return ((tblEquipment)(List[index]));
		}
		
		[Description("Adds a new tblEquipment to the collection.")]
		public void Add(tblEquipment item)
		{
			List.Add(item);
			this.OntblEquipmentChanged(EventArgs.Empty);
		}
		
		[Description("Removes a tblEquipment from the collection.")]
		public void Remove(tblEquipment item)
		{
			List.Remove(item);
			this.OntblEquipmentChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblEquipment into the collection at the specified index.")]
		public void Insert(int index, tblEquipment item)
		{
			List.Insert(index, item);
			this.OntblEquipmentChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblEquipment class in the collection.")]
		public int IndexOf(tblEquipment item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblEquipment class is present in the collection.")]
		public bool Contains(tblEquipment item)
		{
			return List.Contains(item);
		}
	}
}
