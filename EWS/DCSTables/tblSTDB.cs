//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;


namespace DCS.DCSTables
{


    public partial class tblSTDB : SQLiteTable
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblSTDB.</remarks>
		internal static string SQL_Insert = @"INSERT INTO [tblSTDB] ([NAME], [StaType], [StaNo], [Sta_Dig], [NoOfHW], [Hwno1], [HW_Dig1], [Hwno2], [HW_Dig2], [NoOfIP], [IP1_1], [IP1_1_Dig], [IP1_2], [IP1_2_Dig], [IP2_1], [IP2_1_Dig], [IP2_2], [IP2_2_Dig], [ControllerID], [DomainID], [TargetType]) VALUES(@NAME, @StaType, @StaNo, @Sta_Dig, @NoOfHW, @Hwno1, @HW_Dig1, @Hwno2, @HW_Dig2, @NoOfIP, @IP1_1, @IP1_1_Dig, @IP1_2, @IP1_2_Dig, @IP2_1, @IP2_1_Dig, @IP2_2, @IP2_2_Dig, @ControllerID, @DomainID, @TargetType) ; select last_insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblSTDB, with the WHERE clause.</remarks>
		internal static string SQL_Update = @"UPDATE [tblSTDB] SET [NAME] = @NAME, [StaType] = @StaType, [StaNo] = @StaNo, [Sta_Dig] = @Sta_Dig, [NoOfHW] = @NoOfHW, [Hwno1] = @Hwno1, [HW_Dig1] = @HW_Dig1, [Hwno2] = @Hwno2, [HW_Dig2] = @HW_Dig2, [NoOfIP] = @NoOfIP, [IP1_1] = @IP1_1, [IP1_1_Dig] = @IP1_1_Dig, [IP1_2] = @IP1_2, [IP1_2_Dig] = @IP1_2_Dig, [IP2_1] = @IP2_1, [IP2_1_Dig] = @IP2_1_Dig, [IP2_2] = @IP2_2, [IP2_2_Dig] = @IP2_2_Dig, [ControllerID] = @ControllerID, [DomainID] = @DomainID, [TargetType] = @TargetType WHERE [STDBID]=@STDBID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblSTDB, with the WHERE clause.</remarks>
		internal static string SQL_Select = @"SELECT [NAME], [StaType], [StaNo], [Sta_Dig], [NoOfHW], [Hwno1], [HW_Dig1], [Hwno2], [HW_Dig2], [NoOfIP], [IP1_1], [IP1_1_Dig], [IP1_2], [IP1_2_Dig], [IP2_1], [IP2_1_Dig], [IP2_2], [IP2_2_Dig], [ControllerID], [DomainID], [TargetType] FROM [tblSTDB] WHERE [STDBID]=@STDBID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblSTDB, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblSTDB] WHERE [STDBID]=@STDBID ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _STDBID = -1;
		
		[DisplayName("STDBID")]
		[Category("Primary Key")]
		public long STDBID
		{
			get
			{
				return _STDBID;
			}
			set
			{
				_STDBID = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _NAME = "";
		
		[DisplayName("NAME")]
		[Category("Column")]
		public string NAME
		{
			get
			{
				return _NAME;
			}
			set
			{
				_NAME = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _StaType;
		
		[DisplayName("Sta Type")]
		[Category("Column")]
		public short StaType
		{
			get
			{
				return _StaType;
			}
			set
			{
				_StaType = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _StaNo;
		
		[DisplayName("Sta No")]
		[Category("Column")]
		public short StaNo
		{
			get
			{
				return _StaNo;
			}
			set
			{
				_StaNo = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _Sta_Dig;
		
		[DisplayName("Sta_Dig")]
		[Category("Column")]
		public short Sta_Dig
		{
			get
			{
				return _Sta_Dig;
			}
			set
			{
				_Sta_Dig = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _NoOfHW;
		
		[DisplayName("No Of HW")]
		[Category("Column")]
		public short NoOfHW
		{
			get
			{
				return _NoOfHW;
			}
			set
			{
				_NoOfHW = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _Hwno1;
		
		[DisplayName("Hwno 1")]
		[Category("Column")]
		public short Hwno1
		{
			get
			{
				return _Hwno1;
			}
			set
			{
				_Hwno1 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _HW_Dig1;
		
		[DisplayName("HW_Dig 1")]
		[Category("Column")]
		public int HW_Dig1
		{
			get
			{
				return _HW_Dig1;
			}
			set
			{
				_HW_Dig1 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _Hwno2;
		
		[DisplayName("Hwno 2")]
		[Category("Column")]
		public short Hwno2
		{
			get
			{
				return _Hwno2;
			}
			set
			{
				_Hwno2 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _HW_Dig2;
		
		[DisplayName("HW_Dig 2")]
		[Category("Column")]
		public int HW_Dig2
		{
			get
			{
				return _HW_Dig2;
			}
			set
			{
				_HW_Dig2 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _NoOfIP;
		
		[DisplayName("No Of IP")]
		[Category("Column")]
		public short NoOfIP
		{
			get
			{
				return _NoOfIP;
			}
			set
			{
				_NoOfIP = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _IP1_1 = "";
		
		[DisplayName("IP1_1")]
		[Category("Column")]
		public string IP1_1
		{
			get
			{
				return _IP1_1;
			}
			set
			{
				_IP1_1 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _IP1_1_Dig;
		
		[DisplayName("IP1_1_Dig")]
		[Category("Column")]
		public int IP1_1_Dig
		{
			get
			{
				return _IP1_1_Dig;
			}
			set
			{
				_IP1_1_Dig = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _IP1_2 = "";
		
		[DisplayName("IP1_2")]
		[Category("Column")]
		public string IP1_2
		{
			get
			{
				return _IP1_2;
			}
			set
			{
				_IP1_2 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _IP1_2_Dig;
		
		[DisplayName("IP1_2_Dig")]
		[Category("Column")]
		public int IP1_2_Dig
		{
			get
			{
				return _IP1_2_Dig;
			}
			set
			{
				_IP1_2_Dig = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _IP2_1 = "";
		
		[DisplayName("IP2_1")]
		[Category("Column")]
		public string IP2_1
		{
			get
			{
				return _IP2_1;
			}
			set
			{
				_IP2_1 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _IP2_1_Dig;
		
		[DisplayName("IP2_1_Dig")]
		[Category("Column")]
		public int IP2_1_Dig
		{
			get
			{
				return _IP2_1_Dig;
			}
			set
			{
				_IP2_1_Dig = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _IP2_2 = "";
		
		[DisplayName("IP2_2")]
		[Category("Column")]
		public string IP2_2
		{
			get
			{
				return _IP2_2;
			}
			set
			{
				_IP2_2 = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _IP2_2_Dig;
		
		[DisplayName("IP2_2_Dig")]
		[Category("Column")]
		public int IP2_2_Dig
		{
			get
			{
				return _IP2_2_Dig;
			}
			set
			{
				_IP2_2_Dig = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _ControllerID;
		
		[DisplayName("Controller ID")]
		[Category("Column")]
		public short ControllerID
		{
			get
			{
				return _ControllerID;
			}
			set
			{
				_ControllerID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int16</remarks>
		private short _DomainID;
		
		[DisplayName("Domain ID")]
		[Category("Column")]
		public short DomainID
		{
			get
			{
				return _DomainID;
			}
			set
			{
				_DomainID = value;
			}
		}
		
		/// <remarks>SQL Type:System.Byte</remarks>
		private byte _TargetType;
		
		[DisplayName("Target Type")]
		[Category("Column")]
		public byte TargetType
		{
			get
			{
				return _TargetType;
			}
			set
			{
				_TargetType = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblSTDB.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblSTDB.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblSTDB.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				STDBID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblSTDB.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public tblSTDB()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@STDBID", STDBID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@NAME", NAME, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@StaType", StaType, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@StaNo", StaNo, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Sta_Dig", Sta_Dig, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@NoOfHW", NoOfHW, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Hwno1", Hwno1, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@HW_Dig1", HW_Dig1, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Hwno2", Hwno2, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@HW_Dig2", HW_Dig2, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@NoOfIP", NoOfIP, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@IP1_1", IP1_1, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@IP1_1_Dig", IP1_1_Dig, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@IP1_2", IP1_2, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@IP1_2_Dig", IP1_2_Dig, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@IP2_1", IP2_1, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@IP2_1_Dig", IP2_1_Dig, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@IP2_2", IP2_2, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@IP2_2_Dig", IP2_2_Dig, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@ControllerID", ControllerID, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@DomainID", DomainID, DbType.Int16));
				SqlParmColl.Add(CommonDB.AddSqlParm("@TargetType", TargetType, DbType.Byte));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		public void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the STDBID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("STDBID")) == false))
				{
					STDBID = ((long)(Convert.ChangeType(rs["STDBID"], typeof(long))));
				}
				// if value from the recordset, to the NAME _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("NAME")) == false))
				{
					NAME = ((string)(Convert.ChangeType(rs["NAME"], typeof(string))));
				}
				// if value from the recordset, to the StaType _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("StaType")) == false))
				{
					StaType = ((short)(Convert.ChangeType(rs["StaType"], typeof(short))));
				}
				// if value from the recordset, to the StaNo _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("StaNo")) == false))
				{
					StaNo = ((short)(Convert.ChangeType(rs["StaNo"], typeof(short))));
				}
				// if value from the recordset, to the Sta_Dig _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Sta_Dig")) == false))
				{
					Sta_Dig = ((short)(Convert.ChangeType(rs["Sta_Dig"], typeof(short))));
				}
				// if value from the recordset, to the NoOfHW _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("NoOfHW")) == false))
				{
					NoOfHW = ((short)(Convert.ChangeType(rs["NoOfHW"], typeof(short))));
				}
				// if value from the recordset, to the Hwno1 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Hwno1")) == false))
				{
					Hwno1 = ((short)(Convert.ChangeType(rs["Hwno1"], typeof(short))));
				}
				// if value from the recordset, to the HW_Dig1 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("HW_Dig1")) == false))
				{
					HW_Dig1 = ((int)(Convert.ChangeType(rs["HW_Dig1"], typeof(int))));
				}
				// if value from the recordset, to the Hwno2 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Hwno2")) == false))
				{
					Hwno2 = ((short)(Convert.ChangeType(rs["Hwno2"], typeof(short))));
				}
				// if value from the recordset, to the HW_Dig2 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("HW_Dig2")) == false))
				{
					HW_Dig2 = ((int)(Convert.ChangeType(rs["HW_Dig2"], typeof(int))));
				}
				// if value from the recordset, to the NoOfIP _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("NoOfIP")) == false))
				{
					NoOfIP = ((short)(Convert.ChangeType(rs["NoOfIP"], typeof(short))));
				}
				// if value from the recordset, to the IP1_1 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("IP1_1")) == false))
				{
					IP1_1 = ((string)(Convert.ChangeType(rs["IP1_1"], typeof(string))));
				}
				// if value from the recordset, to the IP1_1_Dig _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("IP1_1_Dig")) == false))
				{
					IP1_1_Dig = ((int)(Convert.ChangeType(rs["IP1_1_Dig"], typeof(int))));
				}
				// if value from the recordset, to the IP1_2 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("IP1_2")) == false))
				{
					IP1_2 = ((string)(Convert.ChangeType(rs["IP1_2"], typeof(string))));
				}
				// if value from the recordset, to the IP1_2_Dig _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("IP1_2_Dig")) == false))
				{
					IP1_2_Dig = ((int)(Convert.ChangeType(rs["IP1_2_Dig"], typeof(int))));
				}
				// if value from the recordset, to the IP2_1 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("IP2_1")) == false))
				{
					IP2_1 = ((string)(Convert.ChangeType(rs["IP2_1"], typeof(string))));
				}
				// if value from the recordset, to the IP2_1_Dig _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("IP2_1_Dig")) == false))
				{
					IP2_1_Dig = ((int)(Convert.ChangeType(rs["IP2_1_Dig"], typeof(int))));
				}
				// if value from the recordset, to the IP2_2 _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("IP2_2")) == false))
				{
					IP2_2 = ((string)(Convert.ChangeType(rs["IP2_2"], typeof(string))));
				}
				// if value from the recordset, to the IP2_2_Dig _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("IP2_2_Dig")) == false))
				{
					IP2_2_Dig = ((int)(Convert.ChangeType(rs["IP2_2_Dig"], typeof(int))));
				}
				// if value from the recordset, to the ControllerID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ControllerID")) == false))
				{
					ControllerID = ((short)(Convert.ChangeType(rs["ControllerID"], typeof(short))));
				}
				// if value from the recordset, to the DomainID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("DomainID")) == false))
				{
					DomainID = ((short)(Convert.ChangeType(rs["DomainID"], typeof(short))));
				}
				// if value from the recordset, to the TargetType _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("TargetType")) == false))
				{
					TargetType = ((byte)(Convert.ChangeType(rs["TargetType"], typeof(byte))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		
		public override void AddFromString(string[] _strs, string arg1, ref string _log)
		{
			try
			{
				this.PreAddFromString(ref _log);
				int i;
				i = this.ColumnExistInHeader("NAME");
				if ((i >= 0))
				{
					NAME = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("StaType");
				if ((i >= 0))
				{
					StaType = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("StaNo");
				if ((i >= 0))
				{
					StaNo = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("Sta_Dig");
				if ((i >= 0))
				{
					Sta_Dig = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("NoOfHW");
				if ((i >= 0))
				{
					NoOfHW = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("Hwno1");
				if ((i >= 0))
				{
					Hwno1 = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("HW_Dig1");
				if ((i >= 0))
				{
					HW_Dig1 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("Hwno2");
				if ((i >= 0))
				{
					Hwno2 = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("HW_Dig2");
				if ((i >= 0))
				{
					HW_Dig2 = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("NoOfIP");
				if ((i >= 0))
				{
					NoOfIP = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("IP1_1");
				if ((i >= 0))
				{
					IP1_1 = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("IP1_1_Dig");
				if ((i >= 0))
				{
					IP1_1_Dig = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("IP1_2");
				if ((i >= 0))
				{
					IP1_2 = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("IP1_2_Dig");
				if ((i >= 0))
				{
					IP1_2_Dig = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("IP2_1");
				if ((i >= 0))
				{
					IP2_1 = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("IP2_1_Dig");
				if ((i >= 0))
				{
					IP2_1_Dig = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("IP2_2");
				if ((i >= 0))
				{
					IP2_2 = ((string)(Convert.ChangeType(_strs[i], typeof(string))));
				}
				i = this.ColumnExistInHeader("IP2_2_Dig");
				if ((i >= 0))
				{
					IP2_2_Dig = ((int)(Convert.ChangeType(_strs[i], typeof(int))));
				}
				i = this.ColumnExistInHeader("ControllerID");
				if ((i >= 0))
				{
					ControllerID = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("DomainID");
				if ((i >= 0))
				{
					DomainID = ((short)(Convert.ChangeType(_strs[i], typeof(short))));
				}
				i = this.ColumnExistInHeader("TargetType");
				if ((i >= 0))
				{
					TargetType = ((byte)(Convert.ChangeType(_strs[i], typeof(byte))));
				}
				this.PostAddFromString(ref _log);
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblSTDBChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblSTDBCollection : SQLiteTableCollection
	{
		
		/// <remarks>SQL Type:tblSTDBChangedEventHandler</remarks>
		public event tblSTDBChangedEventHandler tblSTDBChanged;
		
		[Description("Constructor")]
		public tblSTDBCollection()
		{
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblSTDBChanged(System.EventArgs e)
		{
			if (tblSTDBChanged != null)
			{
				this.tblSTDBChanged(this, e);
			}
		}
		
		[Description("Gets a  tblSTDB from the collection.")]
		public tblSTDB this[int index]
		{
			get
			{
				return ((tblSTDB)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblSTDBChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblSTDB from the collection.")]
		public tblSTDB Get(int index)
		{
			return ((tblSTDB)(List[index]));
		}
		
		[Description("Adds a new tblSTDB to the collection.")]
		public void Add(tblSTDB item)
		{
			List.Add(item);
			this.OntblSTDBChanged(EventArgs.Empty);
		}
		
		[Description("Removes a tblSTDB from the collection.")]
		public void Remove(tblSTDB item)
		{
			List.Remove(item);
			this.OntblSTDBChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblSTDB into the collection at the specified index.")]
		public void Insert(int index, tblSTDB item)
		{
			List.Insert(index, item);
			this.OntblSTDBChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblSTDB class in the collection.")]
		public int IndexOf(tblSTDB item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblSTDB class is present in the collection.")]
		public bool Contains(tblSTDB item)
		{
			return List.Contains(item);
		}
	}
}
