//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SQLite;
using System.Data.SqlClient;
using System.Drawing;
using System.Text;
using System.Windows.Forms;


namespace EWS.DCSTables
{
	
	
	public partial class tblPlantStructue : Object
	{
		
		#region Static SQL String Memebers
		/// <remarks>This _databasename represents the full INSERT INTO string for the table tblPlantStructue.</remarks>
		internal static string SQL_Insert = "INSERT INTO [tblPlantStructue] ([Name], [ParentID], [Description], [Type], [Solut" +
			"ionID]) VALUES(@Name, @ParentID, @Description, @Type, @SolutionID) ; select last" +
			"_insert_rowid(); ";
		
		/// <remarks>This _databasename represents the full UPDATE string for the table tblPlantStructue, with the WHERE clause.</remarks>
		internal static string SQL_Update = "UPDATE [tblPlantStructue] SET [Name] = @Name, [ParentID] = @ParentID, [Descriptio" +
			"n] = @Description, [Type] = @Type, [SolutionID] = @SolutionID WHERE [ID]=@ID ";
		
		/// <remarks>This _databasename represents the full SELECT string for the table tblPlantStructue, with the WHERE clause.</remarks>
		internal static string SQL_Select = "SELECT [Name], [ParentID], [Description], [Type], [SolutionID] FROM [tblPlantStru" +
			"ctue] WHERE [ID]=@ID ";
		
		/// <remarks>This _databasename represents the DELETE string for the table tblPlantStructue, with the WHERE clause.</remarks>
		internal static string SQL_Delete = "DELETE FROM [tblPlantStructue] WHERE [ID]=@ID ";
		#endregion
		
		#region Tables Memebers
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _ID;
		
		[DisplayName("ID")]
		[Category("Primary Key")]
		public long ID
		{
			get
			{
				return _ID;
			}
			set
			{
				_ID = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Name;
		
		[DisplayName("Name")]
		[Category("Column")]
		public string Name
		{
			get
			{
				return _Name;
			}
			set
			{
				_Name = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _ParentID;
		
		[DisplayName("Parent ID")]
		[Category("Column")]
		public long ParentID
		{
			get
			{
				return _ParentID;
			}
			set
			{
				_ParentID = value;
			}
		}
		
		/// <remarks>SQL Type:System.String</remarks>
		private string _Description;
		
		[DisplayName("Description")]
		[Category("Column")]
		public string Description
		{
			get
			{
				return _Description;
			}
			set
			{
				_Description = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int32</remarks>
		private int _Type;
		
		[DisplayName("Type")]
		[Category("Column")]
		public int Type
		{
			get
			{
				return _Type;
			}
			set
			{
				_Type = value;
			}
		}
		
		/// <remarks>SQL Type:System.Int64</remarks>
		private long _SolutionID;
		
		[DisplayName("Solution ID")]
		[Category("Foreign Key")]
		public long SolutionID
		{
			get
			{
				return _SolutionID;
			}
			set
			{
				_SolutionID = value;
			}
		}
		#endregion
		
		#region Related Objects
		/// <remarks>Represents the foreign key object</remarks>
		private tblSolution _SolutionID_tblSolution;
		
		[Description("Represents the foreign key object of the type SolutionID")]
		public tblSolution m_SolutionID_tblSolution
		{
			get
			{
				return _SolutionID_tblSolution;
			}
			set
			{
				_SolutionID_tblSolution = value;
			}
		}
		#endregion
		
		#region Public Methods
		public int Delete()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreDeleteTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				SQLiteCommand ComSync = Common.Conn.CreateCommand();
				Com.CommandText = tblPlantStructue.SQL_Delete;
				ComSync.CommandText = "PRAGMA foreign_keys=ON";
				Com.Parameters.AddRange(GetSqlParameters());
				ComSync.ExecuteNonQuery();
				int rowseffected = Com.ExecuteNonQuery();
				ComSync.Dispose();
				Com.Dispose();
				this.PostDeleteTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Select()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblPlantStructue.SQL_Select;
				Com.Parameters.AddRange(GetSqlParameters());
				SQLiteDataReader rs = Com.ExecuteReader();
				for (
				; rs.Read(); 
				)
				{
					AddFromRecordSet(rs);
				}
				rs.Close();
				rs.Dispose();
				Com.Dispose();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Insert()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreInsertTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblPlantStructue.SQL_Insert;
				Com.Parameters.AddRange(GetSqlParameters());
				ID = ((long)(Convert.ToInt64(Com.ExecuteScalar())));
				Com.Dispose();
				this.PostInsertTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public int Update()
		{
			try
			{
				if (Common.Conn == null)
				{
					Common.Conn = new SQLiteConnection(Common.ConnectionString);
					Common.Conn.Open();
				}
				this.PreUpdateTriger();
				SQLiteCommand Com = Common.Conn.CreateCommand();
				Com.CommandText = tblPlantStructue.SQL_Update;
				Com.Parameters.AddRange(GetSqlParameters());
				int rowseffected = Com.ExecuteNonQuery();
				Com.Dispose();
				this.PostUpdateTriger();
				return 0;
			}
			catch (SQLiteException ex)
			{
				return ex.ErrorCode;
			}
		}
		
		public tblPlantStructue()
		{
		}
		#endregion
		
		#region Private Methods
		private SQLiteParameter[] GetSqlParameters()
		{
			List<SQLiteParameter> SqlParmColl = new List<SQLiteParameter>();
			try
			{
				SqlParmColl.Add(CommonDB.AddSqlParm("@ID", ID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Name", Name, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@ParentID", ParentID, DbType.Int64));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Description", Description, DbType.String));
				SqlParmColl.Add(CommonDB.AddSqlParm("@Type", Type, DbType.Int32));
				SqlParmColl.Add(CommonDB.AddSqlParm("@SolutionID", SolutionID, DbType.Int64));
				return SqlParmColl.ToArray();
			}
			catch (SQLiteException Exc)
			{
				throw Exc;
			}
		}
		
		private void AddFromRecordSet(SQLiteDataReader rs)
		{
			try
			{
				// if value from the recordset, to the ID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ID")) == false))
				{
					ID = ((long)(Convert.ChangeType(rs["ID"], typeof(long))));
				}
				// if value from the recordset, to the Name _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Name")) == false))
				{
					Name = ((string)(Convert.ChangeType(rs["Name"], typeof(string))));
				}
				// if value from the recordset, to the ParentID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("ParentID")) == false))
				{
					ParentID = ((long)(Convert.ChangeType(rs["ParentID"], typeof(long))));
				}
				// if value from the recordset, to the Description _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Description")) == false))
				{
					Description = ((string)(Convert.ChangeType(rs["Description"], typeof(string))));
				}
				// if value from the recordset, to the Type _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("Type")) == false))
				{
					Type = ((int)(Convert.ChangeType(rs["Type"], typeof(int))));
				}
				// if value from the recordset, to the SolutionID _databasename is NOT null then set the value.
				if ((rs.IsDBNull(rs.GetOrdinal("SolutionID")) == false))
				{
					SolutionID = ((long)(Convert.ChangeType(rs["SolutionID"], typeof(long))));
				}
			}
			catch (SQLiteException sqlExc)
			{
				throw sqlExc;
			}
			catch (Exception Exc)
			{
				throw Exc;
			}
		}
		#endregion
	}
	
	public delegate void tblPlantStructueChangedEventHandler(object sender, System.EventArgs e);
	
	public partial class tblPlantStructueCollection : System.Collections.CollectionBase
	{
		
		/// <remarks>SQL Type:tblPlantStructueChangedEventHandler</remarks>
		public event tblPlantStructueChangedEventHandler tblPlantStructueChanged;
		
		/// <remarks>Represents the foreign key object</remarks>
		private tblSolution _SolutionID_tblSolution;
		
		[Description("Represents the foreign key object of the type SolutionID")]
		public tblSolution m_SolutionID_tblSolution
		{
			get
			{
				return _SolutionID_tblSolution;
			}
			set
			{
				_SolutionID_tblSolution = value;
			}
		}
		
		[Description("Constructor")]
		public tblPlantStructueCollection(tblSolution _parent)
		{
			_SolutionID_tblSolution = _parent;
		}
		
		[Description("Invoke the Changed event; called whenever list changes")]
		protected virtual void OntblPlantStructueChanged(System.EventArgs e)
		{
			if (tblPlantStructueChanged != null)
			{
				this.tblPlantStructueChanged(this, e);
			}
		}
		
		[Description("Gets a  tblPlantStructue from the collection.")]
		public tblPlantStructue this[int index]
		{
			get
			{
				return ((tblPlantStructue)(List[index]));
			}
			set
			{
				List[index] = value;
				this.OntblPlantStructueChanged(EventArgs.Empty);
			}
		}
		
		[Description("Gets a  tblPlantStructue from the collection.")]
		public tblPlantStructue Get(int index)
		{
			return ((tblPlantStructue)(List[index]));
		}
		
		[Description("Adds a new tblPlantStructue to the collection.")]
		public void Add(tblPlantStructue item)
		{
			List.Add(item);
			this.OntblPlantStructueChanged(EventArgs.Empty);
		}
		
		[Description("Removes a tblPlantStructue from the collection.")]
		public void Remove(tblPlantStructue item)
		{
			List.Remove(item);
			this.OntblPlantStructueChanged(EventArgs.Empty);
		}
		
		[Description("Inserts an tblPlantStructue into the collection at the specified index.")]
		public void Insert(int index, tblPlantStructue item)
		{
			List.Insert(index, item);
			this.OntblPlantStructueChanged(EventArgs.Empty);
		}
		
		[Description("Returns the index value of the tblPlantStructue class in the collection.")]
		public int IndexOf(tblPlantStructue item)
		{
			return List.IndexOf(item);
		}
		
		[Description("Returns true if the tblPlantStructue class is present in the collection.")]
		public bool Contains(tblPlantStructue item)
		{
			return List.Contains(item);
		}
	}
}
